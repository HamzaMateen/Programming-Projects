        -:    0:Source:logger.c
        -:    0:Graph:logger.gcno
        -:    0:Data:logger.gcda
        -:    0:Runs:442
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:
        -:    3:#include <arpa/inet.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <string.h>
        -:    7:#include <errno.h>
        -:    8:#include <poll.h>
        -:    9:#include <ctype.h>
        -:   10:#include <stdarg.h>
        -:   11:
        -:   12:#if defined(__sun)
        -:   13:#include <atomic.h>
        -:   14:#endif
        -:   15:
        -:   16:#include "memcached.h"
        -:   17:#include "bipbuffer.h"
        -:   18:
        -:   19:#ifdef LOGGER_DEBUG
        -:   20:#define L_DEBUG(...) \
        -:   21:    do { \
        -:   22:        fprintf(stderr, __VA_ARGS__); \
        -:   23:    } while (0)
        -:   24:#else
        -:   25:#define L_DEBUG(...)
        -:   26:#endif
        -:   27:
        -:   28:
        -:   29:/* TODO: put this in a struct and ditch the global vars. */
        -:   30:static logger *logger_stack_head = NULL;
        -:   31:static logger *logger_stack_tail = NULL;
        -:   32:static unsigned int logger_count = 0;
        -:   33:static volatile int do_run_logger_thread = 1;
        -:   34:static pthread_t logger_tid;
        -:   35:pthread_mutex_t logger_stack_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   36:pthread_cond_t logger_stack_cond = PTHREAD_COND_INITIALIZER;
        -:   37:
        -:   38:pthread_key_t logger_key;
        -:   39:
        -:   40:#if !defined(HAVE_GCC_64ATOMICS) && !defined(__sun)
        -:   41:pthread_mutex_t logger_atomics_mutex = PTHREAD_MUTEX_INITIALIZER;
        -:   42:#endif
        -:   43:
        -:   44:#define WATCHER_LIMIT 20
        -:   45:logger_watcher *watchers[20];
        -:   46:struct pollfd watchers_pollfds[20];
        -:   47:int watcher_count = 0;
        -:   48:
        -:   49:#define WATCHER_ALL -1
        -:   50:static int logger_thread_poll_watchers(int force_poll, int watcher);
        -:   51:
        -:   52:/* helpers for logger_log */
        -:   53:
    #####:   54:static void _logger_log_text(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    #####:   55:    int reqlen = d->reqlen;
    #####:   56:    int total = vsnprintf((char *) e->data, reqlen, d->format, ap);
    #####:   57:    if (total <= 0) {
    #####:   58:        fprintf(stderr, "LOGGER: Failed to vsnprintf a text entry: (total) %d\n", total);
        -:   59:    }
    #####:   60:    e->size = total + 1; // null byte
    #####:   61:}
        -:   62:
        1:   63:static void _logger_log_evictions(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        1:   64:    item *it = (item *)entry;
        1:   65:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        -:   66:
       1*:   67:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
        1:   68:    le->latime = current_time - it->time;
        1:   69:    le->it_flags = it->it_flags;
        1:   70:    le->nkey = it->nkey;
        1:   71:    le->nbytes = it->nbytes;
        1:   72:    le->clsid = ITEM_clsid(it);
        1:   73:    memcpy(le->key, ITEM_key(it), it->nkey);
        1:   74:    e->size = sizeof(struct logentry_eviction) + le->nkey;
        1:   75:}
        -:   76:#ifdef EXTSTORE
    #####:   77:static void _logger_log_ext_write(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    #####:   78:    item *it = (item *)entry;
    #####:   79:    int ew_bucket = va_arg(ap, int);
        -:   80:
    #####:   81:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
    #####:   82:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
    #####:   83:    le->latime = current_time - it->time;
    #####:   84:    le->it_flags = it->it_flags;
    #####:   85:    le->nkey = it->nkey;
    #####:   86:    le->clsid = ITEM_clsid(it);
    #####:   87:    le->bucket = (uint8_t)ew_bucket;
    #####:   88:    memcpy(le->key, ITEM_key(it), it->nkey);
    #####:   89:    e->size = sizeof(struct logentry_ext_write) + le->nkey;
    #####:   90:}
        -:   91:#endif
        -:   92:// 0 == nf, 1 == found. 2 == flushed. 3 == expired.
        -:   93:// might be useful to store/print the flags an item has?
        -:   94:// could also collapse this and above code into an "item status" struct. wait
        -:   95:// for more endpoints to be written before making it generic, though.
    81103:   96:static void _logger_log_item_get(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    81103:   97:    int was_found = va_arg(ap, int);
    81103:   98:    char *key = va_arg(ap, char *);
    81103:   99:    int nkey = va_arg(ap, int);
    81103:  100:    int nbytes = va_arg(ap, int);
    81103:  101:    uint8_t clsid = va_arg(ap, int);
    81103:  102:    int sfd = va_arg(ap, int);
        -:  103:
    81103:  104:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
    81103:  105:    le->was_found = was_found;
    81103:  106:    le->nkey = nkey;
    81103:  107:    le->nbytes = nbytes;
    81103:  108:    le->clsid = clsid;
    81103:  109:    memcpy(le->key, key, nkey);
    81103:  110:    le->sfd = sfd;
    81103:  111:    e->size = sizeof(struct logentry_item_get) + nkey;
    81103:  112:}
        -:  113:
        4:  114:static void _logger_log_item_store(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        4:  115:    enum store_item_type status = va_arg(ap, enum store_item_type);
        4:  116:    int comm = va_arg(ap, int);
        4:  117:    char *key = va_arg(ap, char *);
        4:  118:    int nkey = va_arg(ap, int);
        4:  119:    int nbytes = va_arg(ap, int);
        4:  120:    rel_time_t ttl = va_arg(ap, rel_time_t);
        4:  121:    uint8_t clsid = va_arg(ap, int);
        4:  122:    int sfd = va_arg(ap, int);
        -:  123:
        4:  124:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        4:  125:    le->status = status;
        4:  126:    le->cmd = comm;
        4:  127:    le->nkey = nkey;
        4:  128:    le->nbytes = nbytes;
        4:  129:    le->clsid = clsid;
        4:  130:    if (ttl != 0) {
    #####:  131:        le->ttl = ttl - current_time;
        -:  132:    } else {
        4:  133:        le->ttl = 0;
        -:  134:    }
        4:  135:    memcpy(le->key, key, nkey);
        4:  136:    le->sfd = sfd;
        4:  137:    e->size = sizeof(struct logentry_item_store) + nkey;
        4:  138:}
        -:  139:
        3:  140:static void _logger_log_item_deleted(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        3:  141:    item *it = (item *)entry;
        3:  142:    int comm = va_arg(ap, int);
        3:  143:    struct logentry_deletion *le = (struct logentry_deletion *) e->data;
        3:  144:    le->nkey = it->nkey;
        3:  145:    le->cmd = comm;
        3:  146:    le->nbytes = it->nbytes;
        3:  147:    le->clsid = ITEM_clsid(it);
        3:  148:    memcpy(le->key, ITEM_key(it), it->nkey);
        3:  149:    e->size = sizeof(struct logentry_deletion) + le->nkey;
        3:  150:}
        -:  151:
        6:  152:static void _logger_log_conn_event(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        6:  153:    struct sockaddr_in6 *addr = va_arg(ap, struct sockaddr_in6 *);
        6:  154:    socklen_t addrlen = va_arg(ap, socklen_t);
        6:  155:    enum network_transport transport = va_arg(ap, enum network_transport);
        6:  156:    enum close_reasons reason = va_arg(ap, enum close_reasons);
        6:  157:    int sfd = va_arg(ap, int);
        -:  158:
        6:  159:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        -:  160:
        6:  161:    memcpy(&le->addr, addr, addrlen);
        6:  162:    le->sfd = sfd;
        6:  163:    le->transport = transport;
        6:  164:    le->reason = reason;
        6:  165:    e->size = sizeof(struct logentry_conn_event);
        6:  166:}
        -:  167:
        -:  168:/*************************
        -:  169: * Util functions used by the logger background thread
        -:  170: *************************/
        -:  171:
        5:  172:static int _logger_util_addr_endpoint(struct sockaddr_in6 *addr, char *rip,
        -:  173:        size_t riplen, unsigned short *rport) {
        5:  174:    memset(rip, 0, riplen);
        5:  175:    *rport = 0;
        -:  176:
        5:  177:    switch (addr->sin6_family) {
    #####:  178:        case AF_INET:
    #####:  179:            inet_ntop(AF_INET, &((struct sockaddr_in *) addr)->sin_addr,
        -:  180:                    rip, riplen - 1);
    #####:  181:            *rport = ntohs(((struct sockaddr_in *) addr)->sin_port);
    #####:  182:            break;
    #####:  183:        case AF_INET6:
    #####:  184:            inet_ntop(AF_INET6, &((struct sockaddr_in6 *) addr)->sin6_addr,
        -:  185:                    rip, riplen - 1);
    #####:  186:            *rport = ntohs(((struct sockaddr_in6 *) addr)->sin6_port);
    #####:  187:            break;
        -:  188:#ifndef DISABLE_UNIX_SOCKET
        -:  189:        // Connections on Unix socket transports have c->request_addr zeroed out.
        -:  190:        case AF_UNSPEC:
        -:  191:        case AF_UNIX:
        5:  192:            strncpy(rip, "unix", strlen("unix") + 1);
        5:  193:            break;
        -:  194:#endif // #ifndef DISABLE_UNIX_SOCKET
        -:  195:    }
        -:  196:
        5:  197:    return 0;
        -:  198:}
        -:  199:
        -:  200:/*************************
        -:  201: * Logger background thread functions. Aggregates per-worker buffers and
        -:  202: * writes to any watchers.
        -:  203: *************************/
        -:  204:
        -:  205:#define LOGGER_PARSE_SCRATCH 4096
        -:  206:
    #####:  207:static int _logger_parse_text(logentry *e, char *scratch) {
    #####:  208:    return snprintf(scratch, LOGGER_PARSE_SCRATCH, "ts=%lld.%d gid=%llu %s\n",
    #####:  209:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec,
    #####:  210:            (unsigned long long) e->gid, (char *) e->data);
        -:  211:}
        -:  212:
        4:  213:static int _logger_parse_ise(logentry *e, char *scratch) {
        4:  214:    int total;
        4:  215:    const char *cmd = "na";
        4:  216:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
        4:  217:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        4:  218:    const char * const status_map[] = {
        -:  219:        "not_stored", "stored", "exists", "not_found", "too_large", "no_memory" };
        4:  220:    const char * const cmd_map[] = {
        -:  221:        "null", "add", "set", "replace", "append", "prepend", "cas", "append", "prepend" };
        -:  222:
        4:  223:    if (le->cmd <= 8)
        4:  224:        cmd = cmd_map[le->cmd];
        -:  225:
        4:  226:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        4:  227:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  228:            "ts=%lld.%d gid=%llu type=item_store key=%s status=%s cmd=%s ttl=%u clsid=%u cfd=%d size=%d\n",
        4:  229:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        4:  230:            keybuf, status_map[le->status], cmd, le->ttl, le->clsid, le->sfd,
        4:  231:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
        4:  232:    return total;
        -:  233:}
        -:  234:
    81103:  235:static int _logger_parse_ige(logentry *e, char *scratch) {
    81103:  236:    int total;
    81103:  237:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
    81103:  238:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
    81103:  239:    const char * const was_found_map[] = {
        -:  240:        "not_found", "found", "flushed", "expired" };
        -:  241:
    81103:  242:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        8:  243:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  244:            "ts=%lld.%d gid=%llu type=item_get key=%s status=%s clsid=%u cfd=%d size=%d\n",
    81103:  245:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
    81103:  246:            keybuf, was_found_map[le->was_found], le->clsid, le->sfd,
    81103:  247:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
    81103:  248:    return total;
        -:  249:}
        -:  250:
        1:  251:static int _logger_parse_ee(logentry *e, char *scratch) {
        1:  252:    int total;
        1:  253:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
        1:  254:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        1:  255:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        1:  256:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  257:            "ts=%lld.%d gid=%llu type=eviction key=%s fetch=%s ttl=%lld la=%d clsid=%u size=%d\n",
        1:  258:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        1:  259:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
        1:  260:            (long long int)le->exptime, le->latime, le->clsid,
        1:  261:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
        -:  262:
        1:  263:    return total;
        -:  264:}
        -:  265:
        3:  266:static int _logger_parse_ide(logentry *e, char *scratch) {
        3:  267:    int total;
        3:  268:    const char *cmd = "na";
        3:  269:    const char * const cmd_map[] = {
        -:  270:            "null", "delete", "md" };
        3:  271:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
        3:  272:    struct logentry_deletion *le = (struct logentry_deletion *) e->data;
        3:  273:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        -:  274:
        3:  275:    if (le->cmd <= 2)
        3:  276:        cmd = cmd_map[le->cmd];
        -:  277:
        3:  278:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  279:                     "ts=%d.%d gid=%llu type=deleted key=%s cmd=%s clsid=%u size=%d\n",
        3:  280:                     (int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        3:  281:                     keybuf, cmd, le->clsid,
        3:  282:                     le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
        3:  283:    return total;
        -:  284:}
        -:  285:
        -:  286:#ifdef EXTSTORE
    #####:  287:static int _logger_parse_extw(logentry *e, char *scratch) {
    #####:  288:    int total;
    #####:  289:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
    #####:  290:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
    #####:  291:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
    #####:  292:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  293:            "ts=%lld.%d gid=%llu type=extwrite key=%s fetch=%s ttl=%lld la=%d clsid=%u bucket=%u\n",
    #####:  294:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
    #####:  295:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
    #####:  296:            (long long int)le->exptime, le->latime, le->clsid, le->bucket);
        -:  297:
    #####:  298:    return total;
        -:  299:}
        -:  300:#endif
        -:  301:
        2:  302:static int _logger_parse_cne(logentry *e, char *scratch) {
        2:  303:    int total;
        2:  304:    unsigned short rport = 0;
        2:  305:    char rip[64];
        2:  306:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        2:  307:    const char * const transport_map[] = { "local", "tcp", "udp" };
        -:  308:
        2:  309:    _logger_util_addr_endpoint(&le->addr, rip, sizeof(rip), &rport);
        -:  310:
        2:  311:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  312:            "ts=%lld.%d gid=%llu type=conn_new rip=%s rport=%hu transport=%s cfd=%d\n",
        2:  313:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        2:  314:            rip, rport, transport_map[le->transport], le->sfd);
        -:  315:
        2:  316:    return total;
        -:  317:}
        -:  318:
        3:  319:static int _logger_parse_cce(logentry *e, char *scratch) {
        3:  320:    int total;
        3:  321:    unsigned short rport = 0;
        3:  322:    char rip[64];
        3:  323:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        3:  324:    const char * const transport_map[] = { "local", "tcp", "udp" };
        3:  325:    const char * const reason_map[] = { "error", "normal", "idle_timeout", "shutdown" };
        -:  326:
        3:  327:    _logger_util_addr_endpoint(&le->addr, rip, sizeof(rip), &rport);
        -:  328:
        3:  329:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  330:            "ts=%lld.%d gid=%llu type=conn_close rip=%s rport=%hu transport=%s reason=%s cfd=%d\n",
        3:  331:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        3:  332:            rip, rport, transport_map[le->transport],
        3:  333:            reason_map[le->reason], le->sfd);
        -:  334:
        3:  335:    return total;
        -:  336:}
        -:  337:
        -:  338:#ifdef PROXY
        -:  339:// TODO (v2): the length caps here are all magic numbers. Haven't thought of
        -:  340:// something yet that I like better.
        -:  341:// Should at least make a define to the max log len (1024) and do some math
        -:  342:// here.
        -:  343:static void _logger_log_proxy_req(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        -:  344:    char *req = va_arg(ap, char *);
        -:  345:    int reqlen = va_arg(ap, uint32_t);
        -:  346:    long elapsed = va_arg(ap, long);
        -:  347:    unsigned short type = va_arg(ap, int);
        -:  348:    unsigned short code = va_arg(ap, int);
        -:  349:    int status = va_arg(ap, int);
        -:  350:    int conn_fd = va_arg(ap, int);
        -:  351:    char *detail = va_arg(ap, char *);
        -:  352:    int dlen = va_arg(ap, int);
        -:  353:    char *be_name = va_arg(ap, char *);
        -:  354:    char *be_port = va_arg(ap, char *);
        -:  355:
        -:  356:    struct logentry_proxy_req *le = (void *)e->data;
        -:  357:    le->type = type;
        -:  358:    le->code = code;
        -:  359:    le->status = status;
        -:  360:    le->conn_fd = conn_fd;
        -:  361:    le->dlen = dlen;
        -:  362:    le->elapsed = elapsed;
        -:  363:    if (be_name && be_port) {
        -:  364:        le->be_namelen = strlen(be_name);
        -:  365:        le->be_portlen = strlen(be_port);
        -:  366:    } else {
        -:  367:        le->be_namelen = 0;
        -:  368:        le->be_portlen = 0;
        -:  369:    }
        -:  370:    char *data = le->data;
        -:  371:    if (req[reqlen-2] == '\r') {
        -:  372:        reqlen -= 2;
        -:  373:    } else {
        -:  374:        reqlen--;
        -:  375:    }
        -:  376:    if (reqlen > 300) {
        -:  377:        reqlen = 300;
        -:  378:    }
        -:  379:    if (dlen > 150) {
        -:  380:        dlen = 150;
        -:  381:    }
        -:  382:    // be_namelen and be_portlen can't be longer than 255+6
        -:  383:    le->reqlen = reqlen;
        -:  384:    memcpy(data, req, reqlen);
        -:  385:    data += reqlen;
        -:  386:    memcpy(data, detail, dlen);
        -:  387:    data += dlen;
        -:  388:    memcpy(data, be_name, le->be_namelen);
        -:  389:    data += le->be_namelen;
        -:  390:    memcpy(data, be_port, le->be_portlen);
        -:  391:    e->size = sizeof(struct logentry_proxy_req) + reqlen + dlen + le->be_namelen + le->be_portlen;
        -:  392:}
        -:  393:
        -:  394:static int _logger_parse_prx_req(logentry *e, char *scratch) {
        -:  395:    int total;
        -:  396:    struct logentry_proxy_req *le = (void *)e->data;
        -:  397:
        -:  398:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  399:            "ts=%lld.%d gid=%llu type=proxy_req elapsed=%lu type=%d code=%d status=%d cfd=%d be=%.*s:%.*s detail=%.*s req=%.*s\n",
        -:  400:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        -:  401:            le->elapsed, le->type, le->code, le->status, le->conn_fd,
        -:  402:            (int)le->be_namelen, le->data+le->reqlen+le->dlen,
        -:  403:            (int)le->be_portlen, le->data+le->reqlen+le->dlen+le->be_namelen, // fml.
        -:  404:            (int)le->dlen, le->data+le->reqlen, (int)le->reqlen, le->data
        -:  405:            );
        -:  406:    return total;
        -:  407:}
        -:  408:
        -:  409:#define MAX_RBUF_READ 100
        -:  410:static void _logger_log_proxy_errbe(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        -:  411:    char *errmsg = va_arg(ap, char *);
        -:  412:    char *be_name = va_arg(ap, char *);
        -:  413:    char *be_port = va_arg(ap, char *);
        -:  414:    char *be_label = va_arg(ap, char *);
        -:  415:    int be_depth = va_arg(ap, int);
        -:  416:    char *be_rbuf = va_arg(ap, char *);
        -:  417:    int be_rbuflen = va_arg(ap, int);
        -:  418:    int be_retry = va_arg(ap, int);
        -:  419:
        -:  420:    struct logentry_proxy_errbe *le = (void *)e->data;
        -:  421:    le->be_depth = be_depth;
        -:  422:    le->retry = be_retry;
        -:  423:    le->errlen = strlen(errmsg);
        -:  424:    if (be_name && be_port) {
        -:  425:        le->be_namelen = strlen(be_name);
        -:  426:        le->be_portlen = strlen(be_port);
        -:  427:    }
        -:  428:
        -:  429:    if (be_label) {
        -:  430:        le->be_labellen = strlen(be_label);
        -:  431:    }
        -:  432:
        -:  433:    le->be_rbuflen = be_rbuflen;
        -:  434:    if (be_rbuflen > MAX_RBUF_READ) {
        -:  435:        le->be_rbuflen = MAX_RBUF_READ;
        -:  436:    }
        -:  437:
        -:  438:    char *data = le->data;
        -:  439:    memcpy(data, errmsg, le->errlen);
        -:  440:    data += le->errlen;
        -:  441:    memcpy(data, be_name, le->be_namelen);
        -:  442:    data += le->be_namelen;
        -:  443:    memcpy(data, be_port, le->be_portlen);
        -:  444:    data += le->be_portlen;
        -:  445:    memcpy(data, be_label, le->be_labellen);
        -:  446:    data += le->be_labellen;
        -:  447:    memcpy(data, be_rbuf, le->be_rbuflen);
        -:  448:    data += le->be_rbuflen;
        -:  449:
        -:  450:    e->size = sizeof(struct logentry_proxy_errbe) + (data - le->data);
        -:  451:}
        -:  452:
        -:  453:static int _logger_parse_prx_errbe(logentry *e, char *scratch) {
        -:  454:    int total;
        -:  455:    char rbuf[MAX_RBUF_READ * 3]; // x 3 for worst case URI encoding.
        -:  456:    struct logentry_proxy_errbe *le = (void *)e->data;
        -:  457:    char *data = le->data;
        -:  458:    char *errmsg = data;
        -:  459:    data += le->errlen;
        -:  460:    char *be_name = data;
        -:  461:    data += le->be_namelen;
        -:  462:    char *be_port = data;
        -:  463:    data += le->be_portlen;
        -:  464:    char *be_label = data;
        -:  465:    data += le->be_labellen;
        -:  466:    char *be_rbuf = data;
        -:  467:
        -:  468:    uriencode(be_rbuf, rbuf, le->be_rbuflen, MAX_RBUF_READ * 3);
        -:  469:    if (le->retry) {
        -:  470:        total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  471:                "ts=%lld.%d gid=%llu type=proxy_backend error=%.*s name=%.*s port=%.*s label=%.*s retry=%d\n",
        -:  472:                (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        -:  473:                (int)le->errlen, errmsg, (int)le->be_namelen, be_name,
        -:  474:                (int)le->be_portlen, be_port, (int)le->be_labellen, be_label, le->retry);
        -:  475:    } else {
        -:  476:        total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  477:                "ts=%lld.%d gid=%llu type=proxy_backend error=%.*s name=%.*s port=%.*s label=%.*s depth=%d rbuf=%s\n",
        -:  478:                (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        -:  479:                (int)le->errlen, errmsg, (int)le->be_namelen, be_name,
        -:  480:                (int)le->be_portlen, be_port, (int)le->be_labellen, be_label, le->be_depth, rbuf);
        -:  481:    }
        -:  482:
        -:  483:    return total;
        -:  484:}
        -:  485:#endif
        -:  486:
        -:  487:/* Should this go somewhere else? */
        -:  488:static const entry_details default_entries[] = {
        -:  489:    [LOGGER_ASCII_CMD] = {512, LOG_RAWCMDS, _logger_log_text, _logger_parse_text, "<%d %s"},
        -:  490:    [LOGGER_EVICTION] = {512, LOG_EVICTIONS, _logger_log_evictions, _logger_parse_ee, NULL},
        -:  491:    [LOGGER_ITEM_GET] = {512, LOG_FETCHERS, _logger_log_item_get, _logger_parse_ige, NULL},
        -:  492:    [LOGGER_ITEM_STORE] = {512, LOG_MUTATIONS, _logger_log_item_store, _logger_parse_ise, NULL},
        -:  493:    [LOGGER_CRAWLER_STATUS] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  494:        "type=lru_crawler crawler=%d lru=%s low_mark=%llu next_reclaims=%llu since_run=%u next_run=%d elapsed=%u examined=%llu reclaimed=%llu"
        -:  495:    },
        -:  496:    [LOGGER_SLAB_MOVE] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  497:        "type=slab_move src=%d dst=%d"
        -:  498:    },
        -:  499:    [LOGGER_CONNECTION_NEW] = {512, LOG_CONNEVENTS, _logger_log_conn_event, _logger_parse_cne, NULL},
        -:  500:    [LOGGER_CONNECTION_CLOSE] = {512, LOG_CONNEVENTS, _logger_log_conn_event, _logger_parse_cce, NULL},
        -:  501:    [LOGGER_DELETIONS] = {512, LOG_DELETIONS, _logger_log_item_deleted, _logger_parse_ide, NULL},
        -:  502:#ifdef EXTSTORE
        -:  503:    [LOGGER_EXTSTORE_WRITE] = {512, LOG_EVICTIONS, _logger_log_ext_write, _logger_parse_extw, NULL},
        -:  504:    [LOGGER_COMPACT_START] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  505:        "type=compact_start id=%lu version=%llu"
        -:  506:    },
        -:  507:    [LOGGER_COMPACT_ABORT] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  508:        "type=compact_abort id=%lu"
        -:  509:    },
        -:  510:    [LOGGER_COMPACT_READ_START] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  511:        "type=compact_read_start id=%lu offset=%llu"
        -:  512:    },
        -:  513:    [LOGGER_COMPACT_READ_END] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  514:        "type=compact_read_end id=%lu offset=%llu rescues=%lu lost=%lu skipped=%lu"
        -:  515:    },
        -:  516:    [LOGGER_COMPACT_END] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  517:        "type=compact_end id=%lu"
        -:  518:    },
        -:  519:    [LOGGER_COMPACT_FRAGINFO] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  520:        "type=compact_fraginfo ratio=%.2f bytes=%lu"
        -:  521:    },
        -:  522:#endif
        -:  523:#ifdef PROXY
        -:  524:    [LOGGER_PROXY_CONFIG] = {512, LOG_PROXYEVENTS, _logger_log_text, _logger_parse_text,
        -:  525:        "type=proxy_conf status=%s"
        -:  526:    },
        -:  527:    [LOGGER_PROXY_REQ] = {1024, LOG_PROXYREQS, _logger_log_proxy_req, _logger_parse_prx_req, NULL},
        -:  528:    [LOGGER_PROXY_ERROR] = {512, LOG_PROXYEVENTS, _logger_log_text, _logger_parse_text,
        -:  529:        "type=proxy_error msg=%s"
        -:  530:    },
        -:  531:    [LOGGER_PROXY_USER] = {512, LOG_PROXYUSER, _logger_log_text, _logger_parse_text,
        -:  532:        "type=proxy_user msg=%s"
        -:  533:    },
        -:  534:    [LOGGER_PROXY_BE_ERROR] = {512, LOG_PROXYEVENTS, _logger_log_proxy_errbe, _logger_parse_prx_errbe,
        -:  535:        NULL
        -:  536:    },
        -:  537:
        -:  538:#endif
        -:  539:};
        -:  540:
        -:  541:/*************************
        -:  542: * Util functions shared between bg thread and workers
        -:  543: *************************/
        -:  544:
        -:  545:/* Logger GID's can be used by watchers to put logs back into strict order
        -:  546: */
        -:  547:static uint64_t logger_gid = 0;
    81129:  548:uint64_t logger_get_gid(void) {
        -:  549:#ifdef HAVE_GCC_64ATOMICS
    81129:  550:    return __sync_add_and_fetch(&logger_gid, 1);
        -:  551:#elif defined(__sun)
        -:  552:    return atomic_inc_64_nv(&logger_gid);
        -:  553:#else
        -:  554:    mutex_lock(&logger_atomics_mutex);
        -:  555:    uint64_t res = ++logger_gid;
        -:  556:    mutex_unlock(&logger_atomics_mutex);
        -:  557:    return res;
        -:  558:#endif
        -:  559:}
        -:  560:
        1:  561:void logger_set_gid(uint64_t gid) {
        -:  562:#ifdef HAVE_GCC_64ATOMICS
        1:  563:    __sync_add_and_fetch(&logger_gid, gid);
        -:  564:#elif defined(__sun)
        -:  565:    atomic_add_64(&logger_gid);
        -:  566:#else
        -:  567:    mutex_lock(&logger_atomics_mutex);
        -:  568:    logger_gid = gid;
        -:  569:    mutex_unlock(&logger_atomics_mutex);
        -:  570:#endif
        1:  571:}
        -:  572:
        -:  573:/* TODO: genericize lists. would be nice to import queue.h if the impact is
        -:  574: * studied... otherwise can just write a local one.
        -:  575: */
        -:  576:/* Add to the list of threads with a logger object */
      644:  577:static void logger_link_q(logger *l) {
      644:  578:    pthread_mutex_lock(&logger_stack_lock);
     644*:  579:    assert(l != logger_stack_head);
        -:  580:
      644:  581:    l->prev = 0;
      644:  582:    l->next = logger_stack_head;
      644:  583:    if (l->next) l->next->prev = l;
      644:  584:    logger_stack_head = l;
      644:  585:    if (logger_stack_tail == 0) logger_stack_tail = l;
      644:  586:    logger_count++;
      644:  587:    pthread_mutex_unlock(&logger_stack_lock);
      644:  588:    return;
        -:  589:}
        -:  590:
        -:  591:/* Remove from the list of threads with a logger object */
        -:  592:/*static void logger_unlink_q(logger *l) {
        -:  593:    pthread_mutex_lock(&logger_stack_lock);
        -:  594:    if (logger_stack_head == l) {
        -:  595:        assert(l->prev == 0);
        -:  596:        logger_stack_head = l->next;
        -:  597:    }
        -:  598:    if (logger_stack_tail == l) {
        -:  599:        assert(l->next == 0);
        -:  600:        logger_stack_tail = l->prev;
        -:  601:    }
        -:  602:    assert(l->next != l);
        -:  603:    assert(l->prev != l);
        -:  604:
        -:  605:    if (l->next) l->next->prev = l->prev;
        -:  606:    if (l->prev) l->prev->next = l->next;
        -:  607:    logger_count--;
        -:  608:    pthread_mutex_unlock(&logger_stack_lock);
        -:  609:    return;
        -:  610:}*/
        -:  611:
        -:  612:/* Called with logger stack locked.
        -:  613: * Iterates over every watcher collecting enabled flags.
        -:  614: */
       22:  615:static void logger_set_flags(void) {
       22:  616:    logger *l = NULL;
       22:  617:    int x = 0;
       22:  618:    uint16_t f = 0; /* logger eflags */
        -:  619:
      462:  620:    for (x = 0; x < WATCHER_LIMIT; x++) {
      440:  621:        logger_watcher *w = watchers[x];
      440:  622:        if (w == NULL)
      411:  623:            continue;
        -:  624:
       29:  625:        f |= w->eflags;
        -:  626:    }
      132:  627:    for (l = logger_stack_head; l != NULL; l=l->next) {
      110:  628:        pthread_mutex_lock(&l->mutex);
      110:  629:        l->eflags = f;
      110:  630:        pthread_mutex_unlock(&l->mutex);
        -:  631:    }
       22:  632:    return;
        -:  633:}
        -:  634:
        -:  635:/* Completes rendering of log line. */
    81116:  636:static enum logger_parse_entry_ret logger_thread_parse_entry(logentry *e, struct logger_stats *ls,
        -:  637:        char *scratch, int *scratch_len) {
    81116:  638:    int total = 0;
    81116:  639:    const entry_details *d = &default_entries[e->event];
   81116*:  640:    assert(d->parse_cb != NULL);
    81116:  641:    total = d->parse_cb(e, scratch);
        -:  642:
    81116:  643:    if (total >= LOGGER_PARSE_SCRATCH || total <= 0) {
        -:  644:        L_DEBUG("LOGGER: Failed to flatten log entry!\n");
        -:  645:        return LOGGER_PARSE_ENTRY_FAILED;
        -:  646:    } else {
    81116:  647:        *scratch_len = total;
        -:  648:    }
        -:  649:
    81116:  650:    return LOGGER_PARSE_ENTRY_OK;
        -:  651:}
        -:  652:
        -:  653:/* Writes flattened entry to available watchers */
    81116:  654:static void logger_thread_write_entry(logentry *e, struct logger_stats *ls,
        -:  655:        char *scratch, int scratch_len) {
    81116:  656:    int x, total;
        -:  657:    /* Write the line into available watchers with matching flags */
  1703436:  658:    for (x = 0; x < WATCHER_LIMIT; x++) {
  1622320:  659:        logger_watcher *w = watchers[x];
  1622320:  660:        char *skip_scr = NULL;
  1622320:  661:        if (w == NULL || (e->eflags & w->eflags) == 0 || (e->gid < w->min_gid))
  1541201:  662:            continue;
        -:  663:
        -:  664:         /* Avoid poll()'ing constantly when buffer is full by resetting a
        -:  665:         * flag periodically.
        -:  666:         */
    83958:  667:        while (!w->failed_flush &&
     3609:  668:                (skip_scr = (char *) bipbuf_request(w->buf, scratch_len + 128)) == NULL) {
     2839:  669:            if (logger_thread_poll_watchers(0, x) <= 0) {
     2830:  670:                L_DEBUG("LOGGER: Watcher had no free space for line of size (%d)\n", scratch_len + 128);
     2830:  671:                w->failed_flush = true;
        -:  672:            }
        -:  673:        }
        -:  674:
    81119:  675:        if (w->failed_flush) {
    80349:  676:            L_DEBUG("LOGGER: Fast skipped for watcher [%d] due to failed_flush\n", w->sfd);
    80349:  677:            w->skipped++;
    80349:  678:            ls->watcher_skipped++;
    80349:  679:            continue;
        -:  680:        }
        -:  681:
      770:  682:        if (w->skipped > 0) {
        1:  683:            total = snprintf(skip_scr, 128, "skipped=%llu\n", (unsigned long long) w->skipped);
       1*:  684:            if (total >= 128 || total <= 0) {
    #####:  685:                L_DEBUG("LOGGER: Failed to flatten skipped message into watcher [%d]\n", w->sfd);
    #####:  686:                w->skipped++;
    #####:  687:                ls->watcher_skipped++;
    #####:  688:                continue;
        -:  689:            }
        1:  690:            bipbuf_push(w->buf, total);
        1:  691:            w->skipped = 0;
        -:  692:        }
        -:  693:        /* Can't fail because bipbuf_request succeeded. */
      770:  694:        bipbuf_offer(w->buf, (unsigned char *) scratch, scratch_len);
      770:  695:        ls->watcher_sent++;
        -:  696:    }
    81116:  697:}
        -:  698:
        -:  699:/* Called with logger stack locked.
        -:  700: * Releases every chunk associated with a watcher and closes the connection.
        -:  701: * We can't presently send a connection back to the worker for further
        -:  702: * processing.
        -:  703: */
       11:  704:static void logger_thread_close_watcher(logger_watcher *w) {
       11:  705:    L_DEBUG("LOGGER: Closing dead watcher\n");
       11:  706:    watchers[w->id] = NULL;
       11:  707:    sidethread_conn_close(w->c);
       11:  708:    watcher_count--;
       11:  709:    bipbuf_free(w->buf);
       11:  710:    free(w);
       11:  711:    logger_set_flags();
       11:  712:}
        -:  713:
        -:  714:/* Reads a particular worker thread's available bipbuf bytes. Parses each log
        -:  715: * entry into the watcher buffers.
        -:  716: */
    19550:  717:static int logger_thread_read(logger *l, struct logger_stats *ls) {
    19550:  718:    unsigned int size;
    19550:  719:    unsigned int pos = 0;
    19550:  720:    unsigned char *data;
    19550:  721:    char scratch[LOGGER_PARSE_SCRATCH];
    19550:  722:    logentry *e;
    19550:  723:    pthread_mutex_lock(&l->mutex);
    19550:  724:    data = bipbuf_peek_all(l->buf, &size);
    19550:  725:    pthread_mutex_unlock(&l->mutex);
        -:  726:
    19550:  727:    if (data == NULL) {
        -:  728:        return 0;
        -:  729:    }
        -:  730:    L_DEBUG("LOGGER: Got %d bytes from bipbuffer\n", size);
        -:  731:
        -:  732:    /* parse buffer */
    83965:  733:    while (pos < size && watcher_count > 0) {
    81116:  734:        enum logger_parse_entry_ret ret;
    81116:  735:        int scratch_len = 0;
    81116:  736:        e = (logentry *) (data + pos);
    81116:  737:        ret = logger_thread_parse_entry(e, ls, scratch, &scratch_len);
    81116:  738:        if (ret != LOGGER_PARSE_ENTRY_OK) {
        -:  739:            /* TODO: stats counter */
    #####:  740:            fprintf(stderr, "LOGGER: Failed to parse log entry\n");
        -:  741:        } else {
    81116:  742:            logger_thread_write_entry(e, ls, scratch, scratch_len);
        -:  743:        }
    81116:  744:        pos += sizeof(logentry) + e->size + e->pad;
        -:  745:    }
    2849*:  746:    assert(pos <= size);
        -:  747:
     2849:  748:    pthread_mutex_lock(&l->mutex);
     2849:  749:    data = bipbuf_poll(l->buf, size);
     2849:  750:    ls->worker_written += l->written;
     2849:  751:    ls->worker_dropped += l->dropped;
     2849:  752:    l->written = 0;
     2849:  753:    l->dropped = 0;
     2849:  754:    pthread_mutex_unlock(&l->mutex);
     2849:  755:    if (data == NULL) {
    #####:  756:        fprintf(stderr, "LOGGER: unexpectedly couldn't advance buf pointer\n");
    #####:  757:        assert(0);
        -:  758:    }
     2849:  759:    return size; /* maybe the count of objects iterated? */
        -:  760:}
        -:  761:
        -:  762:/* Since the event loop code isn't reusable without a refactor, and we have a
        -:  763: * limited number of potential watchers, we run our own poll loop.
        -:  764: * This calls poll() unnecessarily during write flushes, should be possible to
        -:  765: * micro-optimize later.
        -:  766: *
        -:  767: * This flushes buffers attached to watchers, iterating through the bytes set
        -:  768: * to each worker. Also checks for readability in case client connection was
        -:  769: * closed.
        -:  770: *
        -:  771: * Allows a specific watcher to be flushed (if buf full)
        -:  772: */
     6749:  773:static int logger_thread_poll_watchers(int force_poll, int watcher) {
     6749:  774:    int x;
     6749:  775:    int nfd = 0;
     6749:  776:    unsigned char *data;
     6749:  777:    unsigned int data_size = 0;
     6749:  778:    int flushed = 0;
        -:  779:
   141729:  780:    for (x = 0; x < WATCHER_LIMIT; x++) {
   134980:  781:        logger_watcher *w = watchers[x];
   134980:  782:        if (w == NULL || (watcher != WATCHER_ALL && x != watcher))
   128194:  783:            continue;
        -:  784:
     6786:  785:        data = bipbuf_peek_all(w->buf, &data_size);
     6786:  786:        if (data != NULL) {
     6679:  787:            watchers_pollfds[nfd].fd = w->sfd;
     6679:  788:            watchers_pollfds[nfd].events = POLLOUT;
     6679:  789:            nfd++;
      107:  790:        } else if (force_poll) {
      107:  791:            watchers_pollfds[nfd].fd = w->sfd;
      107:  792:            watchers_pollfds[nfd].events = POLLIN;
      107:  793:            nfd++;
        -:  794:        }
        -:  795:        /* This gets set after a call to poll, and should be used to gate on
        -:  796:         * calling poll again.
        -:  797:         */
     6786:  798:        w->failed_flush = false;
        -:  799:    }
        -:  800:
     6749:  801:    if (nfd == 0)
        -:  802:        return 0;
        -:  803:
        -:  804:    //L_DEBUG("LOGGER: calling poll() [data_size: %d]\n", data_size);
     6747:  805:    int ret = poll(watchers_pollfds, nfd, 0);
        -:  806:
     6747:  807:    if (ret < 0) {
    #####:  808:        perror("something failed with logger thread watcher fd polling");
    #####:  809:        return -1;
        -:  810:    }
        -:  811:
        -:  812:    nfd = 0;
   141687:  813:    for (x = 0; x < WATCHER_LIMIT; x++) {
   134940:  814:        logger_watcher *w = watchers[x];
   134940:  815:        if (w == NULL || (watcher != WATCHER_ALL && x != watcher))
   128154:  816:            continue;
        -:  817:
     6786:  818:        data_size = 0;
        -:  819:        /* Early detection of a disconnect. Otherwise we have to wait until
        -:  820:         * the next write
        -:  821:         */
     6786:  822:        if (watchers_pollfds[nfd].revents & POLLIN) {
        9:  823:            char buf[1];
        9:  824:            int res = ((conn*)w->c)->read(w->c, buf, 1);
        9:  825:            if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
        9:  826:                L_DEBUG("LOGGER: watcher closed remotely\n");
        9:  827:                logger_thread_close_watcher(w);
        9:  828:                nfd++;
        9:  829:                continue;
        -:  830:            }
        -:  831:        }
     6777:  832:        if ((data = bipbuf_peek_all(w->buf, &data_size)) != NULL) {
     6679:  833:            if (watchers_pollfds[nfd].revents & (POLLHUP|POLLERR)) {
        2:  834:                L_DEBUG("LOGGER: watcher closed during poll() call\n");
        2:  835:                logger_thread_close_watcher(w);
     6677:  836:            } else if (watchers_pollfds[nfd].revents & POLLOUT) {
       45:  837:                int total = 0;
        -:  838:
        -:  839:                /* We can write a bit. */
       45:  840:                switch (w->t) {
    #####:  841:                    case LOGGER_WATCHER_STDERR:
    #####:  842:                        total = fwrite(data, 1, data_size, stderr);
    #####:  843:                        break;
       45:  844:                    case LOGGER_WATCHER_CLIENT:
       45:  845:                        total = ((conn*)w->c)->write(w->c, data, data_size);
       45:  846:                        break;
        -:  847:                }
        -:  848:
        -:  849:                L_DEBUG("LOGGER: poll() wrote %d to %d (data_size: %d) (bipbuf_used: %d)\n", total, w->sfd,
       45:  850:                        data_size, bipbuf_used(w->buf));
       45:  851:                if (total == -1) {
    #####:  852:                    if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  853:                        logger_thread_close_watcher(w);
        -:  854:                    }
        -:  855:                    L_DEBUG("LOGGER: watcher hit EAGAIN\n");
       45:  856:                } else if (total == 0) {
    #####:  857:                    logger_thread_close_watcher(w);
        -:  858:                } else {
       45:  859:                    bipbuf_poll(w->buf, total);
       45:  860:                    flushed += total;
        -:  861:                }
        -:  862:            }
        -:  863:        }
     6777:  864:        nfd++;
        -:  865:    }
        -:  866:    return flushed;
        -:  867:}
        -:  868:
     3910:  869:static void logger_thread_flush_stats(struct logger_stats *ls) {
     3910:  870:    STATS_LOCK();
     3910:  871:    stats.log_worker_dropped  += ls->worker_dropped;
     3910:  872:    stats.log_worker_written  += ls->worker_written;
     3910:  873:    stats.log_watcher_skipped += ls->watcher_skipped;
     3910:  874:    stats.log_watcher_sent    += ls->watcher_sent;
     3910:  875:    stats_state.log_watchers   = ls->watcher_count;
     3910:  876:    STATS_UNLOCK();
     3910:  877:}
        -:  878:
        -:  879:#define MAX_LOGGER_SLEEP 1000000
        -:  880:#define MIN_LOGGER_SLEEP 1000
        -:  881:
        -:  882:/* Primary logger thread routine */
      121:  883:static void *logger_thread(void *arg) {
      121:  884:    useconds_t to_sleep = MIN_LOGGER_SLEEP;
      121:  885:    L_DEBUG("LOGGER: Starting logger thread\n");
        -:  886:    // TODO: If we ever have item references in the logger code, will need to
        -:  887:    // ensure everything is dequeued before stopping the thread.
     4031:  888:    while (do_run_logger_thread) {
     4029:  889:        int found_logs = 0;
     4029:  890:        logger *l;
     4029:  891:        struct logger_stats ls;
     4029:  892:        memset(&ls, 0, sizeof(struct logger_stats));
        -:  893:
        -:  894:        /* only sleep if we're *above* the minimum */
     4029:  895:        if (to_sleep > MIN_LOGGER_SLEEP)
     1068:  896:            usleep(to_sleep);
        -:  897:
        -:  898:        /* Call function to iterate each logger. */
     4029:  899:        pthread_mutex_lock(&logger_stack_lock);
     4029:  900:        if (watcher_count == 0) {
        -:  901:            // Not bothering to loop on the condition here since it's fine to
        -:  902:            // walk through with zero watchers.
      126:  903:            pthread_cond_wait(&logger_stack_cond, &logger_stack_lock);
        -:  904:        }
    23460:  905:        for (l = logger_stack_head; l != NULL; l=l->next) {
        -:  906:            /* lock logger, call function to manipulate it */
    19550:  907:            found_logs += logger_thread_read(l, &ls);
        -:  908:        }
        -:  909:
     3910:  910:        logger_thread_poll_watchers(1, WATCHER_ALL);
        -:  911:
        -:  912:        /* capture the current count within mutual exclusion of the lock */
     3910:  913:        ls.watcher_count = watcher_count;
        -:  914:
     3910:  915:        pthread_mutex_unlock(&logger_stack_lock);
        -:  916:
        -:  917:        /* TODO: abstract into a function and share with lru_crawler */
     3910:  918:        if (!found_logs) {
     1061:  919:            if (to_sleep < MAX_LOGGER_SLEEP)
     1061:  920:                to_sleep += to_sleep / 8;
     1061:  921:            if (to_sleep > MAX_LOGGER_SLEEP)
        -:  922:                to_sleep = MAX_LOGGER_SLEEP;
        -:  923:        } else {
     2849:  924:            to_sleep /= 2;
     2849:  925:            if (to_sleep < MIN_LOGGER_SLEEP)
     2840:  926:                to_sleep = MIN_LOGGER_SLEEP;
        -:  927:        }
     3910:  928:        logger_thread_flush_stats(&ls);
        -:  929:    }
        -:  930:
        2:  931:    return NULL;
        -:  932:}
        -:  933:
      121:  934:static int start_logger_thread(void) {
      121:  935:    int ret;
      121:  936:    do_run_logger_thread = 1;
      121:  937:    if ((ret = pthread_create(&logger_tid, NULL,
        -:  938:                              logger_thread, NULL)) != 0) {
    #####:  939:        fprintf(stderr, "Can't start logger thread: %s\n", strerror(ret));
    #####:  940:        return -1;
        -:  941:    }
      121:  942:    thread_setname(logger_tid, "mc-log");
      121:  943:    return 0;
        -:  944:}
        -:  945:
        2:  946:static int stop_logger_thread(void) {
        -:  947:    // Guarantees that the logger thread is waiting on 'logger_stack_cond'
        -:  948:    // before we signal it.
        2:  949:    pthread_mutex_lock(&logger_stack_lock);
        2:  950:    do_run_logger_thread = 0;
        2:  951:    pthread_cond_signal(&logger_stack_cond);
        2:  952:    pthread_mutex_unlock(&logger_stack_lock);
        2:  953:    pthread_join(logger_tid, NULL);
        2:  954:    return 0;
        -:  955:}
        -:  956:
        -:  957:/*************************
        -:  958: * Public functions for submitting logs and starting loggers from workers.
        -:  959: *************************/
        -:  960:
        -:  961:/* Global logger thread start/init */
      121:  962:void logger_init(void) {
        -:  963:    /* TODO: auto destructor when threads exit */
        -:  964:    /* TODO: error handling */
        -:  965:
        -:  966:    /* init stack for iterating loggers */
      121:  967:    logger_stack_head = 0;
      121:  968:    logger_stack_tail = 0;
      121:  969:    pthread_key_create(&logger_key, NULL);
        -:  970:
      121:  971:    if (start_logger_thread() != 0) {
    #####:  972:        abort();
        -:  973:    }
        -:  974:
        -:  975:    /* This is what adding a STDERR watcher looks like. should replace old
        -:  976:     * "verbose" settings. */
        -:  977:    //logger_add_watcher(NULL, 0);
      121:  978:    return;
        -:  979:}
        -:  980:
        2:  981:void logger_stop(void) {
        2:  982:    stop_logger_thread();
        2:  983:}
        -:  984:
        -:  985:/* called *from* the thread using a logger.
        -:  986: * initializes the per-thread bipbuf, links it into the list of loggers
        -:  987: */
      644:  988:logger *logger_create(void) {
      644:  989:    L_DEBUG("LOGGER: Creating and linking new logger instance\n");
      644:  990:    logger *l = calloc(1, sizeof(logger));
      644:  991:    if (l == NULL) {
        -:  992:        return NULL;
        -:  993:    }
        -:  994:
      644:  995:    l->buf = bipbuf_new(settings.logger_buf_size);
      644:  996:    if (l->buf == NULL) {
    #####:  997:        free(l);
    #####:  998:        return NULL;
        -:  999:    }
        -: 1000:
      644: 1001:    l->entry_map = default_entries;
        -: 1002:
      644: 1003:    pthread_mutex_init(&l->mutex, NULL);
      644: 1004:    pthread_setspecific(logger_key, l);
        -: 1005:
        -: 1006:    /* add to list of loggers */
      644: 1007:    logger_link_q(l);
      644: 1008:    return l;
        -: 1009:}
        -: 1010:
        -: 1011:/* Public function for logging an entry.
        -: 1012: * Tries to encapsulate as much of the formatting as possible to simplify the
        -: 1013: * caller's code.
        -: 1014: */
    88033: 1015:enum logger_ret_type logger_log(logger *l, const enum log_entry_type event, const void *entry, ...) {
    88033: 1016:    bipbuf_t *buf = l->buf;
    88033: 1017:    bool nospace = false;
    88033: 1018:    va_list ap;
    88033: 1019:    logentry *e;
        -: 1020:
    88033: 1021:    const entry_details *d = &l->entry_map[event];
    88033: 1022:    int reqlen = d->reqlen;
        -: 1023:
    88033: 1024:    pthread_mutex_lock(&l->mutex);
        -: 1025:    /* Request a maximum length of data to write to */
    88033: 1026:    e = (logentry *) bipbuf_request(buf, (sizeof(logentry) + reqlen));
    88033: 1027:    if (e == NULL) {
     6916: 1028:        l->dropped++;
     6916: 1029:        pthread_mutex_unlock(&l->mutex);
     6916: 1030:        return LOGGER_RET_NOSPACE;
        -: 1031:    }
    81117: 1032:    e->event = event;
    81117: 1033:    e->pad = 0;
    81117: 1034:    e->gid = logger_get_gid();
        -: 1035:    /* TODO: Could pass this down as an argument now that we're using
        -: 1036:     * LOGGER_LOG() macro.
        -: 1037:     */
    81117: 1038:    e->eflags = d->eflags;
        -: 1039:    /* Noting time isn't optional. A feature may be added to avoid rendering
        -: 1040:     * time and/or gid to a logger.
        -: 1041:     */
    81117: 1042:    gettimeofday(&e->tv, NULL);
        -: 1043:
    81117: 1044:    va_start(ap, entry);
    81117: 1045:    d->log_cb(e, d, entry, ap);
    81117: 1046:    va_end(ap);
        -: 1047:
        -: 1048:#ifdef NEED_ALIGN
        -: 1049:    /* Need to ensure *next* request is aligned. */
        -: 1050:    if (sizeof(logentry) + e->size % 8 != 0) {
        -: 1051:        e->pad = 8 - (sizeof(logentry) + e->size % 8);
        -: 1052:    }
        -: 1053:#endif
        -: 1054:
        -: 1055:    /* Push pointer forward by the actual amount required */
    81117: 1056:    if (bipbuf_push(buf, (sizeof(logentry) + e->size + e->pad)) == 0) {
    #####: 1057:        fprintf(stderr, "LOGGER: Failed to bipbuf push a text entry\n");
    #####: 1058:        pthread_mutex_unlock(&l->mutex);
    #####: 1059:        return LOGGER_RET_ERR;
        -: 1060:    }
    81117: 1061:    l->written++;
        -: 1062:    L_DEBUG("LOGGER: Requested %d bytes, wrote %lu bytes\n", reqlen,
    81117: 1063:            (sizeof(logentry) + e->size));
        -: 1064:
    81117: 1065:    pthread_mutex_unlock(&l->mutex);
        -: 1066:
    81117: 1067:    if (nospace) {
        -: 1068:        return LOGGER_RET_NOSPACE;
        -: 1069:    } else {
    81117: 1070:        return LOGGER_RET_OK;
        -: 1071:    }
        -: 1072:}
        -: 1073:
        -: 1074:/* Passes a client connection socket from a primary worker thread to the
        -: 1075: * logger thread. Caller *must* event_del() the client before handing it over.
        -: 1076: * Presently there's no way to hand the client back to the worker thread.
        -: 1077: */
       11: 1078:enum logger_add_watcher_ret logger_add_watcher(void *c, const int sfd, uint16_t f) {
       11: 1079:    int x;
       11: 1080:    logger_watcher *w = NULL;
       11: 1081:    pthread_mutex_lock(&logger_stack_lock);
       11: 1082:    if (watcher_count >= WATCHER_LIMIT) {
    #####: 1083:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1084:        return LOGGER_ADD_WATCHER_TOO_MANY;
        -: 1085:    }
        -: 1086:
       20: 1087:    for (x = 0; x < WATCHER_LIMIT-1; x++) {
       20: 1088:        if (watchers[x] == NULL)
        -: 1089:            break;
        -: 1090:    }
        -: 1091:
       11: 1092:    w = calloc(1, sizeof(logger_watcher));
       11: 1093:    if (w == NULL) {
    #####: 1094:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1095:        return LOGGER_ADD_WATCHER_FAILED;
        -: 1096:    }
       11: 1097:    w->c = c;
       11: 1098:    w->sfd = sfd;
       11: 1099:    if (sfd == 0 && c == NULL) {
    #####: 1100:        w->t = LOGGER_WATCHER_STDERR;
        -: 1101:    } else {
       11: 1102:        w->t = LOGGER_WATCHER_CLIENT;
        -: 1103:    }
       11: 1104:    w->id = x;
       11: 1105:    w->eflags = f;
       11: 1106:    w->min_gid = logger_get_gid();
       11: 1107:    w->buf = bipbuf_new(settings.logger_watcher_buf_size);
       11: 1108:    if (w->buf == NULL) {
    #####: 1109:        free(w);
    #####: 1110:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1111:        return LOGGER_ADD_WATCHER_FAILED;
        -: 1112:    }
       11: 1113:    bipbuf_offer(w->buf, (unsigned char *) "OK\r\n", 4);
        -: 1114:
       11: 1115:    watchers[x] = w;
       11: 1116:    watcher_count++;
        -: 1117:    /* Update what flags the global logs will watch */
       11: 1118:    logger_set_flags();
       11: 1119:    pthread_cond_signal(&logger_stack_cond);
        -: 1120:
       11: 1121:    pthread_mutex_unlock(&logger_stack_lock);
       11: 1122:    return LOGGER_ADD_WATCHER_OK;
        -: 1123:}
