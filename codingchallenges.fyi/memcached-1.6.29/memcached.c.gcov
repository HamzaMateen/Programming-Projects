        -:    0:Source:memcached.c
        -:    0:Graph:memcached.gcno
        -:    0:Data:memcached.gcda
        -:    0:Runs:442
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: *  memcached - memory caching daemon
        -:    4: *
        -:    5: *       https://www.memcached.org/
        -:    6: *
        -:    7: *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.
        -:    8: *
        -:    9: *  Use and distribution licensed under the BSD license.  See
        -:   10: *  the LICENSE file for full text.
        -:   11: *
        -:   12: *  Authors:
        -:   13: *      Anatoly Vorobey <mellon@pobox.com>
        -:   14: *      Brad Fitzpatrick <brad@danga.com>
        -:   15: */
        -:   16:#include "memcached.h"
        -:   17:#include "storage.h"
        -:   18:#include "authfile.h"
        -:   19:#include "restart.h"
        -:   20:#include <sys/stat.h>
        -:   21:#include <sys/socket.h>
        -:   22:#include <sys/un.h>
        -:   23:#include <signal.h>
        -:   24:#include <sys/param.h>
        -:   25:#include <sys/resource.h>
        -:   26:#include <sys/uio.h>
        -:   27:#include <ctype.h>
        -:   28:#include <stdarg.h>
        -:   29:
        -:   30:/* some POSIX systems need the following definition
        -:   31: * to get mlockall flags out of sys/mman.h.  */
        -:   32:#ifndef _P1003_1B_VISIBLE
        -:   33:#define _P1003_1B_VISIBLE
        -:   34:#endif
        -:   35:#include <pwd.h>
        -:   36:#include <sys/mman.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <netinet/tcp.h>
        -:   39:#include <arpa/inet.h>
        -:   40:#include <errno.h>
        -:   41:#include <stdlib.h>
        -:   42:#include <stdio.h>
        -:   43:#include <string.h>
        -:   44:#include <time.h>
        -:   45:#include <assert.h>
        -:   46:#include <sysexits.h>
        -:   47:#include <stddef.h>
        -:   48:
        -:   49:#ifdef HAVE_GETOPT_LONG
        -:   50:#include <getopt.h>
        -:   51:#endif
        -:   52:
        -:   53:#ifdef TLS
        -:   54:#include "tls.h"
        -:   55:#endif
        -:   56:
        -:   57:#include "proto_text.h"
        -:   58:#include "proto_bin.h"
        -:   59:#include "proto_proxy.h"
        -:   60:
        -:   61:#if defined(__FreeBSD__)
        -:   62:#include <sys/sysctl.h>
        -:   63:#endif
        -:   64:
        -:   65:/*
        -:   66: * forward declarations
        -:   67: */
        -:   68:static void drive_machine(conn *c);
        -:   69:static int new_socket(struct addrinfo *ai);
        -:   70:static ssize_t tcp_read(conn *arg, void *buf, size_t count);
        -:   71:static ssize_t tcp_sendmsg(conn *arg, struct msghdr *msg, int flags);
        -:   72:static ssize_t tcp_write(conn *arg, void *buf, size_t count);
        -:   73:
        -:   74:enum try_read_result {
        -:   75:    READ_DATA_RECEIVED,
        -:   76:    READ_NO_DATA_RECEIVED,
        -:   77:    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */
        -:   78:    READ_MEMORY_ERROR      /** failed to allocate more memory */
        -:   79:};
        -:   80:
        -:   81:static int try_read_command_negotiate(conn *c);
        -:   82:static int try_read_command_udp(conn *c);
        -:   83:
        -:   84:static enum try_read_result try_read_network(conn *c);
        -:   85:static enum try_read_result try_read_udp(conn *c);
        -:   86:
        -:   87:static int start_conn_timeout_thread(void);
        -:   88:
        -:   89:/* stats */
        -:   90:static void stats_init(void);
        -:   91:static void conn_to_str(const conn *c, char *addr, char *svr_addr);
        -:   92:
        -:   93:/* defaults */
        -:   94:static void settings_init(void);
        -:   95:
        -:   96:/* event handling, network IO */
        -:   97:static void event_handler(const evutil_socket_t fd, const short which, void *arg);
        -:   98:static void conn_close(conn *c);
        -:   99:static void conn_init(void);
        -:  100:static bool update_event(conn *c, const int new_flags);
        -:  101:static void complete_nread(conn *c);
        -:  102:
        -:  103:static void conn_free(conn *c);
        -:  104:
        -:  105:/** exported globals **/
        -:  106:struct stats stats;
        -:  107:struct stats_state stats_state;
        -:  108:struct settings settings;
        -:  109:time_t process_started;     /* when the process was started */
        -:  110:conn **conns;
        -:  111:
        -:  112:struct slab_rebalance slab_rebal;
        -:  113:volatile int slab_rebalance_signal;
        -:  114:#ifdef EXTSTORE
        -:  115:/* hoping this is temporary; I'd prefer to cut globals, but will complete this
        -:  116: * battle another day.
        -:  117: */
        -:  118:void *ext_storage = NULL;
        -:  119:#endif
        -:  120:/** file scope variables **/
        -:  121:static conn *listen_conn = NULL;
        -:  122:static int max_fds;
        -:  123:static struct event_base *main_base;
        -:  124:
        -:  125:enum transmit_result {
        -:  126:    TRANSMIT_COMPLETE,   /** All done writing. */
        -:  127:    TRANSMIT_INCOMPLETE, /** More data remaining to write. */
        -:  128:    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */
        -:  129:    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */
        -:  130:};
        -:  131:
        -:  132:/* Default methods to read from/ write to a socket */
   624665:  133:ssize_t tcp_read(conn *c, void *buf, size_t count) {
  624665*:  134:    assert (c != NULL);
   624665:  135:    return read(c->sfd, buf, count);
        -:  136:}
        -:  137:
   419693:  138:ssize_t tcp_sendmsg(conn *c, struct msghdr *msg, int flags) {
  419693*:  139:    assert (c != NULL);
   419693:  140:    return sendmsg(c->sfd, msg, flags);
        -:  141:}
        -:  142:
     4044:  143:ssize_t tcp_write(conn *c, void *buf, size_t count) {
    4044*:  144:    assert (c != NULL);
     4044:  145:    return write(c->sfd, buf, count);
        -:  146:}
        -:  147:
        -:  148:static enum transmit_result transmit(conn *c);
        -:  149:
        -:  150:/* This reduces the latency without adding lots of extra wiring to be able to
        -:  151: * notify the listener thread of when to listen again.
        -:  152: * Also, the clock timer could be broken out into its own thread and we
        -:  153: * can block the listener via a condition.
        -:  154: */
        -:  155:static volatile bool allow_new_conns = true;
        -:  156:static int stop_main_loop = NOT_STOP;
        -:  157:static struct event maxconnsevent;
    #####:  158:static void maxconns_handler(const evutil_socket_t fd, const short which, void *arg) {
    #####:  159:    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};
        -:  160:
    #####:  161:    if (fd == -42 || allow_new_conns == false) {
        -:  162:        /* reschedule in 10ms if we need to keep polling */
    #####:  163:        evtimer_set(&maxconnsevent, maxconns_handler, 0);
    #####:  164:        event_base_set(main_base, &maxconnsevent);
    #####:  165:        evtimer_add(&maxconnsevent, &t);
        -:  166:    } else {
    #####:  167:        evtimer_del(&maxconnsevent);
    #####:  168:        accept_new_conns(true);
        -:  169:    }
    #####:  170:}
        -:  171:
        -:  172:/*
        -:  173: * given time value that's either unix time or delta from current unix time, return
        -:  174: * unix time. Use the fact that delta can't exceed one month (and real time value can't
        -:  175: * be that low).
        -:  176: */
   358117:  177:rel_time_t realtime(const time_t exptime) {
        -:  178:    /* no. of seconds in 30 days - largest possible delta exptime */
        -:  179:
   358117:  180:    if (exptime == 0) return 0; /* 0 means never expire */
        -:  181:
     1659:  182:    if (exptime > REALTIME_MAXDELTA) {
        -:  183:        /* if item expiration is at/before the server started, give it an
        -:  184:           expiration time of 1 second after the server started.
        -:  185:           (because 0 means don't expire).  without this, we'd
        -:  186:           underflow and wrap around to some large value way in the
        -:  187:           future, effectively making items expiring in the past
        -:  188:           really expiring never */
       13:  189:        if (exptime <= process_started)
        -:  190:            return (rel_time_t)1;
        8:  191:        return (rel_time_t)(exptime - process_started);
        -:  192:    } else {
     1646:  193:        return (rel_time_t)(exptime + current_time);
        -:  194:    }
        -:  195:}
        -:  196:
      121:  197:static void stats_init(void) {
      121:  198:    memset(&stats, 0, sizeof(struct stats));
      121:  199:    memset(&stats_state, 0, sizeof(struct stats_state));
      121:  200:    stats_state.accepting_conns = true; /* assuming we start in this state. */
        -:  201:
        -:  202:    /* make the time we started always be 2 seconds before we really
        -:  203:       did, so time(0) - time.started is never zero.  if so, things
        -:  204:       like 'settings.oldest_live' which act as booleans as well as
        -:  205:       values are now false in boolean context... */
      121:  206:    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;
      121:  207:    stats_prefix_init(settings.prefix_delimiter);
      121:  208:}
        -:  209:
        3:  210:void stats_reset(void) {
        3:  211:    STATS_LOCK();
        3:  212:    memset(&stats, 0, sizeof(struct stats));
        3:  213:    stats_prefix_clear();
        3:  214:    STATS_UNLOCK();
        3:  215:    threadlocal_stats_reset();
        3:  216:    item_stats_reset();
        3:  217:}
        -:  218:
      441:  219:static void settings_init(void) {
      441:  220:    settings.use_cas = true;
      441:  221:    settings.access = 0700;
      441:  222:    settings.port = 11211;
      441:  223:    settings.udpport = 0;
        -:  224:#ifdef TLS
        -:  225:    settings.ssl_enabled = false;
        -:  226:    settings.ssl_ctx = NULL;
        -:  227:    settings.ssl_chain_cert = NULL;
        -:  228:    settings.ssl_key = NULL;
        -:  229:    settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -:  230:    settings.ssl_keyformat = SSL_FILETYPE_PEM;
        -:  231:    settings.ssl_ciphers = NULL;
        -:  232:    settings.ssl_ca_cert = NULL;
        -:  233:    settings.ssl_last_cert_refresh_time = current_time;
        -:  234:    settings.ssl_wbuf_size = 16 * 1024; // default is 16KB (SSL max frame size is 17KB)
        -:  235:    settings.ssl_session_cache = false;
        -:  236:    settings.ssl_kernel_tls = false;
        -:  237:    settings.ssl_min_version = TLS1_2_VERSION;
        -:  238:#endif
        -:  239:    /* By default this string should be NULL for getaddrinfo() */
      441:  240:    settings.inter = NULL;
      441:  241:    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */
      441:  242:    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */
      441:  243:    settings.verbose = 0;
      441:  244:    settings.oldest_live = 0;
      441:  245:    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */
      441:  246:    settings.socketpath = NULL;       /* by default, not using a unix socket */
      441:  247:    settings.auth_file = NULL;        /* by default, not using ASCII authentication tokens */
      441:  248:    settings.factor = 1.25;
      441:  249:    settings.chunk_size = 48;         /* space for a modest key and value */
      441:  250:    settings.num_threads = 4;         /* N workers */
      441:  251:    settings.num_threads_per_udp = 0;
      441:  252:    settings.prefix_delimiter = ':';
      441:  253:    settings.detail_enabled = 0;
      441:  254:    settings.reqs_per_event = 20;
      441:  255:    settings.backlog = 1024;
      441:  256:    settings.binding_protocol = negotiating_prot;
      441:  257:    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */
      441:  258:    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */
      441:  259:    settings.slab_chunk_size_max = settings.slab_page_size / 2;
      441:  260:    settings.sasl = false;
      441:  261:    settings.maxconns_fast = true;
      441:  262:    settings.lru_crawler = false;
      441:  263:    settings.lru_crawler_sleep = 100;
      441:  264:    settings.lru_crawler_tocrawl = 0;
      441:  265:    settings.lru_maintainer_thread = false;
      441:  266:    settings.lru_segmented = true;
      441:  267:    settings.hot_lru_pct = 20;
      441:  268:    settings.warm_lru_pct = 40;
      441:  269:    settings.hot_max_factor = 0.2;
      441:  270:    settings.warm_max_factor = 2.0;
      441:  271:    settings.temp_lru = false;
      441:  272:    settings.temporary_ttl = 61;
      441:  273:    settings.idle_timeout = 0; /* disabled */
      441:  274:    settings.hashpower_init = 0;
      441:  275:    settings.slab_reassign = true;
      441:  276:    settings.slab_automove = 1;
      441:  277:    settings.slab_automove_ratio = 0.8;
      441:  278:    settings.slab_automove_window = 30;
      441:  279:    settings.shutdown_command = false;
      441:  280:    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;
      441:  281:    settings.flush_enabled = true;
      441:  282:    settings.dump_enabled = true;
      441:  283:    settings.crawls_persleep = 1000;
      441:  284:    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;
      441:  285:    settings.logger_buf_size = LOGGER_BUF_SIZE;
      441:  286:    settings.drop_privileges = false;
      441:  287:    settings.watch_enabled = true;
      441:  288:    settings.read_buf_mem_limit = 0;
        -:  289:#ifdef MEMCACHED_DEBUG
      441:  290:    settings.relaxed_privileges = false;
        -:  291:#endif
      441:  292:    settings.num_napi_ids = 0;
      441:  293:    settings.memory_file = NULL;
        -:  294:#ifdef SOCK_COOKIE_ID
      441:  295:    settings.sock_cookie_id = 0;
        -:  296:#endif
      441:  297:}
        -:  298:
        -:  299:extern pthread_mutex_t conn_lock;
        -:  300:
        -:  301:/* Connection timeout thread bits */
        -:  302:static pthread_t conn_timeout_tid;
        -:  303:static int do_run_conn_timeout_thread;
        -:  304:static pthread_cond_t conn_timeout_cond = PTHREAD_COND_INITIALIZER;
        -:  305:static pthread_mutex_t conn_timeout_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  306:
        -:  307:#define CONNS_PER_SLICE 100
        1:  308:static void *conn_timeout_thread(void *arg) {
        1:  309:    int i;
        1:  310:    conn *c;
        1:  311:    rel_time_t oldest_last_cmd;
        1:  312:    int sleep_time;
        1:  313:    int sleep_slice = max_fds / CONNS_PER_SLICE;
        1:  314:    if (sleep_slice == 0)
    #####:  315:        sleep_slice = CONNS_PER_SLICE;
        -:  316:
        1:  317:    useconds_t timeslice = 1000000 / sleep_slice;
        -:  318:
        1:  319:    mutex_lock(&conn_timeout_lock);
        4:  320:    while(do_run_conn_timeout_thread) {
        4:  321:        if (settings.verbose > 2)
    #####:  322:            fprintf(stderr, "idle timeout thread at top of connection list\n");
        -:  323:
        4:  324:        oldest_last_cmd = current_time;
        -:  325:
     4100:  326:        for (i = 0; i < max_fds; i++) {
     4096:  327:            if ((i % CONNS_PER_SLICE) == 0) {
       44:  328:                if (settings.verbose > 2)
    #####:  329:                    fprintf(stderr, "idle timeout thread sleeping for %ulus\n",
        -:  330:                        (unsigned int)timeslice);
       44:  331:                usleep(timeslice);
        -:  332:            }
        -:  333:
     4096:  334:            if (!conns[i])
     4073:  335:                continue;
        -:  336:
       23:  337:            c = conns[i];
        -:  338:
       23:  339:            if (!IS_TCP(c->transport))
       16:  340:                continue;
        -:  341:
        7:  342:            if (c->state != conn_new_cmd && c->state != conn_read)
        6:  343:                continue;
        -:  344:
        1:  345:            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  346:                timeout_conn(c);
        -:  347:            } else {
    #####:  348:                if (c->last_cmd_time < oldest_last_cmd)
     4096:  349:                    oldest_last_cmd = c->last_cmd_time;
        -:  350:            }
        -:  351:        }
        -:  352:
        -:  353:        /* This is the soonest we could have another connection time out */
        4:  354:        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;
        4:  355:        if (sleep_time <= 0)
        -:  356:            sleep_time = 1;
        -:  357:
        4:  358:        if (settings.verbose > 2)
    #####:  359:            fprintf(stderr,
        -:  360:                    "idle timeout thread finished pass, sleeping for %ds\n",
        -:  361:                    sleep_time);
        -:  362:
        4:  363:        struct timeval now;
        4:  364:        struct timespec to_sleep;
        4:  365:        gettimeofday(&now, NULL);
        4:  366:        to_sleep.tv_sec = now.tv_sec + sleep_time;
        4:  367:        to_sleep.tv_nsec = 0;
        -:  368:
        4:  369:        pthread_cond_timedwait(&conn_timeout_cond, &conn_timeout_lock, &to_sleep);
        -:  370:    }
        -:  371:
    #####:  372:    mutex_unlock(&conn_timeout_lock);
    #####:  373:    return NULL;
        -:  374:}
        -:  375:
        1:  376:static int start_conn_timeout_thread(void) {
        1:  377:    int ret;
        -:  378:
        1:  379:    if (settings.idle_timeout == 0)
        -:  380:        return -1;
        -:  381:
        1:  382:    do_run_conn_timeout_thread = 1;
        1:  383:    if ((ret = pthread_create(&conn_timeout_tid, NULL,
        -:  384:        conn_timeout_thread, NULL)) != 0) {
    #####:  385:        fprintf(stderr, "Can't create idle connection timeout thread: %s\n",
        -:  386:            strerror(ret));
    #####:  387:        return -1;
        -:  388:    }
        1:  389:    thread_setname(conn_timeout_tid, "mc-idletimeout");
        -:  390:
        1:  391:    return 0;
        -:  392:}
        -:  393:
        2:  394:int stop_conn_timeout_thread(void) {
        2:  395:    if (!do_run_conn_timeout_thread)
        -:  396:        return -1;
    #####:  397:    mutex_lock(&conn_timeout_lock);
    #####:  398:    do_run_conn_timeout_thread = 0;
    #####:  399:    pthread_cond_signal(&conn_timeout_cond);
    #####:  400:    mutex_unlock(&conn_timeout_lock);
    #####:  401:    pthread_join(conn_timeout_tid, NULL);
    #####:  402:    return 0;
        -:  403:}
        -:  404:
        -:  405:/*
        -:  406: * read buffer cache helper functions
        -:  407: */
   493209:  408:static void rbuf_release(conn *c) {
   493209:  409:    if (c->rbuf != NULL && c->rbytes == 0 && !IS_UDP(c->transport)) {
   487291:  410:        if (c->rbuf_malloced) {
        3:  411:            free(c->rbuf);
        3:  412:            c->rbuf_malloced = false;
        -:  413:        } else {
   487288:  414:            do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  415:        }
   487291:  416:        c->rsize = 0;
   487291:  417:        c->rbuf = NULL;
   487291:  418:        c->rcurr = NULL;
        -:  419:    }
   493209:  420:}
        -:  421:
   491019:  422:static bool rbuf_alloc(conn *c) {
   491019:  423:    if (c->rbuf == NULL) {
   487291:  424:        c->rbuf = do_cache_alloc(c->thread->rbuf_cache);
   487291:  425:        if (!c->rbuf) {
    #####:  426:            THR_STATS_LOCK(c->thread);
    #####:  427:            c->thread->stats.read_buf_oom++;
    #####:  428:            THR_STATS_UNLOCK(c->thread);
    #####:  429:            return false;
        -:  430:        }
   487291:  431:        c->rsize = READ_BUFFER_SIZE;
   487291:  432:        c->rcurr = c->rbuf;
        -:  433:    }
        -:  434:    return true;
        -:  435:}
        -:  436:
        -:  437:// Just for handling huge ASCII multigets.
        -:  438:// The previous system was essentially the same; realloc'ing until big enough,
        -:  439:// then realloc'ing back down after the request finished.
        3:  440:bool rbuf_switch_to_malloc(conn *c) {
        -:  441:    // Might as well start with x2 and work from there.
        3:  442:    size_t size = c->rsize * 2;
        3:  443:    char *tmp = malloc(size);
        3:  444:    if (!tmp)
        -:  445:        return false;
        -:  446:
        3:  447:    memcpy(tmp, c->rcurr, c->rbytes);
        3:  448:    do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  449:
        3:  450:    c->rcurr = c->rbuf = tmp;
        3:  451:    c->rsize = size;
        3:  452:    c->rbuf_malloced = true;
        3:  453:    return true;
        -:  454:}
        -:  455:
        -:  456:/*
        -:  457: * Initializes the connections array. We don't actually allocate connection
        -:  458: * structures until they're needed, so as to avoid wasting memory when the
        -:  459: * maximum connection count is much higher than the actual number of
        -:  460: * connections.
        -:  461: *
        -:  462: * This does end up wasting a few pointers' worth of memory for FDs that are
        -:  463: * used for things other than connections, but that's worth it in exchange for
        -:  464: * being able to directly index the conns array by FD.
        -:  465: */
      121:  466:static void conn_init(void) {
        -:  467:    /* We're unlikely to see an FD much higher than maxconns. */
      121:  468:    int next_fd = dup(1);
      121:  469:    if (next_fd < 0) {
    #####:  470:        perror("Failed to duplicate file descriptor\n");
    #####:  471:        exit(1);
        -:  472:    }
      121:  473:    int headroom = 10;      /* account for extra unexpected open FDs */
      121:  474:    struct rlimit rl;
        -:  475:
      121:  476:    max_fds = settings.maxconns + headroom + next_fd;
        -:  477:
        -:  478:    /* But if possible, get the actual highest FD we can possibly ever see. */
      121:  479:    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {
      121:  480:        max_fds = rl.rlim_max;
        -:  481:    } else {
    #####:  482:        fprintf(stderr, "Failed to query maximum file descriptor; "
        -:  483:                        "falling back to maxconns\n");
        -:  484:    }
        -:  485:
      121:  486:    close(next_fd);
        -:  487:
      121:  488:    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {
    #####:  489:        fprintf(stderr, "Failed to allocate connection structures\n");
        -:  490:        /* This is unrecoverable so bail out early. */
    #####:  491:        exit(1);
        -:  492:    }
      121:  493:}
        -:  494:
     336*:  495:static const char *prot_text(enum protocol prot) {
     336*:  496:    char *rv = "unknown";
     336*:  497:    switch(prot) {
       2*:  498:        case ascii_prot:
       2*:  499:            rv = "ascii";
       2*:  500:            break;
       1*:  501:        case binary_prot:
       1*:  502:            rv = "binary";
       1*:  503:            break;
     333*:  504:        case negotiating_prot:
     333*:  505:            rv = "auto-negotiate";
     333*:  506:            break;
        -:  507:#ifdef PROXY
        -:  508:        case proxy_prot:
        -:  509:            rv = "proxy";
        -:  510:            break;
        -:  511:#endif
        -:  512:    }
     336*:  513:    return rv;
        -:  514:}
        -:  515:
        1:  516:void conn_close_idle(conn *c) {
        1:  517:    if (settings.idle_timeout > 0 &&
        1:  518:        (current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  519:        if (c->state != conn_new_cmd && c->state != conn_read) {
    #####:  520:            if (settings.verbose > 1)
    #####:  521:                fprintf(stderr,
        -:  522:                    "fd %d wants to timeout, but isn't in read state", c->sfd);
    #####:  523:            return;
        -:  524:        }
        -:  525:
        1:  526:        if (settings.verbose > 1)
    #####:  527:            fprintf(stderr, "Closing idle fd %d\n", c->sfd);
        -:  528:
        1:  529:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  530:        c->thread->stats.idle_kicks++;
        1:  531:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  532:
        1:  533:        c->close_reason = IDLE_TIMEOUT_CLOSE;
        -:  534:
        1:  535:        conn_set_state(c, conn_closing);
        1:  536:        drive_machine(c);
        -:  537:    }
        -:  538:}
        -:  539:
       13:  540:static void _conn_event_readd(conn *c) {
       13:  541:    c->ev_flags = EV_READ | EV_PERSIST;
       13:  542:    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);
       13:  543:    event_base_set(c->thread->base, &c->event);
        -:  544:
        -:  545:    // TODO: call conn_cleanup/fail/etc
       13:  546:    if (event_add(&c->event, 0) == -1) {
    #####:  547:        perror("event_add");
        -:  548:    }
       13:  549:}
        -:  550:
        -:  551:/* bring conn back from a sidethread. could have had its event base moved. */
     1606:  552:void conn_worker_readd(conn *c) {
     1606:  553:    if (c->io_queues_submitted) { // TODO: ensure this is safe?
     1593:  554:        c->io_queues_submitted--;
        -:  555:        // If we're still waiting for other queues to return, don't re-add the
        -:  556:        // connection yet.
     1593:  557:        if (c->io_queues_submitted != 0) {
        -:  558:            return;
        -:  559:        }
        -:  560:    }
        -:  561:
     1606:  562:    switch (c->state) {
       11:  563:        case conn_closing:
        -:  564:            // might be fixable: only need to do this because we can't do
        -:  565:            // event_del() without the event being armed.
       11:  566:            _conn_event_readd(c);
       11:  567:            drive_machine(c);
       11:  568:            break;
    #####:  569:        case conn_io_pending:
        -:  570:            // The event listener was removed as more data showed up while
        -:  571:            // waiting for the async response.
    #####:  572:            _conn_event_readd(c);
        -:  573:            // Explicit fall-through.
     1593:  574:        case conn_io_queue:
     1593:  575:            conn_set_state(c, conn_io_resume);
        -:  576:            // machine will know how to return based on secondary state.
     1593:  577:            drive_machine(c);
     1593:  578:            break;
        2:  579:        default:
        2:  580:            _conn_event_readd(c);
        2:  581:            conn_set_state(c, conn_new_cmd);
        -:  582:    }
        -:  583:
        -:  584:}
        -:  585:
      556:  586:void thread_io_queue_add(LIBEVENT_THREAD *t, int type, void *ctx, io_queue_stack_cb cb) {
      556:  587:    io_queue_cb_t *q = t->io_queues;
      604:  588:    while (q->type != IO_QUEUE_NONE) {
       48:  589:        q++;
        -:  590:    }
      556:  591:    q->type = type;
      556:  592:    q->ctx = ctx;
      556:  593:    q->submit_cb = cb;
      556:  594:    return;
        -:  595:}
        -:  596:
     2206:  597:void conn_io_queue_setup(conn *c) {
     2206:  598:    io_queue_cb_t *qcb = c->thread->io_queues;
     2206:  599:    io_queue_t *q = c->io_queues;
     3213:  600:    while (qcb->type != IO_QUEUE_NONE) {
     1007:  601:        q->type = qcb->type;
     1007:  602:        q->ctx = qcb->ctx;
     1007:  603:        q->stack_ctx = NULL;
     1007:  604:        q->count = 0;
     1007:  605:        qcb++;
     1007:  606:        q++;
        -:  607:    }
     2206:  608:}
        -:  609:
        -:  610:// To be called from conn_release_items to ensure the stack ptrs are reset.
       28:  611:static void conn_io_queue_reset(conn *c) {
       30:  612:    for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
       2*:  613:        assert(q->count == 0);
        2:  614:        q->stack_ctx = NULL;
        -:  615:    }
       28:  616:}
        -:  617:
    1593*:  618:io_queue_cb_t *thread_io_queue_get(LIBEVENT_THREAD *t, int type) {
    1593*:  619:    io_queue_cb_t *q = t->io_queues;
    1593*:  620:    while (q->type != IO_QUEUE_NONE) {
    1593*:  621:        if (q->type == type) {
    #####:  622:            return q;
        -:  623:        }
    #####:  624:        q++;
        -:  625:    }
        -:  626:    return NULL;
        -:  627:}
        -:  628:
     3197:  629:io_queue_t *conn_io_queue_get(conn *c, int type) {
     3197:  630:    io_queue_t *q = c->io_queues;
     3197:  631:    while (q->type != IO_QUEUE_NONE) {
     3197:  632:        if (q->type == type) {
     3197:  633:            return q;
        -:  634:        }
    #####:  635:        q++;
        -:  636:    }
        -:  637:    return NULL;
        -:  638:}
        -:  639:
        -:  640:// called to return a single IO object to the original worker thread.
     1595:  641:void conn_io_queue_return(io_pending_t *io) {
     1595:  642:    io->return_cb(io);
     1595:  643:}
        -:  644:
     2337:  645:conn *conn_new(const int sfd, enum conn_states init_state,
        -:  646:                const int event_flags,
        -:  647:                const int read_buffer_size, enum network_transport transport,
        -:  648:                struct event_base *base, void *ssl, uint64_t conntag,
        -:  649:                enum protocol bproto) {
     2337:  650:    conn *c;
        -:  651:
    2337*:  652:    assert(sfd >= 0 && sfd < max_fds);
     2337:  653:    c = conns[sfd];
        -:  654:
     2337:  655:    if (NULL == c) {
     2324:  656:        if (!(c = (conn *)calloc(1, sizeof(conn)))) {
    #####:  657:            STATS_LOCK();
    #####:  658:            stats.malloc_fails++;
    #####:  659:            STATS_UNLOCK();
    #####:  660:            fprintf(stderr, "Failed to allocate connection object\n");
    #####:  661:            return NULL;
        -:  662:        }
     2324:  663:        MEMCACHED_CONN_CREATE(c);
     2324:  664:        c->read = NULL;
     2324:  665:        c->sendmsg = NULL;
     2324:  666:        c->write = NULL;
     2324:  667:        c->rbuf = NULL;
        -:  668:
     2324:  669:        c->rsize = read_buffer_size;
        -:  670:
        -:  671:        // UDP connections use a persistent static buffer.
     2324:  672:        if (c->rsize) {
      203:  673:            c->rbuf = (char *)malloc((size_t)c->rsize);
        -:  674:        }
        -:  675:
     2324:  676:        if (c->rsize && c->rbuf == NULL) {
    #####:  677:            conn_free(c);
    #####:  678:            STATS_LOCK();
    #####:  679:            stats.malloc_fails++;
    #####:  680:            STATS_UNLOCK();
    #####:  681:            fprintf(stderr, "Failed to allocate buffers for connection\n");
    #####:  682:            return NULL;
        -:  683:        }
        -:  684:
        -:  685:
     2324:  686:        STATS_LOCK();
     2324:  687:        stats_state.conn_structs++;
     2324:  688:        STATS_UNLOCK();
        -:  689:
     2324:  690:        c->sfd = sfd;
     2324:  691:        conns[sfd] = c;
        -:  692:    }
        -:  693:
     2337:  694:    c->transport = transport;
     2337:  695:    c->protocol = bproto;
     2337:  696:    c->tag = conntag;
        -:  697:
        -:  698:    /* unix socket mode doesn't need this, so zeroed out.  but why
        -:  699:     * is this done for every command?  presumably for UDP
        -:  700:     * mode.  */
     2337:  701:    if (!settings.socketpath) {
      124:  702:        c->request_addr_size = sizeof(c->request_addr);
        -:  703:    } else {
     2213:  704:        c->request_addr_size = 0;
        -:  705:    }
        -:  706:
     2337:  707:    if (transport == tcp_transport && init_state == conn_new_cmd) {
       20:  708:        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,
        -:  709:                        &c->request_addr_size)) {
    #####:  710:            perror("getpeername");
    #####:  711:            memset(&c->request_addr, 0, sizeof(c->request_addr));
        -:  712:        }
        -:  713:    }
        -:  714:
     2337:  715:    if (init_state == conn_new_cmd) {
     2134:  716:        LOGGER_LOG(NULL, LOG_CONNEVENTS, LOGGER_CONNECTION_NEW, NULL,
        -:  717:                &c->request_addr, c->request_addr_size, c->transport, 0, sfd);
        -:  718:    }
        -:  719:
     2337:  720:    if (settings.verbose > 1) {
        6:  721:        if (init_state == conn_listening) {
        6:  722:            fprintf(stderr, "<%d server listening (%s)\n", sfd,
        -:  723:                prot_text(c->protocol));
        3:  724:        } else if (IS_UDP(transport)) {
    #####:  725:            fprintf(stderr, "<%d server listening (udp)\n", sfd);
        3:  726:        } else if (c->protocol == negotiating_prot) {
        1:  727:            fprintf(stderr, "<%d new auto-negotiating client connection\n",
        -:  728:                    sfd);
        2:  729:        } else if (c->protocol == ascii_prot) {
        1:  730:            fprintf(stderr, "<%d new ascii client connection.\n", sfd);
        1:  731:        } else if (c->protocol == binary_prot) {
        1:  732:            fprintf(stderr, "<%d new binary client connection.\n", sfd);
        -:  733:#ifdef PROXY
        -:  734:        } else if (c->protocol == proxy_prot) {
        -:  735:            fprintf(stderr, "<%d new proxy client connection.\n", sfd);
        -:  736:#endif
        -:  737:        } else {
    #####:  738:            fprintf(stderr, "<%d new unknown (%d) client connection\n",
        -:  739:                sfd, c->protocol);
    #####:  740:            assert(false);
        -:  741:        }
        -:  742:    }
        -:  743:
        -:  744:#ifdef TLS
        -:  745:    c->ssl = NULL;
        -:  746:    c->ssl_wbuf = NULL;
        -:  747:    c->ssl_enabled = false;
        -:  748:#endif
     2337:  749:    c->state = init_state;
     2337:  750:    c->rlbytes = 0;
     2337:  751:    c->cmd = -1;
     2337:  752:    c->rbytes = 0;
     2337:  753:    c->rcurr = c->rbuf;
     2337:  754:    c->ritem = 0;
     2337:  755:    c->rbuf_malloced = false;
     2337:  756:    c->item_malloced = false;
     2337:  757:    c->sasl_started = false;
     2337:  758:    c->set_stale = false;
     2337:  759:    c->mset_res = false;
     2337:  760:    c->close_after_write = false;
     2337:  761:    c->last_cmd_time = current_time; /* initialize for idle kicker */
        -:  762:    // wipe all queues.
     2337:  763:    memset(c->io_queues, 0, sizeof(c->io_queues));
     2337:  764:    c->io_queues_submitted = 0;
        -:  765:
     2337:  766:    c->item = 0;
        -:  767:
     2337:  768:    c->noreply = false;
        -:  769:
        -:  770:#ifdef TLS
        -:  771:    if (ssl) {
        -:  772:        c->ssl = (SSL*)ssl;
        -:  773:        c->read = ssl_read;
        -:  774:        c->sendmsg = ssl_sendmsg;
        -:  775:        c->write = ssl_write;
        -:  776:        c->ssl_enabled = true;
        -:  777:        SSL_set_info_callback(c->ssl, ssl_callback);
        -:  778:    } else
        -:  779:#else
        -:  780:    // This must be NULL if TLS is not enabled.
    2337*:  781:    assert(ssl == NULL);
        -:  782:#endif
        -:  783:    {
     2337:  784:        c->read = tcp_read;
     2337:  785:        c->sendmsg = tcp_sendmsg;
     2337:  786:        c->write = tcp_write;
        -:  787:    }
        -:  788:
     2337:  789:    if (IS_UDP(transport)) {
       72:  790:        c->try_read_command = try_read_command_udp;
        -:  791:    } else {
     2265:  792:        switch (c->protocol) {
        7:  793:            case ascii_prot:
        7:  794:                if (settings.auth_file == NULL) {
        4:  795:                    c->authenticated = true;
        4:  796:                    c->try_read_command = try_read_command_ascii;
        -:  797:                } else {
        3:  798:                    c->authenticated = false;
        3:  799:                    c->try_read_command = try_read_command_asciiauth;
        -:  800:                }
        -:  801:                break;
        6:  802:            case binary_prot:
        -:  803:                // binprot handles its own authentication via SASL parsing.
        6:  804:                c->authenticated = false;
        6:  805:                c->try_read_command = try_read_command_binary;
        6:  806:                break;
     2252:  807:            case negotiating_prot:
     2252:  808:                c->try_read_command = try_read_command_negotiate;
     2252:  809:                break;
        -:  810:#ifdef PROXY
        -:  811:            case proxy_prot:
        -:  812:                c->try_read_command = try_read_command_proxy;
        -:  813:                break;
        -:  814:#endif
        -:  815:        }
        -:  816:    }
        -:  817:
     2337:  818:    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);
     2337:  819:    event_base_set(base, &c->event);
     2337:  820:    c->ev_flags = event_flags;
        -:  821:
     2337:  822:    if (event_add(&c->event, 0) == -1) {
    #####:  823:        perror("event_add");
    #####:  824:        return NULL;
        -:  825:    }
        -:  826:
     2337:  827:    STATS_LOCK();
     2337:  828:    stats_state.curr_conns++;
     2337:  829:    stats.total_conns++;
     2337:  830:    STATS_UNLOCK();
        -:  831:
     2337:  832:    MEMCACHED_CONN_ALLOCATE(c->sfd);
        -:  833:
     2337:  834:    return c;
        -:  835:}
        -:  836:
   499276:  837:void conn_release_items(conn *c) {
  499276*:  838:    assert(c != NULL);
        -:  839:
   499276:  840:    if (c->item) {
        2:  841:        if (c->item_malloced) {
    #####:  842:            free(c->item);
    #####:  843:            c->item_malloced = false;
        -:  844:        } else {
        2:  845:            item_remove(c->item);
        -:  846:        }
        2:  847:        c->item = 0;
        -:  848:    }
        -:  849:
        -:  850:    // Cull any unsent responses.
   499276:  851:    if (c->resp_head) {
        -:  852:        mc_resp *resp = c->resp_head;
        -:  853:        // r_f() handles the chain maintenance.
      122:  854:        while (resp) {
        -:  855:            // temporary by default. hide behind a debug flag in the future:
        -:  856:            // double free detection. Transmit loops can drop out early, but
        -:  857:            // here we could infinite loop.
       94:  858:            if (resp->free) {
    #####:  859:                fprintf(stderr, "ERROR: double free detected during conn_release_items(): [%d] [%s]\n",
    #####:  860:                        c->sfd, c->protocol == binary_prot ? "binary" : "ascii");
        -:  861:                // Since this is a critical failure, just leak the memory.
        -:  862:                // If these errors are seen, an abort() can be used instead.
    #####:  863:                c->resp_head = NULL;
    #####:  864:                c->resp = NULL;
    #####:  865:                break;
        -:  866:            }
       94:  867:            resp = resp_finish(c, resp);
        -:  868:        }
       28:  869:        conn_io_queue_reset(c);
        -:  870:    }
   499276:  871:}
        -:  872:
     2135:  873:static void conn_cleanup(conn *c) {
    2135*:  874:    assert(c != NULL);
        -:  875:
     2135:  876:    conn_release_items(c);
        -:  877:#ifdef PROXY
        -:  878:    if (c->proxy_rctx) {
        -:  879:        proxy_cleanup_conn(c);
        -:  880:    }
        -:  881:#endif
     2135:  882:    if (c->sasl_conn) {
    #####:  883:        assert(settings.sasl);
    #####:  884:        sasl_dispose(&c->sasl_conn);
    #####:  885:        c->sasl_conn = NULL;
        -:  886:    }
        -:  887:
     2135:  888:    if (IS_UDP(c->transport)) {
    #####:  889:        conn_set_state(c, conn_read);
        -:  890:    }
     2135:  891:}
        -:  892:
        -:  893:/*
        -:  894: * Frees a connection.
        -:  895: */
    #####:  896:void conn_free(conn *c) {
    #####:  897:    if (c) {
    #####:  898:        assert(c != NULL);
    #####:  899:        assert(c->sfd >= 0 && c->sfd < max_fds);
        -:  900:
    #####:  901:        MEMCACHED_CONN_DESTROY(c);
    #####:  902:        conns[c->sfd] = NULL;
    #####:  903:        if (c->rbuf)
    #####:  904:            free(c->rbuf);
        -:  905:#ifdef TLS
        -:  906:        if (c->ssl_wbuf)
        -:  907:            c->ssl_wbuf = NULL;
        -:  908:#endif
        -:  909:
    #####:  910:        free(c);
        -:  911:    }
    #####:  912:}
        -:  913:
     2135:  914:static void conn_close(conn *c) {
    2135*:  915:    assert(c != NULL);
        -:  916:
     2135:  917:    if (c->thread) {
    2133*:  918:        LOGGER_LOG(c->thread->l, LOG_CONNEVENTS, LOGGER_CONNECTION_CLOSE, NULL,
        -:  919:                &c->request_addr, c->request_addr_size, c->transport,
        -:  920:                c->close_reason, c->sfd);
        -:  921:    }
        -:  922:
        -:  923:    /* delete the event, the socket and the conn */
     2135:  924:    event_del(&c->event);
        -:  925:
     2135:  926:    if (settings.verbose > 1)
        3:  927:        fprintf(stderr, "<%d connection closed.\n", c->sfd);
        -:  928:
     2135:  929:    conn_cleanup(c);
        -:  930:
        -:  931:    // force release of read buffer.
     2135:  932:    if (c->thread) {
     2133:  933:        c->rbytes = 0;
     2133:  934:        rbuf_release(c);
        -:  935:    }
        -:  936:
     2135:  937:    MEMCACHED_CONN_RELEASE(c->sfd);
     2135:  938:    conn_set_state(c, conn_closed);
        -:  939:#ifdef TLS
        -:  940:    if (c->ssl) {
        -:  941:        SSL_shutdown(c->ssl);
        -:  942:        SSL_free(c->ssl);
        -:  943:    }
        -:  944:#endif
     2135:  945:    close(c->sfd);
     2135:  946:    c->close_reason = 0;
     2135:  947:    pthread_mutex_lock(&conn_lock);
     2135:  948:    allow_new_conns = true;
     2135:  949:    pthread_mutex_unlock(&conn_lock);
        -:  950:
     2135:  951:    STATS_LOCK();
     2135:  952:    stats_state.curr_conns--;
     2135:  953:    STATS_UNLOCK();
        -:  954:
     2135:  955:    return;
        -:  956:}
        -:  957:
        -:  958:// Since some connections might be off on side threads and some are managed as
        -:  959:// listeners we need to walk through them all from a central point.
        -:  960:// Must be called with all worker threads hung or in the process of closing.
        2:  961:void conn_close_all(void) {
        2:  962:    int i;
     2050:  963:    for (i = 0; i < max_fds; i++) {
     2048:  964:        if (conns[i] && conns[i]->state != conn_closed) {
        3:  965:            conn_close(conns[i]);
        -:  966:        }
        -:  967:    }
        2:  968:}
        -:  969:
        -:  970:/**
        -:  971: * Convert a state name to a human readable form.
        -:  972: */
       16:  973:static const char *state_text(enum conn_states state) {
       16:  974:    const char* const statenames[] = { "conn_listening",
        -:  975:                                       "conn_new_cmd",
        -:  976:                                       "conn_waiting",
        -:  977:                                       "conn_read",
        -:  978:                                       "conn_parse_cmd",
        -:  979:                                       "conn_write",
        -:  980:                                       "conn_nread",
        -:  981:                                       "conn_swallow",
        -:  982:                                       "conn_closing",
        -:  983:                                       "conn_mwrite",
        -:  984:                                       "conn_closed",
        -:  985:                                       "conn_watch",
        -:  986:                                       "conn_io_queue",
        -:  987:                                       "conn_io_resume",
        -:  988:                                       "conn_io_pending" };
       16:  989:    return statenames[state];
        -:  990:}
        -:  991:
        -:  992:/*
        -:  993: * Sets a connection's current state in the state machine. Any special
        -:  994: * processing that needs to happen on certain state transitions can
        -:  995: * happen here.
        -:  996: */
  3499267:  997:void conn_set_state(conn *c, enum conn_states state) {
 3499267*:  998:    assert(c != NULL);
 3499267*:  999:    assert(state >= conn_listening && state < conn_max_state);
        -: 1000:
  3499267: 1001:    if (state != c->state) {
  3499266: 1002:        if (settings.verbose > 2) {
    #####: 1003:            fprintf(stderr, "%d: going from %s to %s\n",
        -: 1004:                    c->sfd, state_text(c->state),
        -: 1005:                    state_text(state));
        -: 1006:        }
        -: 1007:
  3499266: 1008:        if (state == conn_write || state == conn_mwrite) {
  3499266: 1009:            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->resp->wbuf, c->resp->wbytes);
        -: 1010:        }
  3499266: 1011:        c->state = state;
        -: 1012:    }
  3499267: 1013:}
        -: 1014:
        -: 1015:/*
        -: 1016: * response object helper functions
        -: 1017: */
   492611: 1018:void resp_reset(mc_resp *resp) {
   492611: 1019:    if (resp->item) {
    #####: 1020:        item_remove(resp->item);
    #####: 1021:        resp->item = NULL;
        -: 1022:    }
   492611: 1023:    if (resp->write_and_free) {
        -: 1024:#ifdef PROXY
        -: 1025:        if (resp->proxy_res) {
        -: 1026:            LIBEVENT_THREAD *t = resp->bundle->thread;
        -: 1027:            pthread_mutex_lock(&t->proxy_limit_lock);
        -: 1028:            t->proxy_buffer_memory_used -= resp->wbytes;
        -: 1029:            pthread_mutex_unlock(&t->proxy_limit_lock);
        -: 1030:        }
        -: 1031:#endif
    #####: 1032:        free(resp->write_and_free);
    #####: 1033:        resp->write_and_free = NULL;
        -: 1034:    }
   492611: 1035:    resp->wbytes = 0;
   492611: 1036:    resp->tosend = 0;
   492611: 1037:    resp->iovcnt = 0;
   492611: 1038:    resp->chunked_data_iov = 0;
   492611: 1039:    resp->chunked_total = 0;
   492611: 1040:    resp->skip = false;
   492611: 1041:}
        -: 1042:
   540463: 1043:void resp_add_iov(mc_resp *resp, const void *buf, int len) {
  540463*: 1044:    assert(resp->iovcnt < MC_RESP_IOVCOUNT);
   540463: 1045:    int x = resp->iovcnt;
   540463: 1046:    resp->iov[x].iov_base = (void *)buf;
   540463: 1047:    resp->iov[x].iov_len = len;
   540463: 1048:    resp->iovcnt++;
   540463: 1049:    resp->tosend += len;
   540463: 1050:}
        -: 1051:
        -: 1052:// Notes that an IOV should be handled as a chunked item header.
        -: 1053:// TODO: I'm hoping this isn't a permanent abstraction while I learn what the
        -: 1054:// API should be.
    18975: 1055:void resp_add_chunked_iov(mc_resp *resp, const void *buf, int len) {
    18975: 1056:    resp->chunked_data_iov = resp->iovcnt;
    18975: 1057:    resp->chunked_total = len;
    18975: 1058:    resp_add_iov(resp, buf, len);
    18975: 1059:}
        -: 1060:
        -: 1061:// resp_allocate and resp_free are a wrapper around read buffers which makes
        -: 1062:// read buffers the only network memory to track.
        -: 1063:// Normally this would be too excessive. In this case it allows end users to
        -: 1064:// track a single memory limit for ephemeral connection buffers.
        -: 1065:// Fancy bit twiddling tricks are avoided to help keep this straightforward.
   654000: 1066:static mc_resp* resp_allocate(conn *c) {
   654000: 1067:    LIBEVENT_THREAD *th = c->thread;
   654000: 1068:    mc_resp *resp = NULL;
   654000: 1069:    mc_resp_bundle *b = th->open_bundle;
        -: 1070:
   654000: 1071:    if (b != NULL) {
  647530*: 1072:        for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1073:            // loop around starting from the most likely to be free
   647530: 1074:            int x = (i + b->next_check) % MAX_RESP_PER_BUNDLE;
   647530: 1075:            if (b->r[x].free) {
   647530: 1076:                resp = &b->r[x];
   647530: 1077:                b->next_check = x+1;
   647530: 1078:                break;
        -: 1079:            }
        -: 1080:        }
        -: 1081:
   647530: 1082:        if (resp != NULL) {
   647530: 1083:            b->refcount++;
   647530: 1084:            memset(resp, 0, sizeof(*resp));
   647530: 1085:            resp->free = false; // redundant, for clarity.
   647530: 1086:            resp->bundle = b;
   647530: 1087:            if (b->refcount == MAX_RESP_PER_BUNDLE) {
    6359*: 1088:                assert(b->prev == NULL);
        -: 1089:                // We only allocate off the head. Assign new head.
     6359: 1090:                th->open_bundle = b->next;
        -: 1091:                // Remove ourselves from the list.
     6359: 1092:                if (b->next) {
    #####: 1093:                    b->next->prev = 0;
    #####: 1094:                    b->next = 0;
        -: 1095:                }
        -: 1096:            }
        -: 1097:        }
        -: 1098:    }
        -: 1099:
        -: 1100:    if (resp == NULL) {
    6470*: 1101:        assert(th->open_bundle == NULL);
     6470: 1102:        b = do_cache_alloc(th->rbuf_cache);
     6470: 1103:        if (b) {
     6468: 1104:            THR_STATS_LOCK(th);
     6468: 1105:            th->stats.response_obj_bytes += READ_BUFFER_SIZE;
     6468: 1106:            THR_STATS_UNLOCK(th);
     6468: 1107:            b->next_check = 1;
     6468: 1108:            b->refcount = 1;
    90552: 1109:            for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
    84084: 1110:                b->r[i].free = true;
        -: 1111:            }
     6468: 1112:            b->next = 0;
     6468: 1113:            b->prev = 0;
     6468: 1114:            b->thread = th;
     6468: 1115:            th->open_bundle = b;
     6468: 1116:            resp = &b->r[0];
     6468: 1117:            memset(resp, 0, sizeof(*resp));
     6468: 1118:            resp->free = false; // redundant. for clarity.
     6468: 1119:            resp->bundle = b;
        -: 1120:        } else {
        -: 1121:            return NULL;
        -: 1122:        }
        -: 1123:    }
        -: 1124:
        -: 1125:    return resp;
        -: 1126:}
        -: 1127:
   653998: 1128:void resp_free(LIBEVENT_THREAD *th, mc_resp *resp) {
   653998: 1129:    mc_resp_bundle *b = resp->bundle;
        -: 1130:
   653998: 1131:    resp->free = true;
   653998: 1132:    b->refcount--;
   653998: 1133:    if (b->refcount == 0) {
   503502: 1134:        if (b == th->open_bundle && b->next == 0) {
        -: 1135:            // This is the final bundle. Just hold and reuse to skip init loop
  497163*: 1136:            assert(b->prev == 0);
   497163: 1137:            b->next_check = 0;
        -: 1138:        } else {
        -: 1139:            // Assert that we're either in the list or at the head.
    6339*: 1140:            assert((b->next || b->prev) || b == th->open_bundle);
        -: 1141:
        -: 1142:            // unlink from list.
     6339: 1143:            mc_resp_bundle **head = &th->open_bundle;
     6339: 1144:            if (*head == b) *head = b->next;
        -: 1145:            // Not tracking the tail.
    6339*: 1146:            assert(b->next != b && b->prev != b);
        -: 1147:
     6339: 1148:            if (b->next) b->next->prev = b->prev;
    6339*: 1149:            if (b->prev) b->prev->next = b->next;
        -: 1150:
        -: 1151:            // Now completely done with this buffer.
     6339: 1152:            do_cache_free(th->rbuf_cache, b);
     6339: 1153:            THR_STATS_LOCK(th);
     6339: 1154:            th->stats.response_obj_bytes -= READ_BUFFER_SIZE;
     6339: 1155:            THR_STATS_UNLOCK(th);
        -: 1156:        }
        -: 1157:    } else {
   150496: 1158:        mc_resp_bundle **head = &th->open_bundle;
        -: 1159:        // NOTE: since we're not tracking tail, latest free ends up in head.
   150496: 1160:        if (b == th->open_bundle || (b->prev || b->next)) {
        -: 1161:            // If we're already linked, leave it in place to save CPU.
        -: 1162:        } else {
        -: 1163:            // Non-zero refcount, need to link into the freelist.
     6359: 1164:            b->prev = 0;
     6359: 1165:            b->next = *head;
     6359: 1166:            if (b->next) b->next->prev = b;
     6359: 1167:            *head = b;
        -: 1168:        }
        -: 1169:
        -: 1170:    }
   653998: 1171:    THR_STATS_LOCK(th);
   653998: 1172:    th->stats.response_obj_count--;
   653998: 1173:    THR_STATS_UNLOCK(th);
   653998: 1174:}
        -: 1175:
   654000: 1176:bool resp_start(conn *c) {
   654000: 1177:    mc_resp *resp = resp_allocate(c);
   654000: 1178:    if (!resp) {
        2: 1179:        THR_STATS_LOCK(c->thread);
        2: 1180:        c->thread->stats.response_obj_oom++;
        2: 1181:        THR_STATS_UNLOCK(c->thread);
        2: 1182:        return false;
        -: 1183:    }
        -: 1184:
        -: 1185:    // handling the stats counters here to simplify testing
   653998: 1186:    THR_STATS_LOCK(c->thread);
   653998: 1187:    c->thread->stats.response_obj_count++;
   653998: 1188:    THR_STATS_UNLOCK(c->thread);
        -: 1189:
   653998: 1190:    if (!c->resp_head) {
   497165: 1191:        c->resp_head = resp;
        -: 1192:    }
   653998: 1193:    if (!c->resp) {
   497165: 1194:        c->resp = resp;
        -: 1195:    } else {
   156833: 1196:        c->resp->next = resp;
   156833: 1197:        c->resp = resp;
        -: 1198:    }
   653998: 1199:    if (IS_UDP(c->transport)) {
        -: 1200:        // need to hold on to some data for async responses.
       18: 1201:        c->resp->request_id = c->request_id;
       18: 1202:        c->resp->request_addr = c->request_addr;
       18: 1203:        c->resp->request_addr_size = c->request_addr_size;
        -: 1204:    }
        -: 1205:    return true;
        -: 1206:}
        -: 1207:
    #####: 1208:mc_resp *resp_start_unlinked(conn *c) {
    #####: 1209:    mc_resp *resp = resp_allocate(c);
    #####: 1210:    if (!resp) {
    #####: 1211:        THR_STATS_LOCK(c->thread);
    #####: 1212:        c->thread->stats.response_obj_oom++;
    #####: 1213:        THR_STATS_UNLOCK(c->thread);
    #####: 1214:        return false;
        -: 1215:    }
        -: 1216:
        -: 1217:    // handling the stats counters here to simplify testing
    #####: 1218:    THR_STATS_LOCK(c->thread);
    #####: 1219:    c->thread->stats.response_obj_count++;
    #####: 1220:    THR_STATS_UNLOCK(c->thread);
        -: 1221:
    #####: 1222:    if (IS_UDP(c->transport)) {
        -: 1223:        // need to hold on to some data for async responses.
    #####: 1224:        c->resp->request_id = c->request_id;
    #####: 1225:        c->resp->request_addr = c->request_addr;
    #####: 1226:        c->resp->request_addr_size = c->request_addr_size;
        -: 1227:    }
        -: 1228:
        -: 1229:    return resp;
        -: 1230:}
        -: 1231:
        -: 1232:// returns next response in chain.
   653998: 1233:mc_resp* resp_finish(conn *c, mc_resp *resp) {
   653998: 1234:    mc_resp *next = resp->next;
   653998: 1235:    if (resp->item) {
        -: 1236:        // TODO: cache hash value in resp obj?
    57599: 1237:        item_remove(resp->item);
    57599: 1238:        resp->item = NULL;
        -: 1239:    }
   653998: 1240:    if (resp->write_and_free) {
        -: 1241:#ifdef PROXY
        -: 1242:        if (resp->proxy_res) {
        -: 1243:            LIBEVENT_THREAD *t = resp->bundle->thread;
        -: 1244:            pthread_mutex_lock(&t->proxy_limit_lock);
        -: 1245:            t->proxy_buffer_memory_used -= resp->wbytes;
        -: 1246:            pthread_mutex_unlock(&t->proxy_limit_lock);
        -: 1247:        }
        -: 1248:#endif
     6015: 1249:        free(resp->write_and_free);
        -: 1250:    }
   653998: 1251:    if (resp->io_pending) {
     1598: 1252:        io_pending_t *io = resp->io_pending;
        -: 1253:        // If we had a pending IO, tell it to internally clean up then return
        -: 1254:        // the main object back to our thread cache.
     1598: 1255:        io->finalize_cb(io);
     1598: 1256:        do_cache_free(c->thread->io_cache, io);
     1598: 1257:        resp->io_pending = NULL;
        -: 1258:    }
   653998: 1259:    if (c->resp_head == resp) {
   653998: 1260:        c->resp_head = next;
        -: 1261:    }
   653998: 1262:    if (c->resp == resp) {
   497165: 1263:        c->resp = NULL;
        -: 1264:    }
   653998: 1265:    resp_free(c->thread, resp);
   653998: 1266:    return next;
        -: 1267:}
        -: 1268:
        -: 1269:// tells if connection has a depth of response objects to process.
       14: 1270:bool resp_has_stack(conn *c) {
       14: 1271:    return c->resp_head->next != NULL ? true : false;
        -: 1272:}
        -: 1273:
   475987: 1274:void out_string(conn *c, const char *str) {
   475987: 1275:    size_t len;
  475987*: 1276:    assert(c != NULL);
   475987: 1277:    mc_resp *resp = c->resp;
        -: 1278:
        -: 1279:    // if response was original filled with something, but we're now writing
        -: 1280:    // out an error or similar, have to reset the object first.
        -: 1281:    // TODO: since this is often redundant with allocation, how many callers
        -: 1282:    // are actually requiring it be reset? Can we fast test by just looking at
        -: 1283:    // tosend and reset if nonzero?
   475987: 1284:    resp_reset(resp);
        -: 1285:
   475987: 1286:    if (c->noreply) {
        -: 1287:        // TODO: just invalidate the response since nothing's been attempted
        -: 1288:        // to send yet?
   193654: 1289:        resp->skip = true;
   193654: 1290:        if (settings.verbose > 1)
    #####: 1291:            fprintf(stderr, ">%d NOREPLY %s\n", c->sfd, str);
   193654: 1292:        conn_set_state(c, conn_new_cmd);
   193654: 1293:        return;
        -: 1294:    }
        -: 1295:
   282333: 1296:    if (settings.verbose > 1)
    #####: 1297:        fprintf(stderr, ">%d %s\n", c->sfd, str);
        -: 1298:
        -: 1299:    // Fill response object with static string.
        -: 1300:
   282333: 1301:    len = strlen(str);
   282333: 1302:    if ((len + 2) > WRITE_BUFFER_SIZE) {
        -: 1303:        /* ought to be always enough. just fail for simplicity */
    #####: 1304:        str = "SERVER_ERROR output line too long";
    #####: 1305:        len = strlen(str);
        -: 1306:    }
        -: 1307:
   282333: 1308:    memcpy(resp->wbuf, str, len);
   282333: 1309:    memcpy(resp->wbuf + len, "\r\n", 2);
   282333: 1310:    resp_add_iov(resp, resp->wbuf, len + 2);
        -: 1311:
   282333: 1312:    conn_set_state(c, conn_new_cmd);
   282333: 1313:    return;
        -: 1314:}
        -: 1315:
        -: 1316:// For metaget-style ASCII commands. Ignores noreply, ensuring clients see
        -: 1317:// protocol level errors.
        4: 1318:void out_errstring(conn *c, const char *str) {
        4: 1319:    c->noreply = false;
        4: 1320:    out_string(c, str);
        4: 1321:}
        -: 1322:
        -: 1323:/*
        -: 1324: * Outputs a protocol-specific "out of memory" error. For ASCII clients,
        -: 1325: * this is equivalent to out_string().
        -: 1326: */
        7: 1327:void out_of_memory(conn *c, char *ascii_error) {
        7: 1328:    const static char error_prefix[] = "SERVER_ERROR ";
        7: 1329:    const static int error_prefix_len = sizeof(error_prefix) - 1;
        -: 1330:
        7: 1331:    if (c->protocol == binary_prot) {
        -: 1332:        /* Strip off the generic error prefix; it's irrelevant in binary */
    #####: 1333:        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {
    #####: 1334:            ascii_error += error_prefix_len;
        -: 1335:        }
    #####: 1336:        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);
        -: 1337:    } else {
        7: 1338:        out_string(c, ascii_error);
        -: 1339:    }
        7: 1340:}
        -: 1341:
     3323: 1342:static void append_bin_stats(const char *key, const uint16_t klen,
        -: 1343:                             const char *val, const uint32_t vlen,
        -: 1344:                             conn *c) {
     3323: 1345:    char *buf = c->stats.buffer + c->stats.offset;
     3323: 1346:    uint32_t bodylen = klen + vlen;
     3323: 1347:    protocol_binary_response_header header = {
        -: 1348:        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,
        -: 1349:        .response.opcode = PROTOCOL_BINARY_CMD_STAT,
     3323: 1350:        .response.keylen = (uint16_t)htons(klen),
        -: 1351:        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,
     3323: 1352:        .response.bodylen = htonl(bodylen),
     3323: 1353:        .response.opaque = c->opaque
        -: 1354:    };
        -: 1355:
     3323: 1356:    memcpy(buf, header.bytes, sizeof(header.response));
     3323: 1357:    buf += sizeof(header.response);
        -: 1358:
     3323: 1359:    if (klen > 0) {
     3279: 1360:        memcpy(buf, key, klen);
     3279: 1361:        buf += klen;
        -: 1362:
     3279: 1363:        if (vlen > 0) {
     3279: 1364:            memcpy(buf, val, vlen);
        -: 1365:        }
        -: 1366:    }
        -: 1367:
     3323: 1368:    c->stats.offset += sizeof(header.response) + bodylen;
     3323: 1369:}
        -: 1370:
   496655: 1371:static void append_ascii_stats(const char *key, const uint16_t klen,
        -: 1372:                               const char *val, const uint32_t vlen,
        -: 1373:                               conn *c) {
   496655: 1374:    char *pos = c->stats.buffer + c->stats.offset;
   496655: 1375:    uint32_t nbytes = 0;
   496655: 1376:    int remaining = c->stats.size - c->stats.offset;
   496655: 1377:    int room = remaining - 1;
        -: 1378:
   496655: 1379:    if (klen == 0 && vlen == 0) {
     5961: 1380:        nbytes = snprintf(pos, room, "END\r\n");
   490694: 1381:    } else if (vlen == 0) {
    #####: 1382:        nbytes = snprintf(pos, room, "STAT %s\r\n", key);
        -: 1383:    } else {
   490694: 1384:        nbytes = snprintf(pos, room, "STAT %s %s\r\n", key, val);
        -: 1385:    }
        -: 1386:
   496655: 1387:    c->stats.offset += nbytes;
   496655: 1388:}
        -: 1389:
   499978: 1390:static bool grow_stats_buf(conn *c, size_t needed) {
   499978: 1391:    size_t nsize = c->stats.size;
   499978: 1392:    size_t available = nsize - c->stats.offset;
   499978: 1393:    bool rv = true;
        -: 1394:
        -: 1395:    /* Special case: No buffer -- need to allocate fresh */
   499978: 1396:    if (c->stats.buffer == NULL) {
     6005: 1397:        nsize = 1024;
     6005: 1398:        available = c->stats.size = c->stats.offset = 0;
        -: 1399:    }
        -: 1400:
   509801: 1401:    while (needed > available) {
    9823*: 1402:        assert(nsize > 0);
     9823: 1403:        nsize = nsize << 1;
     9823: 1404:        available = nsize - c->stats.offset;
        -: 1405:    }
        -: 1406:
   499978: 1407:    if (nsize != c->stats.size) {
     9823: 1408:        char *ptr = realloc(c->stats.buffer, nsize);
     9823: 1409:        if (ptr) {
     9823: 1410:            c->stats.buffer = ptr;
     9823: 1411:            c->stats.size = nsize;
        -: 1412:        } else {
    #####: 1413:            STATS_LOCK();
    #####: 1414:            stats.malloc_fails++;
    #####: 1415:            STATS_UNLOCK();
    #####: 1416:            rv = false;
        -: 1417:        }
        -: 1418:    }
        -: 1419:
   499978: 1420:    return rv;
        -: 1421:}
        -: 1422:
   499978: 1423:void append_stats(const char *key, const uint16_t klen,
        -: 1424:                  const char *val, const uint32_t vlen,
        -: 1425:                  const void *cookie)
        -: 1426:{
        -: 1427:    /* value without a key is invalid */
   499978: 1428:    if (klen == 0 && vlen > 0) {
        -: 1429:        return;
        -: 1430:    }
        -: 1431:
   499978: 1432:    conn *c = (conn*)cookie;
        -: 1433:
   499978: 1434:    if (c->protocol == binary_prot) {
     3323: 1435:        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);
     3323: 1436:        if (!grow_stats_buf(c, needed)) {
        -: 1437:            return;
        -: 1438:        }
     3323: 1439:        append_bin_stats(key, klen, val, vlen, c);
        -: 1440:    } else {
   496655: 1441:        size_t needed = vlen + klen + 10; // 10 == "STAT = \r\n"
   496655: 1442:        if (!grow_stats_buf(c, needed)) {
        -: 1443:            return;
        -: 1444:        }
   496655: 1445:        append_ascii_stats(key, klen, val, vlen, c);
        -: 1446:    }
        -: 1447:
  499978*: 1448:    assert(c->stats.offset <= c->stats.size);
        -: 1449:}
        -: 1450:
  1010265: 1451:static void reset_cmd_handler(conn *c) {
  1010265: 1452:    c->cmd = -1;
  1010265: 1453:    c->substate = bin_no_state;
  1010265: 1454:    if (c->item != NULL) {
        -: 1455:        // TODO: Any other way to get here?
        -: 1456:        // SASL auth was mistakenly using it. Nothing else should?
    #####: 1457:        if (c->item_malloced) {
    #####: 1458:            free(c->item);
    #####: 1459:            c->item_malloced = false;
        -: 1460:        } else {
    #####: 1461:            item_remove(c->item);
        -: 1462:        }
    #####: 1463:        c->item = NULL;
        -: 1464:    }
  1010265: 1465:    if (c->rbytes > 0) {
   152991: 1466:        conn_set_state(c, conn_parse_cmd);
   857274: 1467:    } else if (c->resp_head) {
   369962: 1468:        conn_set_state(c, conn_mwrite);
        -: 1469:    } else {
   487312: 1470:        conn_set_state(c, conn_waiting);
        -: 1471:    }
  1010265: 1472:}
        -: 1473:
   356027: 1474:static void complete_nread(conn *c) {
  356027*: 1475:    assert(c != NULL);
        -: 1476:#ifdef PROXY
        -: 1477:    assert(c->protocol == ascii_prot
        -: 1478:           || c->protocol == binary_prot
        -: 1479:           || c->protocol == proxy_prot);
        -: 1480:#else
  356027*: 1481:    assert(c->protocol == ascii_prot
        -: 1482:           || c->protocol == binary_prot);
        -: 1483:#endif
   356027: 1484:    if (c->protocol == ascii_prot) {
   330937: 1485:        complete_nread_ascii(c);
    25090: 1486:    } else if (c->protocol == binary_prot) {
    25090: 1487:        complete_nread_binary(c);
        -: 1488:#ifdef PROXY
        -: 1489:    } else if (c->protocol == proxy_prot) {
        -: 1490:        complete_nread_proxy(c);
        -: 1491:#endif
        -: 1492:    }
   356027: 1493:}
        -: 1494:
        -: 1495:/* Destination must always be chunked */
        -: 1496:/* This should be part of item.c */
    27032: 1497:static int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {
    27032: 1498:    item_chunk *dch = (item_chunk *) ITEM_schunk(d_it);
        -: 1499:    /* Advance dch until we find free space */
    77099: 1500:    while (dch->size == dch->used) {
    77099: 1501:        if (dch->next) {
        -: 1502:            dch = dch->next;
        -: 1503:        } else {
        -: 1504:            break;
        -: 1505:        }
        -: 1506:    }
        -: 1507:
    27032: 1508:    if (s_it->it_flags & ITEM_CHUNKED) {
    13516: 1509:        int remain = len;
    13516: 1510:        item_chunk *sch = (item_chunk *) ITEM_schunk(s_it);
    13516: 1511:        int copied = 0;
        -: 1512:        /* Fills dch's to capacity, not straight copy sch in case data is
        -: 1513:         * being added or removed (ie append/prepend)
        -: 1514:         */
   136671: 1515:        while (sch && dch && remain) {
  123155*: 1516:            assert(dch->used <= dch->size);
   123155: 1517:            int todo = (dch->size - dch->used < sch->used - copied)
        -: 1518:                ? dch->size - dch->used : sch->used - copied;
   123155: 1519:            if (remain < todo)
        -: 1520:                todo = remain;
   123155: 1521:            memcpy(dch->data + dch->used, sch->data + copied, todo);
   123155: 1522:            dch->used += todo;
   123155: 1523:            copied += todo;
   123155: 1524:            remain -= todo;
  123155*: 1525:            assert(dch->used <= dch->size);
   123155: 1526:            if (dch->size == dch->used) {
    73103: 1527:                item_chunk *tch = do_item_alloc_chunk(dch, remain);
    73103: 1528:                if (tch) {
        -: 1529:                    dch = tch;
        -: 1530:                } else {
        -: 1531:                    return -1;
        -: 1532:                }
        -: 1533:            }
  123155*: 1534:            assert(copied <= sch->used);
   123155: 1535:            if (copied == sch->used) {
    93361: 1536:                copied = 0;
    93361: 1537:                sch = sch->next;
        -: 1538:            }
        -: 1539:        }
        -: 1540:        /* assert that the destination had enough space for the source */
   13516*: 1541:        assert(remain == 0);
        -: 1542:    } else {
        -: 1543:        int done = 0;
        -: 1544:        /* Fill dch's via a non-chunked item. */
    40548: 1545:        while (len > done && dch) {
    27032: 1546:            int todo = (dch->size - dch->used < len - done)
        -: 1547:                ? dch->size - dch->used : len - done;
        -: 1548:            //assert(dch->size - dch->used != 0);
    27032: 1549:            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);
    27032: 1550:            done += todo;
    27032: 1551:            dch->used += todo;
   27032*: 1552:            assert(dch->used <= dch->size);
    27032: 1553:            if (dch->size == dch->used) {
    27032: 1554:                item_chunk *tch = do_item_alloc_chunk(dch, len - done);
    27032: 1555:                if (tch) {
        -: 1556:                    dch = tch;
        -: 1557:                } else {
        -: 1558:                    return -1;
        -: 1559:                }
        -: 1560:            }
        -: 1561:        }
   13516*: 1562:        assert(len == done);
        -: 1563:    }
        -: 1564:    return 0;
        -: 1565:}
        -: 1566:
    16017: 1567:static int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {
    16017: 1568:    if (comm == NREAD_APPEND || comm == NREAD_APPENDVIV) {
     8010: 1569:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1570:            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||
     6758: 1571:                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {
    #####: 1572:                return -1;
        -: 1573:            }
        -: 1574:        } else {
     1252: 1575:            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);
     1252: 1576:            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);
        -: 1577:        }
        -: 1578:    } else {
        -: 1579:        /* NREAD_PREPEND */
     8007: 1580:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1581:            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||
     6758: 1582:                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {
    #####: 1583:                return -1;
        -: 1584:            }
        -: 1585:        } else {
     1249: 1586:            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);
     1249: 1587:            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);
        -: 1588:        }
        -: 1589:    }
        -: 1590:    return 0;
        -: 1591:}
        -: 1592:
        -: 1593:/*
        -: 1594: * Stores an item in the cache according to the semantics of one of the set
        -: 1595: * commands. Protected by the item lock.
        -: 1596: *
        -: 1597: * Returns the state of storage.
        -: 1598: */
   356080: 1599:enum store_item_type do_store_item(item *it, int comm, LIBEVENT_THREAD *t, const uint32_t hv, int *nbytes, uint64_t *cas, uint64_t cas_in, bool cas_stale) {
   356080: 1600:    char *key = ITEM_key(it);
   356080: 1601:    item *old_it = do_item_get(key, it->nkey, hv, t, DONT_UPDATE);
   356080: 1602:    enum store_item_type stored = NOT_STORED;
        -: 1603:
   356080: 1604:    enum cas_result { CAS_NONE, CAS_MATCH, CAS_BADVAL, CAS_STALE, CAS_MISS };
        -: 1605:
   356080: 1606:    item *new_it = NULL;
   356080: 1607:    client_flags_t flags;
        -: 1608:
        -: 1609:    /* Do the CAS test up front so we can apply to all store modes */
   356080: 1610:    enum cas_result cas_res = CAS_NONE;
        -: 1611:
   356080: 1612:    bool do_store = false;
   356080: 1613:    if (old_it != NULL) {
        -: 1614:        // Most of the CAS work requires something to compare to.
    36520: 1615:        uint64_t it_cas = ITEM_get_cas(it);
    36520: 1616:        uint64_t old_cas = ITEM_get_cas(old_it);
    36520: 1617:        if (it_cas == 0) {
        -: 1618:            cas_res = CAS_NONE;
       23: 1619:        } else if (it_cas == old_cas) {
        -: 1620:            cas_res = CAS_MATCH;
       10: 1621:        } else if (cas_stale && it_cas < old_cas) {
        -: 1622:            cas_res = CAS_STALE;
        -: 1623:        } else {
        9: 1624:            cas_res = CAS_BADVAL;
        -: 1625:        }
        -: 1626:
    36520: 1627:        switch (comm) {
      648: 1628:            case NREAD_ADD:
        -: 1629:                /* add only adds a nonexistent item, but promote to head of LRU */
      648: 1630:                do_item_update(old_it);
      648: 1631:                break;
       23: 1632:            case NREAD_CAS:
       23: 1633:                if (cas_res == CAS_MATCH) {
        -: 1634:                    // cas validates
        -: 1635:                    // it and old_it may belong to different classes.
        -: 1636:                    // I'm updating the stats for the one that's getting pushed out
       12: 1637:                    pthread_mutex_lock(&t->stats.mutex);
       12: 1638:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
       12: 1639:                    pthread_mutex_unlock(&t->stats.mutex);
       12: 1640:                    do_store = true;
       11: 1641:                } else if (cas_res == CAS_STALE) {
        -: 1642:                    // if we're allowed to set a stale value, CAS must be lower than
        -: 1643:                    // the current item's CAS.
        -: 1644:                    // This replaces the value, but should preserve TTL, and stale
        -: 1645:                    // item marker bit + token sent if exists.
        1: 1646:                    it->exptime = old_it->exptime;
        1: 1647:                    it->it_flags |= ITEM_STALE;
        1: 1648:                    if (old_it->it_flags & ITEM_TOKEN_SENT) {
        1: 1649:                        it->it_flags |= ITEM_TOKEN_SENT;
        -: 1650:                    }
        -: 1651:
        1: 1652:                    pthread_mutex_lock(&t->stats.mutex);
        1: 1653:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
        1: 1654:                    pthread_mutex_unlock(&t->stats.mutex);
        1: 1655:                    do_store = true;
        -: 1656:                } else {
        -: 1657:                    // NONE or BADVAL are the same for CAS cmd
       10: 1658:                    pthread_mutex_lock(&t->stats.mutex);
       10: 1659:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;
       10: 1660:                    pthread_mutex_unlock(&t->stats.mutex);
        -: 1661:
       10: 1662:                    if (settings.verbose > 1) {
    #####: 1663:                        fprintf(stderr, "CAS:  failure: expected %llu, got %llu\n",
    #####: 1664:                                (unsigned long long)ITEM_get_cas(old_it),
    #####: 1665:                                (unsigned long long)ITEM_get_cas(it));
        -: 1666:                    }
        -: 1667:                    stored = EXISTS;
        -: 1668:                }
        -: 1669:                break;
    16019: 1670:            case NREAD_APPEND:
        -: 1671:            case NREAD_PREPEND:
        -: 1672:            case NREAD_APPENDVIV:
        -: 1673:            case NREAD_PREPENDVIV:
    16019: 1674:                if (cas_res != CAS_NONE && cas_res != CAS_MATCH) {
        -: 1675:                    stored = EXISTS;
        -: 1676:                    break;
        -: 1677:                }
        -: 1678:#ifdef EXTSTORE
    16019: 1679:                if ((old_it->it_flags & ITEM_HDR) != 0) {
        -: 1680:                    /* block append/prepend from working with extstore-d items.
        -: 1681:                     * leave response code to NOT_STORED default */
        -: 1682:                    break;
        -: 1683:                }
        -: 1684:#endif
        -: 1685:                /* we have it and old_it here - alloc memory to hold both */
    16017: 1686:                FLAGS_CONV(old_it, flags);
    16017: 1687:                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);
        -: 1688:
        -: 1689:                // OOM trying to copy.
    16017: 1690:                if (new_it == NULL)
        -: 1691:                    break;
        -: 1692:                /* copy data from it and old_it to new_it */
    16017: 1693:                if (_store_item_copy_data(comm, old_it, new_it, it) == -1) {
        -: 1694:                    // failed data copy
        -: 1695:                    break;
        -: 1696:                } else {
        -: 1697:                    // refcount of new_it is 1 here. will end up 2 after link.
        -: 1698:                    // it's original ref is managed outside of this function
    16017: 1699:                    it = new_it;
    16017: 1700:                    do_store = true;
        -: 1701:                    // Upstream final object size for meta
    16017: 1702:                    if (nbytes != NULL) {
    16008: 1703:                        *nbytes = it->nbytes;
        -: 1704:                    }
        -: 1705:                }
        -: 1706:                break;
        -: 1707:            case NREAD_REPLACE:
        -: 1708:            case NREAD_SET:
    19842: 1709:                do_store = true;
        -: 1710:                break;
        -: 1711:        }
        -: 1712:
    36520: 1713:        if (do_store) {
    35860: 1714:            STORAGE_delete(t->storage, old_it);
    35860: 1715:            item_replace(old_it, it, hv, cas_in);
    35860: 1716:            stored = STORED;
        -: 1717:        }
        -: 1718:
    36520: 1719:        do_item_remove(old_it);         /* release our reference */
    36520: 1720:        if (new_it != NULL) {
        -: 1721:            // append/prepend end up with an extra reference for new_it.
    16017: 1722:            do_item_remove(new_it);
        -: 1723:        }
        -: 1724:    } else {
        -: 1725:        /* No pre-existing item to replace or compare to. */
   319560: 1726:        if (ITEM_get_cas(it) != 0) {
        -: 1727:            /* Asked for a CAS match but nothing to compare it to. */
        -: 1728:            cas_res = CAS_MISS;
        -: 1729:        }
        -: 1730:
   319560: 1731:        switch (comm) {
        -: 1732:            case NREAD_ADD:
        -: 1733:            case NREAD_SET:
        -: 1734:            case NREAD_APPENDVIV:
        -: 1735:            case NREAD_PREPENDVIV:
   319450: 1736:                do_store = true;
   319450: 1737:                break;
        3: 1738:            case NREAD_CAS:
        -: 1739:                // LRU expired
        3: 1740:                stored = NOT_FOUND;
        3: 1741:                pthread_mutex_lock(&t->stats.mutex);
        3: 1742:                t->stats.cas_misses++;
        3: 1743:                pthread_mutex_unlock(&t->stats.mutex);
        3: 1744:                break;
        -: 1745:            case NREAD_REPLACE:
        -: 1746:            case NREAD_APPEND:
        -: 1747:            case NREAD_PREPEND:
        -: 1748:                /* Requires an existing item. */
        -: 1749:                break;
        -: 1750:        }
        -: 1751:
        3: 1752:        if (do_store) {
   319450: 1753:            do_item_link(it, hv, cas_in);
   319450: 1754:            stored = STORED;
        -: 1755:        }
        -: 1756:    }
        -: 1757:
   356080: 1758:    if (stored == STORED && cas != NULL) {
   355304: 1759:        *cas = ITEM_get_cas(it);
        -: 1760:    }
  356080*: 1761:    LOGGER_LOG(t->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,
        -: 1762:            stored, comm, ITEM_key(it), it->nkey, it->nbytes, it->exptime,
        -: 1763:            ITEM_clsid(it), t->cur_sfd);
        -: 1764:
   356080: 1765:    return stored;
        -: 1766:}
        -: 1767:
        -: 1768:/* set up a connection to write a buffer then free it, used for stats */
     6015: 1769:void write_and_free(conn *c, char *buf, int bytes) {
     6015: 1770:    if (buf) {
     6015: 1771:        mc_resp *resp = c->resp;
     6015: 1772:        resp->write_and_free = buf;
     6015: 1773:        resp_add_iov(resp, buf, bytes);
     6015: 1774:        conn_set_state(c, conn_new_cmd);
        -: 1775:    } else {
    #####: 1776:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -: 1777:    }
     6015: 1778:}
        -: 1779:
   380636: 1780:void append_stat(const char *name, ADD_STAT add_stats, conn *c,
        -: 1781:                 const char *fmt, ...) {
   380636: 1782:    char val_str[STAT_VAL_LEN];
   380636: 1783:    int vlen;
   380636: 1784:    va_list ap;
        -: 1785:
  380636*: 1786:    assert(name);
  380636*: 1787:    assert(add_stats);
  380636*: 1788:    assert(c);
  380636*: 1789:    assert(fmt);
        -: 1790:
   380636: 1791:    va_start(ap, fmt);
   380636: 1792:    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);
   380636: 1793:    va_end(ap);
        -: 1794:
   380636: 1795:    add_stats(name, strlen(name), val_str, vlen, c);
   380636: 1796:}
        -: 1797:
        -: 1798:/* return server specific stats only */
     3817: 1799:void server_stats(ADD_STAT add_stats, void *c) {
     3817: 1800:    pid_t pid = getpid();
     3817: 1801:    rel_time_t now = current_time;
        -: 1802:
     3817: 1803:    struct thread_stats thread_stats;
     3817: 1804:    threadlocal_stats_aggregate(&thread_stats);
     3817: 1805:    struct slab_stats slab_stats;
     3817: 1806:    slab_stats_aggregate(&thread_stats, &slab_stats);
        -: 1807:#ifndef WIN32
     3817: 1808:    struct rusage usage;
     3817: 1809:    getrusage(RUSAGE_SELF, &usage);
        -: 1810:#endif /* !WIN32 */
        -: 1811:
     3817: 1812:    STATS_LOCK();
        -: 1813:
     3817: 1814:    APPEND_STAT("pid", "%lu", (long)pid);
     3817: 1815:    APPEND_STAT("uptime", "%u", now - ITEM_UPDATE_INTERVAL);
     3817: 1816:    APPEND_STAT("time", "%ld", now + (long)process_started);
     3817: 1817:    APPEND_STAT("version", "%s", VERSION);
     3817: 1818:    APPEND_STAT("libevent", "%s", event_get_version());
     3817: 1819:    APPEND_STAT("pointer_size", "%d", (int)(8 * sizeof(void *)));
        -: 1820:
        -: 1821:#ifndef WIN32
     3817: 1822:    append_stat("rusage_user", add_stats, c, "%ld.%06ld",
     3817: 1823:                (long)usage.ru_utime.tv_sec,
     3817: 1824:                (long)usage.ru_utime.tv_usec);
     3817: 1825:    append_stat("rusage_system", add_stats, c, "%ld.%06ld",
     3817: 1826:                (long)usage.ru_stime.tv_sec,
     3817: 1827:                (long)usage.ru_stime.tv_usec);
        -: 1828:#endif /* !WIN32 */
        -: 1829:
     3817: 1830:    APPEND_STAT("max_connections", "%d", settings.maxconns);
     3817: 1831:    APPEND_STAT("curr_connections", "%llu", (unsigned long long)stats_state.curr_conns - 1);
     3817: 1832:    APPEND_STAT("total_connections", "%llu", (unsigned long long)stats.total_conns);
     3817: 1833:    if (settings.maxconns_fast) {
     3806: 1834:        APPEND_STAT("rejected_connections", "%llu", (unsigned long long)stats.rejected_conns);
        -: 1835:    }
     3817: 1836:    APPEND_STAT("connection_structures", "%u", stats_state.conn_structs);
     3817: 1837:    APPEND_STAT("response_obj_oom", "%llu", (unsigned long long)thread_stats.response_obj_oom);
     3817: 1838:    APPEND_STAT("response_obj_count", "%llu", (unsigned long long)thread_stats.response_obj_count);
     3817: 1839:    APPEND_STAT("response_obj_bytes", "%llu", (unsigned long long)thread_stats.response_obj_bytes);
     3817: 1840:    APPEND_STAT("read_buf_count", "%llu", (unsigned long long)thread_stats.read_buf_count);
     3817: 1841:    APPEND_STAT("read_buf_bytes", "%llu", (unsigned long long)thread_stats.read_buf_bytes);
     3817: 1842:    APPEND_STAT("read_buf_bytes_free", "%llu", (unsigned long long)thread_stats.read_buf_bytes_free);
     3817: 1843:    APPEND_STAT("read_buf_oom", "%llu", (unsigned long long)thread_stats.read_buf_oom);
     3817: 1844:    APPEND_STAT("reserved_fds", "%u", stats_state.reserved_fds);
        -: 1845:#ifdef PROXY
        -: 1846:    if (settings.proxy_enabled) {
        -: 1847:        APPEND_STAT("proxy_conn_requests", "%llu", (unsigned long long)thread_stats.proxy_conn_requests);
        -: 1848:        APPEND_STAT("proxy_conn_errors", "%llu", (unsigned long long)thread_stats.proxy_conn_errors);
        -: 1849:        APPEND_STAT("proxy_conn_oom", "%llu", (unsigned long long)thread_stats.proxy_conn_oom);
        -: 1850:        APPEND_STAT("proxy_req_active", "%llu", (unsigned long long)thread_stats.proxy_req_active);
        -: 1851:        APPEND_STAT("proxy_await_active", "%llu", (unsigned long long)thread_stats.proxy_await_active);
        -: 1852:    }
        -: 1853:#endif
     3817: 1854:    APPEND_STAT("cmd_get", "%llu", (unsigned long long)thread_stats.get_cmds);
     3817: 1855:    APPEND_STAT("cmd_set", "%llu", (unsigned long long)slab_stats.set_cmds);
     3817: 1856:    APPEND_STAT("cmd_flush", "%llu", (unsigned long long)thread_stats.flush_cmds);
     3817: 1857:    APPEND_STAT("cmd_touch", "%llu", (unsigned long long)thread_stats.touch_cmds);
     3817: 1858:    APPEND_STAT("cmd_meta", "%llu", (unsigned long long)thread_stats.meta_cmds);
     3817: 1859:    APPEND_STAT("get_hits", "%llu", (unsigned long long)slab_stats.get_hits);
     3817: 1860:    APPEND_STAT("get_misses", "%llu", (unsigned long long)thread_stats.get_misses);
     3817: 1861:    APPEND_STAT("get_expired", "%llu", (unsigned long long)thread_stats.get_expired);
     3817: 1862:    APPEND_STAT("get_flushed", "%llu", (unsigned long long)thread_stats.get_flushed);
        -: 1863:#ifdef EXTSTORE
     3817: 1864:    if (ext_storage) {
     1051: 1865:        APPEND_STAT("get_extstore", "%llu", (unsigned long long)thread_stats.get_extstore);
     1051: 1866:        APPEND_STAT("get_aborted_extstore", "%llu", (unsigned long long)thread_stats.get_aborted_extstore);
     1051: 1867:        APPEND_STAT("get_oom_extstore", "%llu", (unsigned long long)thread_stats.get_oom_extstore);
     1051: 1868:        APPEND_STAT("recache_from_extstore", "%llu", (unsigned long long)thread_stats.recache_from_extstore);
     1051: 1869:        APPEND_STAT("miss_from_extstore", "%llu", (unsigned long long)thread_stats.miss_from_extstore);
     1051: 1870:        APPEND_STAT("badcrc_from_extstore", "%llu", (unsigned long long)thread_stats.badcrc_from_extstore);
        -: 1871:    }
        -: 1872:#endif
     3817: 1873:    APPEND_STAT("delete_misses", "%llu", (unsigned long long)thread_stats.delete_misses);
     3817: 1874:    APPEND_STAT("delete_hits", "%llu", (unsigned long long)slab_stats.delete_hits);
     3817: 1875:    APPEND_STAT("incr_misses", "%llu", (unsigned long long)thread_stats.incr_misses);
     3817: 1876:    APPEND_STAT("incr_hits", "%llu", (unsigned long long)slab_stats.incr_hits);
     3817: 1877:    APPEND_STAT("decr_misses", "%llu", (unsigned long long)thread_stats.decr_misses);
     3817: 1878:    APPEND_STAT("decr_hits", "%llu", (unsigned long long)slab_stats.decr_hits);
     3817: 1879:    APPEND_STAT("cas_misses", "%llu", (unsigned long long)thread_stats.cas_misses);
     3817: 1880:    APPEND_STAT("cas_hits", "%llu", (unsigned long long)slab_stats.cas_hits);
     3817: 1881:    APPEND_STAT("cas_badval", "%llu", (unsigned long long)slab_stats.cas_badval);
     3817: 1882:    APPEND_STAT("touch_hits", "%llu", (unsigned long long)slab_stats.touch_hits);
     3817: 1883:    APPEND_STAT("touch_misses", "%llu", (unsigned long long)thread_stats.touch_misses);
     3817: 1884:    APPEND_STAT("store_too_large", "%llu", (unsigned long long)thread_stats.store_too_large);
     3817: 1885:    APPEND_STAT("store_no_memory", "%llu", (unsigned long long)thread_stats.store_no_memory);
     3817: 1886:    APPEND_STAT("auth_cmds", "%llu", (unsigned long long)thread_stats.auth_cmds);
     3817: 1887:    APPEND_STAT("auth_errors", "%llu", (unsigned long long)thread_stats.auth_errors);
     3817: 1888:    if (settings.idle_timeout) {
        9: 1889:        APPEND_STAT("idle_kicks", "%llu", (unsigned long long)thread_stats.idle_kicks);
        -: 1890:    }
     3817: 1891:    APPEND_STAT("bytes_read", "%llu", (unsigned long long)thread_stats.bytes_read);
     3817: 1892:    APPEND_STAT("bytes_written", "%llu", (unsigned long long)thread_stats.bytes_written);
     3817: 1893:    APPEND_STAT("limit_maxbytes", "%llu", (unsigned long long)settings.maxbytes);
     3817: 1894:    APPEND_STAT("accepting_conns", "%u", stats_state.accepting_conns);
     3817: 1895:    APPEND_STAT("listen_disabled_num", "%llu", (unsigned long long)stats.listen_disabled_num);
     3817: 1896:    APPEND_STAT("time_in_listen_disabled_us", "%llu", stats.time_in_listen_disabled_us);
     3817: 1897:    APPEND_STAT("threads", "%d", settings.num_threads);
     3817: 1898:    APPEND_STAT("conn_yields", "%llu", (unsigned long long)thread_stats.conn_yields);
     3817: 1899:    APPEND_STAT("hash_power_level", "%u", stats_state.hash_power_level);
     3817: 1900:    APPEND_STAT("hash_bytes", "%llu", (unsigned long long)stats_state.hash_bytes);
     3817: 1901:    APPEND_STAT("hash_is_expanding", "%u", stats_state.hash_is_expanding);
     3817: 1902:    if (settings.slab_reassign) {
     3806: 1903:        APPEND_STAT("slab_reassign_rescues", "%llu", stats.slab_reassign_rescues);
     3806: 1904:        APPEND_STAT("slab_reassign_chunk_rescues", "%llu", stats.slab_reassign_chunk_rescues);
     3806: 1905:        APPEND_STAT("slab_reassign_evictions_nomem", "%llu", stats.slab_reassign_evictions_nomem);
     3806: 1906:        APPEND_STAT("slab_reassign_inline_reclaim", "%llu", stats.slab_reassign_inline_reclaim);
     3806: 1907:        APPEND_STAT("slab_reassign_busy_items", "%llu", stats.slab_reassign_busy_items);
     3806: 1908:        APPEND_STAT("slab_reassign_busy_deletes", "%llu", stats.slab_reassign_busy_deletes);
     3806: 1909:        APPEND_STAT("slab_reassign_running", "%u", stats_state.slab_reassign_running);
     3806: 1910:        APPEND_STAT("slabs_moved", "%llu", stats.slabs_moved);
        -: 1911:    }
     3817: 1912:    if (settings.lru_crawler) {
     3783: 1913:        APPEND_STAT("lru_crawler_running", "%u", stats_state.lru_crawler_running);
     3783: 1914:        APPEND_STAT("lru_crawler_starts", "%u", stats.lru_crawler_starts);
        -: 1915:    }
     3817: 1916:    if (settings.lru_maintainer_thread) {
     3790: 1917:        APPEND_STAT("lru_maintainer_juggles", "%llu", (unsigned long long)stats.lru_maintainer_juggles);
        -: 1918:    }
     3817: 1919:    APPEND_STAT("malloc_fails", "%llu",
     3817: 1920:                (unsigned long long)stats.malloc_fails);
     3817: 1921:    APPEND_STAT("log_worker_dropped", "%llu", (unsigned long long)stats.log_worker_dropped);
     3817: 1922:    APPEND_STAT("log_worker_written", "%llu", (unsigned long long)stats.log_worker_written);
     3817: 1923:    APPEND_STAT("log_watcher_skipped", "%llu", (unsigned long long)stats.log_watcher_skipped);
     3817: 1924:    APPEND_STAT("log_watcher_sent", "%llu", (unsigned long long)stats.log_watcher_sent);
     3817: 1925:    APPEND_STAT("log_watchers", "%llu", (unsigned long long)stats_state.log_watchers);
     3817: 1926:    STATS_UNLOCK();
        -: 1927:#ifdef EXTSTORE
     3817: 1928:    storage_stats(add_stats, c);
        -: 1929:#endif
        -: 1930:#ifdef PROXY
        -: 1931:    proxy_stats(settings.proxy_ctx, add_stats, c);
        -: 1932:#endif
        -: 1933:#ifdef TLS
        -: 1934:    if (settings.ssl_enabled) {
        -: 1935:        if (settings.ssl_session_cache) {
        -: 1936:            APPEND_STAT("ssl_new_sessions", "%llu", (unsigned long long)stats.ssl_new_sessions);
        -: 1937:        }
        -: 1938:        APPEND_STAT("ssl_handshake_errors", "%llu", (unsigned long long)stats.ssl_handshake_errors);
        -: 1939:        APPEND_STAT("time_since_server_cert_refresh", "%u", now - settings.ssl_last_cert_refresh_time);
        -: 1940:    }
        -: 1941:#endif
     3817: 1942:    APPEND_STAT("unexpected_napi_ids", "%llu", (unsigned long long)stats.unexpected_napi_ids);
     3817: 1943:    APPEND_STAT("round_robin_fallback", "%llu", (unsigned long long)stats.round_robin_fallback);
     3817: 1944:}
        -: 1945:
       21: 1946:void process_stat_settings(ADD_STAT add_stats, void *c) {
      21*: 1947:    assert(add_stats);
       21: 1948:    APPEND_STAT("maxbytes", "%llu", (unsigned long long)settings.maxbytes);
       21: 1949:    APPEND_STAT("maxconns", "%d", settings.maxconns);
       21: 1950:    APPEND_STAT("tcpport", "%d", settings.port);
       21: 1951:    APPEND_STAT("udpport", "%d", settings.udpport);
       21: 1952:    APPEND_STAT("inter", "%s", settings.inter ? settings.inter : "NULL");
       21: 1953:    APPEND_STAT("verbosity", "%d", settings.verbose);
       21: 1954:    APPEND_STAT("oldest", "%lu", (unsigned long)settings.oldest_live);
       21: 1955:    APPEND_STAT("evictions", "%s", settings.evict_to_free ? "on" : "off");
       42: 1956:    APPEND_STAT("domain_socket", "%s",
       21: 1957:                settings.socketpath ? settings.socketpath : "NULL");
       21: 1958:    APPEND_STAT("umask", "%o", settings.access);
       42: 1959:    APPEND_STAT("shutdown_command", "%s",
       21: 1960:                settings.shutdown_command ? "yes" : "no");
       21: 1961:    APPEND_STAT("growth_factor", "%.2f", settings.factor);
       21: 1962:    APPEND_STAT("chunk_size", "%d", settings.chunk_size);
       21: 1963:    APPEND_STAT("num_threads", "%d", settings.num_threads);
       21: 1964:    APPEND_STAT("num_threads_per_udp", "%d", settings.num_threads_per_udp);
       21: 1965:    APPEND_STAT("stat_key_prefix", "%c", settings.prefix_delimiter);
       41: 1966:    APPEND_STAT("detail_enabled", "%s",
       21: 1967:                settings.detail_enabled ? "yes" : "no");
       21: 1968:    APPEND_STAT("reqs_per_event", "%d", settings.reqs_per_event);
       22: 1969:    APPEND_STAT("cas_enabled", "%s", settings.use_cas ? "yes" : "no");
       21: 1970:    APPEND_STAT("tcp_backlog", "%d", settings.backlog);
       42: 1971:    APPEND_STAT("binding_protocol", "%s",
       21: 1972:                prot_text(settings.binding_protocol));
       42: 1973:    APPEND_STAT("auth_enabled_sasl", "%s", settings.sasl ? "yes" : "no");
       21: 1974:    APPEND_STAT("auth_enabled_ascii", "%s", settings.auth_file ? settings.auth_file : "no");
       21: 1975:    APPEND_STAT("item_size_max", "%d", settings.item_size_max);
       25: 1976:    APPEND_STAT("maxconns_fast", "%s", settings.maxconns_fast ? "yes" : "no");
       21: 1977:    APPEND_STAT("hashpower_init", "%d", settings.hashpower_init);
       25: 1978:    APPEND_STAT("slab_reassign", "%s", settings.slab_reassign ? "yes" : "no");
       21: 1979:    APPEND_STAT("slab_automove", "%d", settings.slab_automove);
       21: 1980:    APPEND_STAT("slab_automove_ratio", "%.2f", settings.slab_automove_ratio);
       21: 1981:    APPEND_STAT("slab_automove_window", "%u", settings.slab_automove_window);
       21: 1982:    APPEND_STAT("slab_chunk_max", "%d", settings.slab_chunk_size_max);
       25: 1983:    APPEND_STAT("lru_crawler", "%s", settings.lru_crawler ? "yes" : "no");
       21: 1984:    APPEND_STAT("lru_crawler_sleep", "%d", settings.lru_crawler_sleep);
       21: 1985:    APPEND_STAT("lru_crawler_tocrawl", "%lu", (unsigned long)settings.lru_crawler_tocrawl);
       21: 1986:    APPEND_STAT("tail_repair_time", "%d", settings.tail_repair_time);
       21: 1987:    APPEND_STAT("flush_enabled", "%s", settings.flush_enabled ? "yes" : "no");
       21: 1988:    APPEND_STAT("dump_enabled", "%s", settings.dump_enabled ? "yes" : "no");
       21: 1989:    APPEND_STAT("hash_algorithm", "%s", settings.hash_algorithm);
       26: 1990:    APPEND_STAT("lru_maintainer_thread", "%s", settings.lru_maintainer_thread ? "yes" : "no");
       26: 1991:    APPEND_STAT("lru_segmented", "%s", settings.lru_segmented ? "yes" : "no");
       21: 1992:    APPEND_STAT("hot_lru_pct", "%d", settings.hot_lru_pct);
       21: 1993:    APPEND_STAT("warm_lru_pct", "%d", settings.warm_lru_pct);
       21: 1994:    APPEND_STAT("hot_max_factor", "%.2f", settings.hot_max_factor);
       21: 1995:    APPEND_STAT("warm_max_factor", "%.2f", settings.warm_max_factor);
       41: 1996:    APPEND_STAT("temp_lru", "%s", settings.temp_lru ? "yes" : "no");
       21: 1997:    APPEND_STAT("temporary_ttl", "%u", settings.temporary_ttl);
       21: 1998:    APPEND_STAT("idle_timeout", "%d", settings.idle_timeout);
       21: 1999:    APPEND_STAT("watcher_logbuf_size", "%u", settings.logger_watcher_buf_size);
       21: 2000:    APPEND_STAT("worker_logbuf_size", "%u", settings.logger_buf_size);
       21: 2001:    APPEND_STAT("read_buf_mem_limit", "%u", settings.read_buf_mem_limit);
       42: 2002:    APPEND_STAT("track_sizes", "%s", item_stats_sizes_status() ? "yes" : "no");
       21: 2003:    APPEND_STAT("inline_ascii_response", "%s", "no"); // setting is dead, cannot be yes.
        -: 2004:#ifdef HAVE_DROP_PRIVILEGES
        -: 2005:    APPEND_STAT("drop_privileges", "%s", settings.drop_privileges ? "yes" : "no");
        -: 2006:#endif
        -: 2007:#ifdef EXTSTORE
       21: 2008:    APPEND_STAT("ext_item_size", "%u", settings.ext_item_size);
       21: 2009:    APPEND_STAT("ext_item_age", "%u", settings.ext_item_age);
       21: 2010:    APPEND_STAT("ext_low_ttl", "%u", settings.ext_low_ttl);
       21: 2011:    APPEND_STAT("ext_recache_rate", "%u", settings.ext_recache_rate);
       21: 2012:    APPEND_STAT("ext_wbuf_size", "%u", settings.ext_wbuf_size);
       21: 2013:    APPEND_STAT("ext_compact_under", "%u", settings.ext_compact_under);
       21: 2014:    APPEND_STAT("ext_drop_under", "%u", settings.ext_drop_under);
       21: 2015:    APPEND_STAT("ext_max_sleep", "%u", settings.ext_max_sleep);
       21: 2016:    APPEND_STAT("ext_max_frag", "%.2f", settings.ext_max_frag);
       21: 2017:    APPEND_STAT("slab_automove_freeratio", "%.3f", settings.slab_automove_freeratio);
       42: 2018:    APPEND_STAT("ext_drop_unread", "%s", settings.ext_drop_unread ? "yes" : "no");
        -: 2019:#endif
        -: 2020:#ifdef TLS
        -: 2021:    APPEND_STAT("ssl_enabled", "%s", settings.ssl_enabled ? "yes" : "no");
        -: 2022:    APPEND_STAT("ssl_chain_cert", "%s", settings.ssl_chain_cert);
        -: 2023:    APPEND_STAT("ssl_key", "%s", settings.ssl_key);
        -: 2024:    APPEND_STAT("ssl_verify_mode", "%d", settings.ssl_verify_mode);
        -: 2025:    APPEND_STAT("ssl_keyformat", "%d", settings.ssl_keyformat);
        -: 2026:    APPEND_STAT("ssl_ciphers", "%s", settings.ssl_ciphers ? settings.ssl_ciphers : "NULL");
        -: 2027:    APPEND_STAT("ssl_ca_cert", "%s", settings.ssl_ca_cert ? settings.ssl_ca_cert : "NULL");
        -: 2028:    APPEND_STAT("ssl_wbuf_size", "%u", settings.ssl_wbuf_size);
        -: 2029:    APPEND_STAT("ssl_session_cache", "%s", settings.ssl_session_cache ? "yes" : "no");
        -: 2030:    APPEND_STAT("ssl_kernel_tls", "%s", settings.ssl_kernel_tls ? "yes" : "no");
        -: 2031:    APPEND_STAT("ssl_min_version", "%s", ssl_proto_text(settings.ssl_min_version));
        -: 2032:#endif
        -: 2033:#ifdef PROXY
        -: 2034:    APPEND_STAT("proxy_enabled", "%s", settings.proxy_enabled ? "yes" : "no");
        -: 2035:    APPEND_STAT("proxy_uring_enabled", "%s", settings.proxy_uring ? "yes" : "no");
        -: 2036:#endif
       21: 2037:    APPEND_STAT("num_napi_ids", "%s", settings.num_napi_ids);
       21: 2038:    APPEND_STAT("memory_file", "%s", settings.memory_file);
       21: 2039:    APPEND_STAT("client_flags_size", "%d", sizeof(client_flags_t));
       21: 2040:}
        -: 2041:
     2182: 2042:static int nz_strcmp(int nzlength, const char *nz, const char *z) {
     2182: 2043:    int zlength=strlen(z);
     2182: 2044:    return (zlength == nzlength) && (strncmp(nz, z, zlength) == 0) ? 0 : -1;
        -: 2045:}
        -: 2046:
     5971: 2047:bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {
     5971: 2048:    bool ret = true;
        -: 2049:
     5971: 2050:    if (add_stats != NULL) {
     5971: 2051:        if (!stat_type) {
        -: 2052:            /* prepare general statistics for the engine */
     3817: 2053:            STATS_LOCK();
     3817: 2054:            APPEND_STAT("bytes", "%llu", (unsigned long long)stats_state.curr_bytes);
     3817: 2055:            APPEND_STAT("curr_items", "%llu", (unsigned long long)stats_state.curr_items);
     3817: 2056:            APPEND_STAT("total_items", "%llu", (unsigned long long)stats.total_items);
     3817: 2057:            STATS_UNLOCK();
     3817: 2058:            APPEND_STAT("slab_global_page_pool", "%u", global_page_pool_size(NULL));
     3817: 2059:            item_stats_totals(add_stats, c);
     2154: 2060:        } else if (nz_strcmp(nkey, stat_type, "items") == 0) {
     2126: 2061:            item_stats(add_stats, c);
       28: 2062:        } else if (nz_strcmp(nkey, stat_type, "slabs") == 0) {
       28: 2063:            slabs_stats(add_stats, c);
    #####: 2064:        } else if (nz_strcmp(nkey, stat_type, "sizes") == 0) {
    #####: 2065:            item_stats_sizes(add_stats, c);
        -: 2066:        } else {
        -: 2067:            ret = false;
        -: 2068:        }
        -: 2069:    } else {
        -: 2070:        ret = false;
        -: 2071:    }
        -: 2072:
     5971: 2073:    return ret;
        -: 2074:}
        -: 2075:
       24: 2076:static inline void get_conn_text(const conn *c, const int af,
        -: 2077:                char* addr, struct sockaddr *sock_addr) {
       24: 2078:    char addr_text[MAXPATHLEN];
       24: 2079:    addr_text[0] = '\0';
       24: 2080:    const char *protoname = "?";
       24: 2081:    unsigned short port = 0;
        -: 2082:
       24: 2083:    switch (af) {
        9: 2084:        case AF_INET:
        9: 2085:            (void) inet_ntop(af,
        9: 2086:                    &((struct sockaddr_in *)sock_addr)->sin_addr,
        -: 2087:                    addr_text,
        -: 2088:                    sizeof(addr_text) - 1);
        9: 2089:            port = ntohs(((struct sockaddr_in *)sock_addr)->sin_port);
        9: 2090:            protoname = IS_UDP(c->transport) ? "udp" : "tcp";
        -: 2091:            break;
        -: 2092:
    #####: 2093:        case AF_INET6:
    #####: 2094:            addr_text[0] = '[';
    #####: 2095:            addr_text[1] = '\0';
    #####: 2096:            if (inet_ntop(af,
    #####: 2097:                    &((struct sockaddr_in6 *)sock_addr)->sin6_addr,
        -: 2098:                    addr_text + 1,
        -: 2099:                    sizeof(addr_text) - 2)) {
    #####: 2100:                strncat(addr_text, "]", 2);
        -: 2101:            }
    #####: 2102:            port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);
    #####: 2103:            protoname = IS_UDP(c->transport) ? "udp6" : "tcp6";
        -: 2104:            break;
        -: 2105:
        -: 2106:#ifndef DISABLE_UNIX_SOCKET
        -: 2107:        case AF_UNIX:
        -: 2108:        {
        9: 2109:            size_t pathlen = 0;
        -: 2110:            // this strncpy call originally could piss off an address
        -: 2111:            // sanitizer; we supplied the size of the dest buf as a limiter,
        -: 2112:            // but optimized versions of strncpy could read past the end of
        -: 2113:            // *src while looking for a null terminator. Since buf and
        -: 2114:            // sun_path here are both on the stack they could even overlap,
        -: 2115:            // which is "undefined". In all OSS versions of strncpy I could
        -: 2116:            // find this has no effect; it'll still only copy until the first null
        -: 2117:            // terminator is found. Thus it's possible to get the OS to
        -: 2118:            // examine past the end of sun_path but it's unclear to me if this
        -: 2119:            // can cause any actual problem.
        -: 2120:            //
        -: 2121:            // We need a safe_strncpy util function but I'll punt on figuring
        -: 2122:            // that out for now.
        9: 2123:            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
        9: 2124:            if (MAXPATHLEN <= pathlen) {
        -: 2125:                pathlen = MAXPATHLEN - 1;
        -: 2126:            }
        9: 2127:            strncpy(addr_text,
        9: 2128:                    ((struct sockaddr_un *)sock_addr)->sun_path,
        -: 2129:                    pathlen);
        9: 2130:            addr_text[pathlen] = '\0';
        9: 2131:            protoname = "unix";
        -: 2132:        }
        9: 2133:            break;
        -: 2134:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 2135:    }
        -: 2136:
       24: 2137:    if (strlen(addr_text) < 2) {
        -: 2138:        /* Most likely this is a connected UNIX-domain client which
        -: 2139:         * has no peer socket address, but there's no portable way
        -: 2140:         * to tell for sure.
        -: 2141:         */
        6: 2142:        snprintf(addr_text, MAXPATHLEN, "<AF %d>", af);
        -: 2143:    }
        -: 2144:
       24: 2145:    if (port) {
        9: 2146:        snprintf(addr, MAXPATHLEN + 11, "%s:%s:%u", protoname, addr_text, port);
        -: 2147:    } else {
       15: 2148:        snprintf(addr, MAXPATHLEN + 11, "%s:%s", protoname, addr_text);
        -: 2149:    }
       24: 2150:}
        -: 2151:
       16: 2152:static void conn_to_str(const conn *c, char *addr, char *svr_addr) {
       16: 2153:    if (!c) {
    #####: 2154:        memcpy(addr, "<null>", 6);
       16: 2155:    } else if (c->state == conn_closed) {
    #####: 2156:        memcpy(addr, "<closed>", 8);
        -: 2157:    } else {
       16: 2158:        struct sockaddr_in6 local_addr;
       16: 2159:        struct sockaddr *sock_addr = (void *)&c->request_addr;
        -: 2160:
        -: 2161:        /* For listen ports and idle UDP ports, show listen address */
       16: 2162:        if (c->state == conn_listening ||
       12: 2163:                (IS_UDP(c->transport) &&
        -: 2164:                 c->state == conn_read)) {
        8: 2165:            memset(&local_addr, 0, sizeof(local_addr));
        8: 2166:            socklen_t local_addr_len = sizeof(local_addr);
        -: 2167:
        8: 2168:            if (getsockname(c->sfd,
        -: 2169:                        (struct sockaddr *)&local_addr,
        -: 2170:                        &local_addr_len) == 0) {
        8: 2171:                sock_addr = (struct sockaddr *)&local_addr;
        -: 2172:            }
        -: 2173:        }
       16: 2174:        get_conn_text(c, sock_addr->sa_family, addr, sock_addr);
        -: 2175:
       16: 2176:        if (c->state != conn_listening && !(IS_UDP(c->transport) &&
        -: 2177:                 c->state == conn_read)) {
        8: 2178:            struct sockaddr_storage svr_sock_addr;
        8: 2179:            memset(&svr_sock_addr, 0, sizeof(svr_sock_addr));
        8: 2180:            socklen_t svr_addr_len = sizeof(svr_sock_addr);
        8: 2181:            getsockname(c->sfd, (struct sockaddr *)&svr_sock_addr, &svr_addr_len);
        8: 2182:            get_conn_text(c, svr_sock_addr.ss_family, svr_addr, (struct sockaddr *)&svr_sock_addr);
        -: 2183:        }
        -: 2184:    }
       16: 2185:}
        -: 2186:
    #####: 2187:static char *conn_queue_to_str(const conn *c, io_queue_t *q) {
    #####: 2188:    if (q->type == IO_QUEUE_EXTSTORE) {
        -: 2189:        return "queue_extstore";
    #####: 2190:    } else if (q->type == IO_QUEUE_PROXY) {
        -: 2191:        return "queue_proxy";
        -: 2192:    } else {
    #####: 2193:        return "queue_unknown";
        -: 2194:    }
        -: 2195:}
        -: 2196:
        4: 2197:void process_stats_conns(ADD_STAT add_stats, void *c) {
        4: 2198:    int i;
        4: 2199:    char key_str[STAT_KEY_LEN];
        4: 2200:    char val_str[STAT_VAL_LEN];
        4: 2201:    size_t extras_len = sizeof(":unix:") + sizeof("65535");
        4: 2202:    char addr[MAXPATHLEN + extras_len];
        4: 2203:    char svr_addr[MAXPATHLEN + extras_len];
        4: 2204:    memset(addr, 0, sizeof(addr));
        4: 2205:    memset(svr_addr, 0, sizeof(svr_addr));
        4: 2206:    int klen = 0, vlen = 0;
        -: 2207:
       4*: 2208:    assert(add_stats);
        -: 2209:
     4100: 2210:    for (i = 0; i < max_fds; i++) {
     4096: 2211:        if (conns[i]) {
        -: 2212:            /* This is safe to do unlocked because conns are never freed; the
        -: 2213:             * worst that'll happen will be a minor inconsistency in the
        -: 2214:             * output -- not worth the complexity of the locking that'd be
        -: 2215:             * required to prevent it.
        -: 2216:             */
       16: 2217:            if (IS_UDP(conns[i]->transport)) {
        4: 2218:                APPEND_NUM_STAT(i, "UDP", "%s", "UDP");
        -: 2219:            }
       16: 2220:            if (conns[i]->state != conn_closed) {
       16: 2221:                conn *sc = conns[i];
       16: 2222:                conn_to_str(sc, addr, svr_addr);
        -: 2223:
       16: 2224:                APPEND_NUM_STAT(i, "addr", "%s", addr);
       16: 2225:                if (sc->state != conn_listening &&
       12: 2226:                    !(IS_UDP(sc->transport) && sc->state == conn_read)) {
        8: 2227:                    APPEND_NUM_STAT(i, "listen_addr", "%s", svr_addr);
        -: 2228:                }
       16: 2229:                APPEND_NUM_STAT(i, "state", "%s",
       16: 2230:                        state_text(sc->state));
       16: 2231:                if (sc->io_queues_submitted) {
    #####: 2232:                    APPEND_NUM_STAT(i, "queues_waiting", "%d", sc->io_queues_submitted);
    #####: 2233:                    for (io_queue_t *q = sc->io_queues; q->type != IO_QUEUE_NONE; q++) {
    #####: 2234:                        if (q->count) {
    #####: 2235:                            const char *qname = conn_queue_to_str(sc, q);
    #####: 2236:                            APPEND_NUM_STAT(i, qname, "%d", q->count);
        -: 2237:                        }
        -: 2238:                    }
        -: 2239:                }
       16: 2240:                APPEND_NUM_STAT(i, "secs_since_last_cmd", "%d",
     4096: 2241:                        current_time - sc->last_cmd_time);
        -: 2242:            }
        -: 2243:        }
        -: 2244:    }
        4: 2245:}
        -: 2246:
        -: 2247:#define IT_REFCOUNT_LIMIT 60000
   135222: 2248:item* limited_get(const char *key, size_t nkey, LIBEVENT_THREAD *t, uint32_t exptime, bool should_touch, bool do_update, bool *overflow) {
   135222: 2249:    item *it;
   135222: 2250:    if (should_touch) {
        8: 2251:        it = item_touch(key, nkey, exptime, t);
        -: 2252:    } else {
   135214: 2253:        it = item_get(key, nkey, t, do_update);
        -: 2254:    }
   135222: 2255:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2256:        item_remove(it);
    #####: 2257:        it = NULL;
    #####: 2258:        *overflow = true;
        -: 2259:    } else {
   135222: 2260:        *overflow = false;
        -: 2261:    }
   135222: 2262:    return it;
        -: 2263:}
        -: 2264:
        -: 2265:// Semantics are different than limited_get; since the item is returned
        -: 2266:// locked, caller can directly change what it needs.
        -: 2267:// though it might eventually be a better interface to sink it all into
        -: 2268:// items.c.
       15: 2269:item* limited_get_locked(const char *key, size_t nkey, LIBEVENT_THREAD *t, bool do_update, uint32_t *hv, bool *overflow) {
       15: 2270:    item *it;
       15: 2271:    it = item_get_locked(key, nkey, t, do_update, hv);
       15: 2272:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2273:        do_item_remove(it);
    #####: 2274:        it = NULL;
    #####: 2275:        item_unlock(*hv);
    #####: 2276:        *overflow = true;
        -: 2277:    } else {
       15: 2278:        *overflow = false;
        -: 2279:    }
       15: 2280:    return it;
        -: 2281:}
        -: 2282:
        -: 2283:/*
        -: 2284: * adds a delta value to a numeric item.
        -: 2285: *
        -: 2286: * c     connection requesting the operation
        -: 2287: * it    item to adjust
        -: 2288: * incr  true to increment value, false to decrement
        -: 2289: * delta amount to adjust value by
        -: 2290: * buf   buffer for response string
        -: 2291: *
        -: 2292: * returns a response string to send back to the client.
        -: 2293: */
      398: 2294:enum delta_result_type do_add_delta(LIBEVENT_THREAD *t, const char *key, const size_t nkey,
        -: 2295:                                    const bool incr, const int64_t delta,
        -: 2296:                                    char *buf, uint64_t *cas,
        -: 2297:                                    const uint32_t hv,
        -: 2298:                                    item **it_ret) {
      398: 2299:    char *ptr;
      398: 2300:    uint64_t value;
      398: 2301:    int res;
      398: 2302:    item *it;
        -: 2303:
      398: 2304:    it = do_item_get(key, nkey, hv, t, DONT_UPDATE);
      398: 2305:    if (!it) {
        -: 2306:        return DELTA_ITEM_NOT_FOUND;
        -: 2307:    }
        -: 2308:
        -: 2309:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2310:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2311:#ifdef EXTSTORE
      341: 2312:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2313:#else
        -: 2314:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2315:#endif
        1: 2316:        do_item_remove(it);
        1: 2317:        return NON_NUMERIC;
        -: 2318:    }
        -: 2319:
      340: 2320:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
        1: 2321:        do_item_remove(it);
        1: 2322:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2323:    }
        -: 2324:
      339: 2325:    ptr = ITEM_data(it);
        -: 2326:
      339: 2327:    if (!safe_strtoull(ptr, &value)) {
        6: 2328:        do_item_remove(it);
        6: 2329:        return NON_NUMERIC;
        -: 2330:    }
        -: 2331:
      333: 2332:    if (incr) {
      299: 2333:        value += delta;
        -: 2334:        //MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2335:    } else {
       34: 2336:        if(delta > value) {
        5: 2337:            value = 0;
        -: 2338:        } else {
       29: 2339:            value -= delta;
        -: 2340:        }
        -: 2341:        //MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2342:    }
        -: 2343:
      333: 2344:    pthread_mutex_lock(&t->stats.mutex);
      333: 2345:    if (incr) {
      299: 2346:        t->stats.slab_stats[ITEM_clsid(it)].incr_hits++;
        -: 2347:    } else {
       34: 2348:        t->stats.slab_stats[ITEM_clsid(it)].decr_hits++;
        -: 2349:    }
      333: 2350:    pthread_mutex_unlock(&t->stats.mutex);
        -: 2351:
      333: 2352:    itoa_u64(value, buf);
      333: 2353:    res = strlen(buf);
        -: 2354:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2355:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2356:     * increase. */
      333: 2357:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2358:        /* When changing the value without replacing the item, we
        -: 2359:           need to update the CAS on the existing item. */
        -: 2360:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2361:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2362:         * whether to remove an item or not. */
       79: 2363:        item_stats_sizes_remove(it);
       79: 2364:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
       79: 2365:        item_stats_sizes_add(it);
       79: 2366:        memcpy(ITEM_data(it), buf, res);
       79: 2367:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
       79: 2368:        do_item_update(it);
      254: 2369:    } else if (it->refcount > 1) {
      254: 2370:        item *new_it;
      254: 2371:        client_flags_t flags;
     254*: 2372:        FLAGS_CONV(it, flags);
      254: 2373:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
      254: 2374:        if (new_it == 0) {
    #####: 2375:            do_item_remove(it);
    #####: 2376:            return EOM;
        -: 2377:        }
      254: 2378:        memcpy(ITEM_data(new_it), buf, res);
      254: 2379:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
      254: 2380:        item_replace(it, new_it, hv, (settings.use_cas) ? get_cas_id() : 0);
        -: 2381:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2382:        // returning the CAS of the old item below.
      254: 2383:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
      254: 2384:        do_item_remove(new_it);       /* release our reference */
        -: 2385:    } else {
        -: 2386:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2387:         * item. TODO: Add a counter? */
    #####: 2388:        if (settings.verbose) {
    #####: 2389:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2390:        }
    #####: 2391:        if (it->refcount == 1)
    #####: 2392:            do_item_remove(it);
    #####: 2393:        return DELTA_ITEM_NOT_FOUND;
        -: 2394:    }
        -: 2395:
      333: 2396:    if (cas) {
       66: 2397:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2398:    }
      333: 2399:    if (it_ret != NULL) {
       10: 2400:        *it_ret = it;
        -: 2401:    } else {
      323: 2402:        do_item_remove(it);         /* release our reference */
        -: 2403:    }
        -: 2404:    return OK;
        -: 2405:}
        -: 2406:
      129: 2407:static int try_read_command_negotiate(conn *c) {
     129*: 2408:    assert(c != NULL);
     129*: 2409:    assert(c->protocol == negotiating_prot);
     129*: 2410:    assert(c->rcurr <= (c->rbuf + c->rsize));
     129*: 2411:    assert(c->rbytes > 0);
        -: 2412:
      129: 2413:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        9: 2414:        c->protocol = binary_prot;
        9: 2415:        c->try_read_command = try_read_command_binary;
        -: 2416:    } else {
        -: 2417:        // authentication doesn't work with negotiated protocol.
      120: 2418:        c->protocol = ascii_prot;
      120: 2419:        c->try_read_command = try_read_command_ascii;
        -: 2420:    }
        -: 2421:
      129: 2422:    if (settings.verbose > 1) {
    #####: 2423:        fprintf(stderr, "%d: Client using the %s protocol\n", c->sfd,
        -: 2424:                prot_text(c->protocol));
        -: 2425:    }
        -: 2426:
      129: 2427:    return c->try_read_command(c);
        -: 2428:}
        -: 2429:
       18: 2430:static int try_read_command_udp(conn *c) {
      18*: 2431:    assert(c != NULL);
      18*: 2432:    assert(c->rcurr <= (c->rbuf + c->rsize));
      18*: 2433:    assert(c->rbytes > 0);
        -: 2434:
       18: 2435:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        7: 2436:        c->protocol = binary_prot;
        7: 2437:        return try_read_command_binary(c);
        -: 2438:    } else {
       11: 2439:        c->protocol = ascii_prot;
       11: 2440:        return try_read_command_ascii(c);
        -: 2441:    }
        -: 2442:}
        -: 2443:
        -: 2444:/*
        -: 2445: * read a UDP request.
        -: 2446: */
       54: 2447:static enum try_read_result try_read_udp(conn *c) {
       54: 2448:    int res;
        -: 2449:
      54*: 2450:    assert(c != NULL);
        -: 2451:
       54: 2452:    c->request_addr_size = sizeof(c->request_addr);
      108: 2453:    res = recvfrom(c->sfd, c->rbuf, c->rsize,
       54: 2454:                   0, (struct sockaddr *)&c->request_addr,
        -: 2455:                   &c->request_addr_size);
       54: 2456:    if (res > 8) {
       18: 2457:        unsigned char *buf = (unsigned char *)c->rbuf;
       18: 2458:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 2459:        c->thread->stats.bytes_read += res;
       18: 2460:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2461:
        -: 2462:        /* Beginning of UDP packet is the request ID; save it. */
       18: 2463:        c->request_id = buf[0] * 256 + buf[1];
        -: 2464:
        -: 2465:        /* If this is a multi-packet request, drop it. */
       18: 2466:        if (buf[4] != 0 || buf[5] != 1) {
        -: 2467:            return READ_NO_DATA_RECEIVED;
        -: 2468:        }
        -: 2469:
        -: 2470:        /* Don't care about any of the rest of the header. */
       18: 2471:        res -= 8;
       18: 2472:        memmove(c->rbuf, c->rbuf + 8, res);
        -: 2473:
       18: 2474:        c->rbytes = res;
       18: 2475:        c->rcurr = c->rbuf;
       18: 2476:        return READ_DATA_RECEIVED;
        -: 2477:    }
        -: 2478:    return READ_NO_DATA_RECEIVED;
        -: 2479:}
        -: 2480:
        -: 2481:/*
        -: 2482: * read from network as much as we can, handle buffer overflow and connection
        -: 2483: * close.
        -: 2484: * before reading, move the remaining incomplete fragment of a command
        -: 2485: * (if any) to the beginning of the buffer.
        -: 2486: *
        -: 2487: * To protect us from someone flooding a connection with bogus data causing
        -: 2488: * the connection to eat up all available memory, break out and start looking
        -: 2489: * at the data I've got after a number of reallocs...
        -: 2490: *
        -: 2491: * @return enum try_read_result
        -: 2492: */
   491019: 2493:static enum try_read_result try_read_network(conn *c) {
   491019: 2494:    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;
   491019: 2495:    int res;
   491019: 2496:    int num_allocs = 0;
  491019*: 2497:    assert(c != NULL);
        -: 2498:
   491019: 2499:    if (c->rcurr != c->rbuf) {
     3722: 2500:        if (c->rbytes > 0) /* otherwise there's nothing to copy */
     3722: 2501:            memmove(c->rbuf, c->rcurr, c->rbytes);
     3722: 2502:        c->rcurr = c->rbuf;
        -: 2503:    }
        -: 2504:
   491022: 2505:    while (1) {
        -: 2506:        // TODO: move to rbuf_* func?
   491022: 2507:        if (c->rbytes >= c->rsize && c->rbuf_malloced) {
        3: 2508:            if (num_allocs == 4) {
    #####: 2509:                return gotdata;
        -: 2510:            }
        3: 2511:            ++num_allocs;
        3: 2512:            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);
        3: 2513:            if (!new_rbuf) {
    #####: 2514:                STATS_LOCK();
    #####: 2515:                stats.malloc_fails++;
    #####: 2516:                STATS_UNLOCK();
    #####: 2517:                if (settings.verbose > 0) {
    #####: 2518:                    fprintf(stderr, "Couldn't realloc input buffer\n");
        -: 2519:                }
    #####: 2520:                c->rbytes = 0; /* ignore what we read */
    #####: 2521:                out_of_memory(c, "SERVER_ERROR out of memory reading request");
    #####: 2522:                c->close_after_write = true;
    #####: 2523:                return READ_MEMORY_ERROR;
        -: 2524:            }
        3: 2525:            c->rcurr = c->rbuf = new_rbuf;
        3: 2526:            c->rsize *= 2;
        -: 2527:        }
        -: 2528:
   491022: 2529:        int avail = c->rsize - c->rbytes;
   491022: 2530:        res = c->read(c, c->rbuf + c->rbytes, avail);
   491022: 2531:        if (res > 0) {
   488926: 2532:            pthread_mutex_lock(&c->thread->stats.mutex);
   488926: 2533:            c->thread->stats.bytes_read += res;
   488926: 2534:            pthread_mutex_unlock(&c->thread->stats.mutex);
   488926: 2535:            gotdata = READ_DATA_RECEIVED;
   488926: 2536:            c->rbytes += res;
   488926: 2537:            if (res == avail && c->rbuf_malloced) {
        -: 2538:                // Resize rbuf and try a few times if huge ascii multiget.
        3: 2539:                continue;
        -: 2540:            } else {
        -: 2541:                break;
        -: 2542:            }
        -: 2543:        }
     2096: 2544:        if (res == 0) {
     2095: 2545:            c->close_reason = NORMAL_CLOSE;
     2095: 2546:            return READ_ERROR;
        -: 2547:        }
        1: 2548:        if (res == -1) {
        1: 2549:            if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 2550:                break;
        -: 2551:            }
        -: 2552:            return READ_ERROR;
        -: 2553:        }
        -: 2554:    }
        -: 2555:    return gotdata;
        -: 2556:}
        -: 2557:
   511837: 2558:static bool update_event(conn *c, const int new_flags) {
  511837*: 2559:    assert(c != NULL);
        -: 2560:
   511837: 2561:    struct event_base *base = c->event.ev_base;
   511837: 2562:    if (c->ev_flags == new_flags)
        -: 2563:        return true;
     1642: 2564:    if (event_del(&c->event) == -1) return false;
     1642: 2565:    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);
     1642: 2566:    event_base_set(base, &c->event);
     1642: 2567:    c->ev_flags = new_flags;
     1642: 2568:    if (event_add(&c->event, 0) == -1) return false;
        -: 2569:    return true;
        -: 2570:}
        -: 2571:
        -: 2572:/*
        -: 2573: * Sets whether we are listening for new connections or not.
        -: 2574: */
    #####: 2575:void do_accept_new_conns(const bool do_accept) {
    #####: 2576:    conn *next;
        -: 2577:
    #####: 2578:    for (next = listen_conn; next; next = next->next) {
    #####: 2579:        if (do_accept) {
    #####: 2580:            update_event(next, EV_READ | EV_PERSIST);
    #####: 2581:            if (listen(next->sfd, settings.backlog) != 0) {
    #####: 2582:                perror("listen");
        -: 2583:            }
        -: 2584:        }
        -: 2585:        else {
    #####: 2586:            update_event(next, 0);
    #####: 2587:            if (listen(next->sfd, 0) != 0) {
    #####: 2588:                perror("listen");
        -: 2589:            }
        -: 2590:        }
        -: 2591:    }
        -: 2592:
    #####: 2593:    if (do_accept) {
    #####: 2594:        struct timeval maxconns_exited;
    #####: 2595:        uint64_t elapsed_us;
    #####: 2596:        gettimeofday(&maxconns_exited,NULL);
    #####: 2597:        STATS_LOCK();
    #####: 2598:        elapsed_us =
    #####: 2599:            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000
    #####: 2600:            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);
    #####: 2601:        stats.time_in_listen_disabled_us += elapsed_us;
    #####: 2602:        stats_state.accepting_conns = true;
    #####: 2603:        STATS_UNLOCK();
        -: 2604:    } else {
    #####: 2605:        STATS_LOCK();
    #####: 2606:        stats_state.accepting_conns = false;
    #####: 2607:        gettimeofday(&stats.maxconns_entered,NULL);
    #####: 2608:        stats.listen_disabled_num++;
    #####: 2609:        STATS_UNLOCK();
    #####: 2610:        allow_new_conns = false;
    #####: 2611:        maxconns_handler(-42, 0, 0);
        -: 2612:    }
    #####: 2613:}
        -: 2614:
        -: 2615:#define TRANSMIT_ONE_RESP true
        -: 2616:#define TRANSMIT_ALL_RESP false
   497821: 2617:static int _transmit_pre(conn *c, struct iovec *iovs, int iovused, bool one_resp) {
   497821: 2618:    mc_resp *resp = c->resp_head;
  1153399: 2619:    while (resp && iovused + resp->iovcnt < IOV_MAX-1) {
   655610: 2620:        if (resp->skip) {
        -: 2621:            // Don't actually unchain the resp obj here since it's singly-linked.
        -: 2622:            // Just let the post function handle it linearly.
   193661: 2623:            resp = resp->next;
   193661: 2624:            continue;
        -: 2625:        }
   461949: 2626:        if (resp->chunked_data_iov) {
        -: 2627:            // Handle chunked items specially.
        -: 2628:            // They spend much more time in send so we can be a bit wasteful
        -: 2629:            // in rebuilding iovecs for them.
    19358: 2630:            item_chunk *ch = (item_chunk *)ITEM_schunk((item *)resp->iov[resp->chunked_data_iov].iov_base);
    19358: 2631:            int x;
    77432: 2632:            for (x = 0; x < resp->iovcnt; x++) {
        -: 2633:                // This iov is tracking how far we've copied so far.
    58074: 2634:                if (x == resp->chunked_data_iov) {
    19358: 2635:                    int done = resp->chunked_total - resp->iov[x].iov_len;
        -: 2636:                    // Start from the len to allow binprot to cut the \r\n
    19358: 2637:                    int todo = resp->iov[x].iov_len;
   157209: 2638:                    while (ch && todo > 0 && iovused < IOV_MAX-1) {
   137851: 2639:                        int skip = 0;
   137851: 2640:                        if (!ch->used) {
    32876: 2641:                            ch = ch->next;
    32876: 2642:                            continue;
        -: 2643:                        }
        -: 2644:                        // Skip parts we've already sent.
   104975: 2645:                        if (done >= ch->used) {
     4345: 2646:                            done -= ch->used;
     4345: 2647:                            ch = ch->next;
     4345: 2648:                            continue;
   100630: 2649:                        } else if (done) {
        -: 2650:                            skip = done;
        -: 2651:                            done = 0;
        -: 2652:                        }
   100630: 2653:                        iovs[iovused].iov_base = ch->data + skip;
        -: 2654:                        // Stupid binary protocol makes this go negative.
   100630: 2655:                        iovs[iovused].iov_len = ch->used - skip > todo ? todo : ch->used - skip;
   100630: 2656:                        iovused++;
   100630: 2657:                        todo -= ch->used - skip;
   100630: 2658:                        ch = ch->next;
        -: 2659:                    }
        -: 2660:                } else {
    38716: 2661:                    iovs[iovused].iov_base = resp->iov[x].iov_base;
    38716: 2662:                    iovs[iovused].iov_len = resp->iov[x].iov_len;
    38716: 2663:                    iovused++;
        -: 2664:                }
    58074: 2665:                if (iovused >= IOV_MAX-1)
        -: 2666:                    break;
        -: 2667:            }
        -: 2668:        } else {
   442591: 2669:            memcpy(&iovs[iovused], resp->iov, sizeof(struct iovec)*resp->iovcnt);
   442591: 2670:            iovused += resp->iovcnt;
        -: 2671:        }
        -: 2672:
        -: 2673:        // done looking at first response, walk down the chain.
   461949: 2674:        resp = resp->next;
        -: 2675:        // used for UDP mode: UDP cannot send multiple responses per packet.
   461949: 2676:        if (one_resp)
        -: 2677:            break;
        -: 2678:    }
   497821: 2679:    return iovused;
        -: 2680:}
        -: 2681:
        -: 2682:/*
        -: 2683: * Decrements and completes responses based on how much data was transmitted.
        -: 2684: * Takes the connection and current result bytes.
        -: 2685: */
   497509: 2686:static void _transmit_post(conn *c, ssize_t res) {
        -: 2687:    // We've written some of the data. Remove the completed
        -: 2688:    // responses from the list of pending writes.
   497509: 2689:    mc_resp *resp = c->resp_head;
  1151413: 2690:    while (resp) {
   654276: 2691:        int x;
   654276: 2692:        if (resp->skip) {
   193661: 2693:            resp = resp_finish(c, resp);
   193661: 2694:            continue;
        -: 2695:        }
        -: 2696:
        -: 2697:        // fastpath check. all small responses should cut here.
   460615: 2698:        if (res >= resp->tosend) {
   460243: 2699:            res -= resp->tosend;
   460243: 2700:            resp = resp_finish(c, resp);
   460243: 2701:            continue;
        -: 2702:        }
        -: 2703:
        -: 2704:        // it's fine to re-check iov's that were zeroed out before.
      824: 2705:        for (x = 0; x < resp->iovcnt; x++) {
      824: 2706:            struct iovec *iov = &resp->iov[x];
      824: 2707:            if (res >= iov->iov_len) {
      452: 2708:                resp->tosend -= iov->iov_len;
      452: 2709:                res -= iov->iov_len;
      452: 2710:                iov->iov_len = 0;
        -: 2711:            } else {
        -: 2712:                // Dumb special case for chunked items. Currently tracking
        -: 2713:                // where to inject the chunked item via iov_base.
        -: 2714:                // Extra not-great since chunked items can't be the first
        -: 2715:                // index, so we have to check for non-zero c_d_iov first.
      372: 2716:                if (!resp->chunked_data_iov || x != resp->chunked_data_iov) {
      171: 2717:                    iov->iov_base = (char *)iov->iov_base + res;
        -: 2718:                }
      372: 2719:                iov->iov_len -= res;
      372: 2720:                resp->tosend -= res;
      372: 2721:                res = 0;
      372: 2722:                break;
        -: 2723:            }
        -: 2724:        }
        -: 2725:
        -: 2726:        // are we done with this response object?
      372: 2727:        if (resp->tosend == 0) {
    #####: 2728:            resp = resp_finish(c, resp);
        -: 2729:        } else {
        -: 2730:            // Jammed up here. This is the new head.
        -: 2731:            break;
        -: 2732:        }
        -: 2733:    }
   497509: 2734:}
        -: 2735:
        -: 2736:/*
        -: 2737: * Transmit the next chunk of data from our list of msgbuf structures.
        -: 2738: *
        -: 2739: * Returns:
        -: 2740: *   TRANSMIT_COMPLETE   All done writing.
        -: 2741: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2742: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2743: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2744: */
   497789: 2745:static enum transmit_result transmit(conn *c) {
  497789*: 2746:    assert(c != NULL);
   497789: 2747:    struct iovec iovs[IOV_MAX];
   497789: 2748:    struct msghdr msg;
   497789: 2749:    int iovused = 0;
        -: 2750:
        -: 2751:    // init the msg.
   497789: 2752:    memset(&msg, 0, sizeof(struct msghdr));
   497789: 2753:    msg.msg_iov = iovs;
        -: 2754:
   497789: 2755:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ALL_RESP);
   497789: 2756:    if (iovused == 0) {
        -: 2757:        // Avoid the syscall if we're only handling a noreply.
        -: 2758:        // Return the response object.
    78096: 2759:        _transmit_post(c, 0);
    78096: 2760:        return TRANSMIT_COMPLETE;
        -: 2761:    }
        -: 2762:
        -: 2763:    // Alright, send.
   419693: 2764:    ssize_t res;
   419693: 2765:    msg.msg_iovlen = iovused;
   419693: 2766:    res = c->sendmsg(c, &msg, 0);
   419693: 2767:    if (res >= 0) {
   419381: 2768:        pthread_mutex_lock(&c->thread->stats.mutex);
   419381: 2769:        c->thread->stats.bytes_written += res;
   419381: 2770:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2771:
        -: 2772:        // Decrement any partial IOV's and complete any finished resp's.
   419381: 2773:        _transmit_post(c, res);
        -: 2774:
   419381: 2775:        if (c->resp_head) {
        -: 2776:            return TRANSMIT_INCOMPLETE;
        -: 2777:        } else {
        -: 2778:            return TRANSMIT_COMPLETE;
        -: 2779:        }
        -: 2780:    }
        -: 2781:
      312: 2782:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      310: 2783:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2784:            if (settings.verbose > 0)
    #####: 2785:                fprintf(stderr, "Couldn't update event\n");
    #####: 2786:            conn_set_state(c, conn_closing);
    #####: 2787:            return TRANSMIT_HARD_ERROR;
        -: 2788:        }
        -: 2789:        return TRANSMIT_SOFT_ERROR;
        -: 2790:    }
        -: 2791:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2792:       we have a real error, on which we close the connection */
        2: 2793:    if (settings.verbose > 0)
    #####: 2794:        perror("Failed to write, and not due to blocking");
        -: 2795:
        2: 2796:    conn_set_state(c, conn_closing);
        2: 2797:    return TRANSMIT_HARD_ERROR;
        -: 2798:}
        -: 2799:
       32: 2800:static void build_udp_header(unsigned char *hdr, mc_resp *resp) {
        -: 2801:    // We need to communicate the total number of packets
        -: 2802:    // If this isn't set, it's the first time this response is building a udp
        -: 2803:    // header, so "tosend" must be static.
       32: 2804:    if (!resp->udp_total) {
       18: 2805:        uint32_t total;
       18: 2806:        total = resp->tosend / UDP_DATA_SIZE;
       18: 2807:        if (resp->tosend % UDP_DATA_SIZE)
       18: 2808:            total++;
        -: 2809:        // The spec doesn't really say what we should do here. It's _probably_
        -: 2810:        // better to bail out?
       18: 2811:        if (total > USHRT_MAX) {
        -: 2812:            total = USHRT_MAX;
        -: 2813:        }
       18: 2814:        resp->udp_total = total;
        -: 2815:    }
        -: 2816:
        -: 2817:    // TODO: why wasn't this hto*'s and casts?
        -: 2818:    // this ends up sending UDP hdr data specifically in host byte order.
       32: 2819:    *hdr++ = resp->request_id / 256;
       32: 2820:    *hdr++ = resp->request_id % 256;
       32: 2821:    *hdr++ = resp->udp_sequence / 256;
       32: 2822:    *hdr++ = resp->udp_sequence % 256;
       32: 2823:    *hdr++ = resp->udp_total / 256;
       32: 2824:    *hdr++ = resp->udp_total % 256;
       32: 2825:    *hdr++ = 0;
       32: 2826:    *hdr++ = 0;
       32: 2827:    resp->udp_sequence++;
       32: 2828:}
        -: 2829:
        -: 2830:/*
        -: 2831: * UDP specific transmit function. Uses its own function rather than check
        -: 2832: * IS_UDP() five times. If we ever implement sendmmsg or similar support they
        -: 2833: * will diverge even more.
        -: 2834: * Does not use TLS.
        -: 2835: *
        -: 2836: * Returns:
        -: 2837: *   TRANSMIT_COMPLETE   All done writing.
        -: 2838: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2839: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2840: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2841: */
       32: 2842:static enum transmit_result transmit_udp(conn *c) {
      32*: 2843:    assert(c != NULL);
       32: 2844:    struct iovec iovs[IOV_MAX];
       32: 2845:    struct msghdr msg;
       32: 2846:    mc_resp *resp;
       32: 2847:    int iovused = 0;
       32: 2848:    unsigned char udp_hdr[UDP_HEADER_SIZE];
        -: 2849:
        -: 2850:    // We only send one UDP packet per call (ugh), so we can only operate on a
        -: 2851:    // single response at a time.
       32: 2852:    resp = c->resp_head;
        -: 2853:
       32: 2854:    if (!resp) {
        -: 2855:        return TRANSMIT_COMPLETE;
        -: 2856:    }
        -: 2857:
       32: 2858:    if (resp->skip) {
    #####: 2859:        resp = resp_finish(c, resp);
    #####: 2860:        return TRANSMIT_INCOMPLETE;
        -: 2861:    }
        -: 2862:
        -: 2863:    // clear the message and initialize it.
       32: 2864:    memset(&msg, 0, sizeof(struct msghdr));
       32: 2865:    msg.msg_iov = iovs;
        -: 2866:
        -: 2867:    // the UDP source to return to.
       32: 2868:    msg.msg_name = &resp->request_addr;
       32: 2869:    msg.msg_namelen = resp->request_addr_size;
        -: 2870:
        -: 2871:    // First IOV is the custom UDP header.
       32: 2872:    iovs[0].iov_base = (void *)udp_hdr;
       32: 2873:    iovs[0].iov_len = UDP_HEADER_SIZE;
       32: 2874:    build_udp_header(udp_hdr, resp);
       32: 2875:    iovused++;
        -: 2876:
        -: 2877:    // Fill the IOV's the standard way.
        -: 2878:    // TODO: might get a small speedup if we let it break early with a length
        -: 2879:    // limit.
       32: 2880:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ONE_RESP);
        -: 2881:
        -: 2882:    // Clip the IOV's to the max UDP packet size.
        -: 2883:    // If we add support for send_mmsg, this can be where we split msg's.
        -: 2884:    {
       32: 2885:        int x = 0;
       32: 2886:        int len = 0;
      143: 2887:        for (x = 0; x < iovused; x++) {
       93: 2888:            if (len + iovs[x].iov_len >= UDP_MAX_PAYLOAD_SIZE) {
       14: 2889:                iovs[x].iov_len = UDP_MAX_PAYLOAD_SIZE - len;
       14: 2890:                x++;
       14: 2891:                break;
        -: 2892:            } else {
       79: 2893:                len += iovs[x].iov_len;
        -: 2894:            }
        -: 2895:        }
       32: 2896:        iovused = x;
        -: 2897:    }
        -: 2898:
       32: 2899:    ssize_t res;
       32: 2900:    msg.msg_iovlen = iovused;
        -: 2901:    // NOTE: uses system sendmsg since we have no support for indirect UDP.
       32: 2902:    res = sendmsg(c->sfd, &msg, 0);
       32: 2903:    if (res >= 0) {
       32: 2904:        pthread_mutex_lock(&c->thread->stats.mutex);
       32: 2905:        c->thread->stats.bytes_written += res;
       32: 2906:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2907:
        -: 2908:        // Ignore the header size from forwarding the IOV's
       32: 2909:        res -= UDP_HEADER_SIZE;
        -: 2910:
        -: 2911:        // Decrement any partial IOV's and complete any finished resp's.
       32: 2912:        _transmit_post(c, res);
        -: 2913:
       32: 2914:        if (c->resp_head) {
        -: 2915:            return TRANSMIT_INCOMPLETE;
        -: 2916:        } else {
        -: 2917:            return TRANSMIT_COMPLETE;
        -: 2918:        }
        -: 2919:    }
        -: 2920:
    #####: 2921:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    #####: 2922:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2923:            if (settings.verbose > 0)
    #####: 2924:                fprintf(stderr, "Couldn't update event\n");
    #####: 2925:            conn_set_state(c, conn_closing);
    #####: 2926:            return TRANSMIT_HARD_ERROR;
        -: 2927:        }
        -: 2928:        return TRANSMIT_SOFT_ERROR;
        -: 2929:    }
        -: 2930:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2931:       we have a real error, on which we close the connection */
    #####: 2932:    if (settings.verbose > 0)
    #####: 2933:        perror("Failed to write, and not due to blocking");
        -: 2934:
    #####: 2935:    conn_set_state(c, conn_read);
    #####: 2936:    return TRANSMIT_HARD_ERROR;
        -: 2937:}
        -: 2938:
        -: 2939:
        -: 2940:/* Does a looped read to fill data chunks */
        -: 2941:/* TODO: restrict number of times this can loop.
        -: 2942: * Also, benchmark using readv's.
        -: 2943: */
    11821: 2944:static int read_into_chunked_item(conn *c) {
    11821: 2945:    int total = 0;
    11821: 2946:    int res;
   11821*: 2947:    assert(c->rcurr != c->ritem);
        -: 2948:
   105439: 2949:    while (c->rlbytes > 0) {
   100762: 2950:        item_chunk *ch = (item_chunk *)c->ritem;
   100762: 2951:        if (ch->size == ch->used) {
        -: 2952:            // FIXME: ch->next is currently always 0. remove this?
    41442: 2953:            if (ch->next) {
    #####: 2954:                c->ritem = (char *) ch->next;
        -: 2955:            } else {
        -: 2956:                /* Allocate next chunk. Binary protocol needs 2b for \r\n */
    41442: 2957:                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +
    41442: 2958:                       ((c->protocol == binary_prot) ? 2 : 0));
    41442: 2959:                if (!c->ritem) {
        -: 2960:                    // We failed an allocation. Let caller handle cleanup.
        -: 2961:                    total = -2;
        -: 2962:                    break;
        -: 2963:                }
        -: 2964:                // ritem has new chunk, restart the loop.
    41442: 2965:                continue;
        -: 2966:                //assert(c->rlbytes == 0);
        -: 2967:            }
        -: 2968:        }
        -: 2969:
    59320: 2970:        int unused = ch->size - ch->used;
        -: 2971:        /* first check if we have leftovers in the conn_read buffer */
    59320: 2972:        if (c->rbytes > 0) {
    17149: 2973:            total = 0;
    17149: 2974:            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
    17149: 2975:            tocopy = tocopy > unused ? unused : tocopy;
    17149: 2976:            if (c->ritem != c->rcurr) {
    17149: 2977:                memmove(ch->data + ch->used, c->rcurr, tocopy);
        -: 2978:            }
    17149: 2979:            total += tocopy;
    17149: 2980:            c->rlbytes -= tocopy;
    17149: 2981:            c->rcurr += tocopy;
    17149: 2982:            c->rbytes -= tocopy;
    17149: 2983:            ch->used += tocopy;
    17149: 2984:            if (c->rlbytes == 0) {
        -: 2985:                break;
        -: 2986:            }
        -: 2987:        } else {
        -: 2988:            /*  now try reading from the socket */
    84342: 2989:            res = c->read(c, ch->data + ch->used,
    42171: 2990:                    (unused > c->rlbytes ? c->rlbytes : unused));
    42171: 2991:            if (res > 0) {
    37794: 2992:                pthread_mutex_lock(&c->thread->stats.mutex);
    37794: 2993:                c->thread->stats.bytes_read += res;
    37794: 2994:                pthread_mutex_unlock(&c->thread->stats.mutex);
    37794: 2995:                ch->used += res;
    37794: 2996:                total += res;
    37794: 2997:                c->rlbytes -= res;
        -: 2998:            } else {
        -: 2999:                /* Reset total to the latest result so caller can handle it */
        -: 3000:                total = res;
        -: 3001:                break;
        -: 3002:            }
        -: 3003:        }
        -: 3004:    }
        -: 3005:
        -: 3006:    /* At some point I will be able to ditch the \r\n from item storage and
        -: 3007:       remove all of these kludges.
        -: 3008:       The above binprot check ensures inline space for \r\n, but if we do
        -: 3009:       exactly enough allocs there will be no additional chunk for \r\n.
        -: 3010:     */
    11821: 3011:    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {
      202: 3012:        item_chunk *ch = (item_chunk *)c->ritem;
      202: 3013:        if (ch->size - ch->used < 2) {
        2: 3014:            c->ritem = (char *) do_item_alloc_chunk(ch, 2);
        2: 3015:            if (!c->ritem) {
    11821: 3016:                total = -2;
        -: 3017:            }
        -: 3018:        }
        -: 3019:    }
    11821: 3020:    return total;
        -: 3021:}
        -: 3022:
   517782: 3023:static void drive_machine(conn *c) {
   517782: 3024:    bool stop = false;
   517782: 3025:    int sfd;
   517782: 3026:    socklen_t addrlen;
   517782: 3027:    struct sockaddr_storage addr;
   517782: 3028:    int nreqs = settings.reqs_per_event;
   517782: 3029:    int res;
   517782: 3030:    const char *str;
        -: 3031:#ifdef HAVE_ACCEPT4
   517782: 3032:    static int  use_accept4 = 1;
        -: 3033:#else
        -: 3034:    static int  use_accept4 = 0;
        -: 3035:#endif
        -: 3036:
  517782*: 3037:    assert(c != NULL);
        -: 3038:
  4404378: 3039:    while (!stop) {
        -: 3040:
  3886596: 3041:        switch(c->state) {
     2177: 3042:        case conn_listening:
     2177: 3043:            addrlen = sizeof(addr);
        -: 3044:#ifdef HAVE_ACCEPT4
     2177: 3045:            if (use_accept4) {
     2177: 3046:                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);
        -: 3047:            } else {
    #####: 3048:                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3049:            }
        -: 3050:#else
        -: 3051:            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3052:#endif
     2177: 3053:            if (sfd == -1) {
    #####: 3054:                if (use_accept4 && errno == ENOSYS) {
    #####: 3055:                    use_accept4 = 0;
    #####: 3056:                    continue;
        -: 3057:                }
    #####: 3058:                perror(use_accept4 ? "accept4()" : "accept()");
    #####: 3059:                if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 3060:                    /* these are transient, so don't log anything */
        -: 3061:                    stop = true;
    #####: 3062:                } else if (errno == EMFILE) {
    #####: 3063:                    if (settings.verbose > 0)
    #####: 3064:                        fprintf(stderr, "Too many open connections\n");
    #####: 3065:                    accept_new_conns(false);
    #####: 3066:                    stop = true;
        -: 3067:                } else {
    #####: 3068:                    perror("accept()");
    #####: 3069:                    stop = true;
        -: 3070:                }
        -: 3071:                break;
        -: 3072:            }
     2177: 3073:            if (!use_accept4) {
    #####: 3074:                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {
    #####: 3075:                    perror("setting O_NONBLOCK");
    #####: 3076:                    close(sfd);
    #####: 3077:                    break;
        -: 3078:                }
        -: 3079:            }
        -: 3080:
     2177: 3081:            bool reject;
     2177: 3082:            if (settings.maxconns_fast) {
     2168: 3083:                reject = sfd >= settings.maxconns - 1;
     2168: 3084:                if (reject) {
       43: 3085:                    STATS_LOCK();
       43: 3086:                    stats.rejected_conns++;
       43: 3087:                    STATS_UNLOCK();
        -: 3088:                }
        -: 3089:            } else {
        -: 3090:                reject = false;
        -: 3091:            }
        -: 3092:
     2168: 3093:            if (reject) {
       43: 3094:                str = "ERROR Too many open connections\r\n";
       43: 3095:                res = write(sfd, str, strlen(str));
       43: 3096:                close(sfd);
        -: 3097:            } else {
     2134: 3098:                void *ssl_v = NULL;
        -: 3099:#ifdef TLS
        -: 3100:                SSL *ssl = NULL;
        -: 3101:                if (c->ssl_enabled) {
        -: 3102:                    assert(IS_TCP(c->transport) && settings.ssl_enabled);
        -: 3103:
        -: 3104:                    if (settings.ssl_ctx == NULL) {
        -: 3105:                        if (settings.verbose) {
        -: 3106:                            fprintf(stderr, "SSL context is not initialized\n");
        -: 3107:                        }
        -: 3108:                        close(sfd);
        -: 3109:                        break;
        -: 3110:                    }
        -: 3111:                    SSL_LOCK();
        -: 3112:                    ssl = SSL_new(settings.ssl_ctx);
        -: 3113:                    SSL_UNLOCK();
        -: 3114:                    if (ssl == NULL) {
        -: 3115:                        if (settings.verbose) {
        -: 3116:                            fprintf(stderr, "Failed to created the SSL object\n");
        -: 3117:                        }
        -: 3118:                        close(sfd);
        -: 3119:                        break;
        -: 3120:                    }
        -: 3121:                    SSL_set_fd(ssl, sfd);
        -: 3122:                    int ret = SSL_accept(ssl);
        -: 3123:                    if (ret <= 0) {
        -: 3124:                        int err = SSL_get_error(ssl, ret);
        -: 3125:                        if (err == SSL_ERROR_SYSCALL || err == SSL_ERROR_SSL) {
        -: 3126:                            if (settings.verbose) {
        -: 3127:                                fprintf(stderr, "SSL connection failed with error code : %d : %s\n", err, strerror(errno));
        -: 3128:                            }
        -: 3129:                            SSL_free(ssl);
        -: 3130:                            close(sfd);
        -: 3131:                            STATS_LOCK();
        -: 3132:                            stats.ssl_handshake_errors++;
        -: 3133:                            STATS_UNLOCK();
        -: 3134:                            break;
        -: 3135:                        }
        -: 3136:                    }
        -: 3137:                }
        -: 3138:                ssl_v = (void*) ssl;
        -: 3139:#endif
        -: 3140:
     2134: 3141:                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,
        -: 3142:                                     READ_BUFFER_CACHED, c->transport, ssl_v, c->tag, c->protocol);
        -: 3143:            }
        -: 3144:
        -: 3145:            stop = true;
        -: 3146:            break;
        -: 3147:
   491076: 3148:        case conn_waiting:
   491076: 3149:            rbuf_release(c);
   491076: 3150:            if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3151:                if (settings.verbose > 0)
    #####: 3152:                    fprintf(stderr, "Couldn't update event\n");
    #####: 3153:                conn_set_state(c, conn_closing);
    #####: 3154:                break;
        -: 3155:            }
        -: 3156:
   491076: 3157:            conn_set_state(c, conn_read);
   491076: 3158:            stop = true;
   491076: 3159:            break;
        -: 3160:
   491073: 3161:        case conn_read:
   491073: 3162:            if (!IS_UDP(c->transport)) {
        -: 3163:                // Assign a read buffer if necessary.
   491019: 3164:                if (!rbuf_alloc(c)) {
        -: 3165:                    // TODO: Some way to allow for temporary failures.
    #####: 3166:                    conn_set_state(c, conn_closing);
    #####: 3167:                    break;
        -: 3168:                }
   491019: 3169:                res = try_read_network(c);
        -: 3170:            } else {
        -: 3171:                // UDP connections always have a static buffer.
       54: 3172:                res = try_read_udp(c);
        -: 3173:            }
        -: 3174:
   491073: 3175:            switch (res) {
       36: 3176:            case READ_NO_DATA_RECEIVED:
       36: 3177:                conn_set_state(c, conn_waiting);
       36: 3178:                break;
   488941: 3179:            case READ_DATA_RECEIVED:
   488941: 3180:                conn_set_state(c, conn_parse_cmd);
   488941: 3181:                break;
     2096: 3182:            case READ_ERROR:
     2096: 3183:                conn_set_state(c, conn_closing);
     2096: 3184:                break;
        -: 3185:            case READ_MEMORY_ERROR: /* Failed to allocate more memory */
        -: 3186:                /* State already set by try_read_network */
        -: 3187:                break;
        -: 3188:            }
        -: 3189:            break;
        -: 3190:
   641932: 3191:        case conn_parse_cmd:
   641932: 3192:            c->noreply = false;
   641932: 3193:            if (c->try_read_command(c) == 0) {
        -: 3194:                /* we need more data! */
     7403: 3195:                if (c->resp_head) {
        -: 3196:                    // Buffered responses waiting, flush in the meantime.
     3675: 3197:                    conn_set_state(c, conn_mwrite);
        -: 3198:                } else {
     3728: 3199:                    conn_set_state(c, conn_waiting);
        -: 3200:                }
        -: 3201:            }
        -: 3202:
        -: 3203:            break;
        -: 3204:
  1019936: 3205:        case conn_new_cmd:
        -: 3206:            /* Only process nreqs at a time to avoid starving other
        -: 3207:               connections */
        -: 3208:
  1019936: 3209:            --nreqs;
  1019936: 3210:            if (nreqs >= 0) {
  1010265: 3211:                reset_cmd_handler(c);
     9671: 3212:            } else if (c->resp_head) {
        -: 3213:                // flush response pipe on yield.
     4755: 3214:                conn_set_state(c, conn_mwrite);
        -: 3215:            } else {
     4916: 3216:                pthread_mutex_lock(&c->thread->stats.mutex);
     4916: 3217:                c->thread->stats.conn_yields++;
     4916: 3218:                pthread_mutex_unlock(&c->thread->stats.mutex);
     4916: 3219:                if (c->rbytes > 0) {
        -: 3220:                    /* We have already read in data into the input buffer,
        -: 3221:                       so libevent will most likely not signal read events
        -: 3222:                       on the socket (unless more data is available. As a
        -: 3223:                       hack we should just put in a request to write data,
        -: 3224:                       because that should be possible ;-)
        -: 3225:                    */
     4886: 3226:                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 3227:                        if (settings.verbose > 0)
    #####: 3228:                            fprintf(stderr, "Couldn't update event\n");
    #####: 3229:                        conn_set_state(c, conn_closing);
    #####: 3230:                        break;
        -: 3231:                    }
        -: 3232:                }
        -: 3233:                stop = true;
        -: 3234:            }
        -: 3235:            break;
        -: 3236:
   736543: 3237:        case conn_nread:
   736543: 3238:            if (c->rlbytes == 0) {
   356027: 3239:                complete_nread(c);
   356027: 3240:                break;
        -: 3241:            }
        -: 3242:
        -: 3243:            /* Check if rbytes < 0, to prevent crash */
   380516: 3244:            if (c->rlbytes < 0) {
    #####: 3245:                if (settings.verbose) {
    #####: 3246:                    fprintf(stderr, "Invalid rlbytes to read: len %d\n", c->rlbytes);
        -: 3247:                }
    #####: 3248:                conn_set_state(c, conn_closing);
    #####: 3249:                break;
        -: 3250:            }
        -: 3251:
   380516: 3252:            if (c->item_malloced || ((((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) ) {
        -: 3253:                /* first check if we have leftovers in the conn_read buffer */
   368695: 3254:                if (c->rbytes > 0) {
   348495: 3255:                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
   348495: 3256:                    memmove(c->ritem, c->rcurr, tocopy);
   348495: 3257:                    c->ritem += tocopy;
   348495: 3258:                    c->rlbytes -= tocopy;
   348495: 3259:                    c->rcurr += tocopy;
   348495: 3260:                    c->rbytes -= tocopy;
   348495: 3261:                    if (c->rlbytes == 0) {
        -: 3262:                        break;
        -: 3263:                    }
        -: 3264:                }
        -: 3265:
        -: 3266:                /*  now try reading from the socket */
    90779: 3267:                res = c->read(c, c->ritem, c->rlbytes);
    90779: 3268:                if (res > 0) {
    79719: 3269:                    pthread_mutex_lock(&c->thread->stats.mutex);
    79719: 3270:                    c->thread->stats.bytes_read += res;
    79719: 3271:                    pthread_mutex_unlock(&c->thread->stats.mutex);
    79719: 3272:                    if (c->rcurr == c->ritem) {
    #####: 3273:                        c->rcurr += res;
        -: 3274:                    }
    79719: 3275:                    c->ritem += res;
    79719: 3276:                    c->rlbytes -= res;
    79719: 3277:                    break;
        -: 3278:                }
        -: 3279:            } else {
    11821: 3280:                res = read_into_chunked_item(c);
    11821: 3281:                if (res > 0)
        -: 3282:                    break;
        -: 3283:            }
        -: 3284:
    15437: 3285:            if (res == 0) { /* end of stream */
        2: 3286:                c->close_reason = NORMAL_CLOSE;
        2: 3287:                conn_set_state(c, conn_closing);
        2: 3288:                break;
        -: 3289:            }
        -: 3290:
    15435: 3291:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    15435: 3292:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3293:                    if (settings.verbose > 0)
    #####: 3294:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3295:                    conn_set_state(c, conn_closing);
    #####: 3296:                    break;
        -: 3297:                }
        -: 3298:                stop = true;
        -: 3299:                break;
        -: 3300:            }
        -: 3301:
        -: 3302:            /* Memory allocation failure */
    #####: 3303:            if (res == -2) {
    #####: 3304:                out_of_memory(c, "SERVER_ERROR Out of memory during read");
    #####: 3305:                c->sbytes = c->rlbytes;
    #####: 3306:                conn_set_state(c, conn_swallow);
        -: 3307:                // Ensure this flag gets cleared. It gets killed on conn_new()
        -: 3308:                // so any conn_closing is fine, calling complete_nread is
        -: 3309:                // fine. This swallow semms to be the only other case.
    #####: 3310:                c->set_stale = false;
    #####: 3311:                c->mset_res = false;
    #####: 3312:                break;
        -: 3313:            }
        -: 3314:            /* otherwise we have a real error, on which we close the connection */
    #####: 3315:            if (settings.verbose > 0) {
    #####: 3316:                fprintf(stderr, "Failed to read, and not due to blocking:\n"
        -: 3317:                        "errno: %d %s \n"
        -: 3318:                        "rcurr=%p ritem=%p rbuf=%p rlbytes=%d rsize=%d\n",
    #####: 3319:                        errno, strerror(errno),
    #####: 3320:                        (void *)c->rcurr, (void *)c->ritem, (void *)c->rbuf,
        -: 3321:                        (int)c->rlbytes, (int)c->rsize);
        -: 3322:            }
    #####: 3323:            conn_set_state(c, conn_closing);
    #####: 3324:            break;
        -: 3325:
      707: 3326:        case conn_swallow:
        -: 3327:            /* we are reading sbytes and throwing them away */
      707: 3328:            if (c->sbytes <= 0) {
       12: 3329:                conn_set_state(c, conn_new_cmd);
       12: 3330:                break;
        -: 3331:            }
        -: 3332:
        -: 3333:            /* first check if we have leftovers in the conn_read buffer */
      695: 3334:            if (c->rbytes > 0) {
       11: 3335:                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;
       11: 3336:                c->sbytes -= tocopy;
       11: 3337:                c->rcurr += tocopy;
       11: 3338:                c->rbytes -= tocopy;
       11: 3339:                break;
        -: 3340:            }
        -: 3341:
        -: 3342:            /*  now try reading from the socket */
      684: 3343:            res = c->read(c, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);
      684: 3344:            if (res > 0) {
      554: 3345:                pthread_mutex_lock(&c->thread->stats.mutex);
      554: 3346:                c->thread->stats.bytes_read += res;
      554: 3347:                pthread_mutex_unlock(&c->thread->stats.mutex);
      554: 3348:                c->sbytes -= res;
      554: 3349:                break;
        -: 3350:            }
      130: 3351:            if (res == 0) { /* end of stream */
    #####: 3352:                c->close_reason = NORMAL_CLOSE;
    #####: 3353:                conn_set_state(c, conn_closing);
    #####: 3354:                break;
        -: 3355:            }
      130: 3356:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      130: 3357:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3358:                    if (settings.verbose > 0)
    #####: 3359:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3360:                    conn_set_state(c, conn_closing);
    #####: 3361:                    break;
        -: 3362:                }
        -: 3363:                stop = true;
        -: 3364:                break;
        -: 3365:            }
        -: 3366:            /* otherwise we have a real error, on which we close the connection */
    #####: 3367:            if (settings.verbose > 0)
    #####: 3368:                fprintf(stderr, "Failed to read, and not due to blocking\n");
    #####: 3369:            conn_set_state(c, conn_closing);
    #####: 3370:            break;
        -: 3371:
   499414: 3372:        case conn_write:
        -: 3373:        case conn_mwrite:
        -: 3374:            /* have side IO's that must process before transmit() can run.
        -: 3375:             * remove the connection from the worker thread and dispatch the
        -: 3376:             * IO queue
        -: 3377:             */
  499414*: 3378:            assert(c->io_queues_submitted == 0);
        -: 3379:
   565430: 3380:            for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
    66016: 3381:                if (q->stack_ctx != NULL) {
     1593: 3382:                    io_queue_cb_t *qcb = thread_io_queue_get(c->thread, q->type);
     1593: 3383:                    qcb->submit_cb(q);
     1593: 3384:                    c->io_queues_submitted++;
        -: 3385:                }
        -: 3386:            }
   499414: 3387:            if (c->io_queues_submitted != 0) {
     1593: 3388:                conn_set_state(c, conn_io_queue);
        -: 3389:
     1593: 3390:                stop = true;
     1593: 3391:                break;
        -: 3392:            }
        -: 3393:
   497821: 3394:            switch (!IS_UDP(c->transport) ? transmit(c) : transmit_udp(c)) {
   497137: 3395:            case TRANSMIT_COMPLETE:
   497137: 3396:                if (c->state == conn_mwrite) {
        -: 3397:                    // Free up IO wraps and any half-uploaded items.
   497137: 3398:                    conn_release_items(c);
   497137: 3399:                    conn_set_state(c, conn_new_cmd);
   497137: 3400:                    if (c->close_after_write) {
        8: 3401:                        conn_set_state(c, conn_closing);
        -: 3402:                    }
        -: 3403:                } else {
    #####: 3404:                    if (settings.verbose > 0)
    #####: 3405:                        fprintf(stderr, "Unexpected state %d\n", c->state);
    #####: 3406:                    conn_set_state(c, conn_closing);
        -: 3407:                }
        -: 3408:                break;
        -: 3409:
        -: 3410:            case TRANSMIT_INCOMPLETE:
        -: 3411:            case TRANSMIT_HARD_ERROR:
        -: 3412:                break;                   /* Continue in state machine. */
        -: 3413:
        -: 3414:            case TRANSMIT_SOFT_ERROR:
  3886583: 3415:                stop = true;
        -: 3416:                break;
        -: 3417:            }
        -: 3418:            break;
        -: 3419:
     2132: 3420:        case conn_closing:
     2132: 3421:            if (IS_UDP(c->transport))
    #####: 3422:                conn_cleanup(c);
        -: 3423:            else
     2132: 3424:                conn_close(c);
        -: 3425:            stop = true;
        -: 3426:            break;
        -: 3427:
    #####: 3428:        case conn_closed:
        -: 3429:            /* This only happens if dormando is an idiot. */
    #####: 3430:            abort();
        -: 3431:            break;
        -: 3432:
        -: 3433:        case conn_watch:
        -: 3434:            /* We handed off our connection to the logger thread. */
  4404378: 3435:            stop = true;
        -: 3436:            break;
    #####: 3437:        case conn_io_queue:
        -: 3438:            /* Woke up while waiting for an async return, but not ready. */
    #####: 3439:            event_del(&c->event);
    #####: 3440:            conn_set_state(c, conn_io_pending);
    #####: 3441:            stop = true;
    #####: 3442:            break;
        -: 3443:        case conn_io_pending:
        -: 3444:            /* Should not be reachable */
    #####: 3445:            assert(false);
        -: 3446:            break;
     1593: 3447:        case conn_io_resume:
        -: 3448:            /* Complete our queued IO's from within the worker thread. */
     1593: 3449:            conn_set_state(c, conn_mwrite);
     1593: 3450:            break;
        -: 3451:        case conn_max_state:
    #####: 3452:            assert(false);
        -: 3453:            break;
        -: 3454:        }
        -: 3455:    }
        -: 3456:
   517782: 3457:    return;
        -: 3458:}
        -: 3459:
   516177: 3460:void event_handler(const evutil_socket_t fd, const short which, void *arg) {
   516177: 3461:    conn *c;
        -: 3462:
   516177: 3463:    c = (conn *)arg;
  516177*: 3464:    assert(c != NULL);
        -: 3465:
   516177: 3466:    c->which = which;
        -: 3467:
        -: 3468:    /* sanity */
   516177: 3469:    if (fd != c->sfd) {
    #####: 3470:        if (settings.verbose > 0)
    #####: 3471:            fprintf(stderr, "Catastrophic: event fd doesn't match conn fd!\n");
    #####: 3472:        conn_close(c);
    #####: 3473:        return;
        -: 3474:    }
        -: 3475:
   516177: 3476:    drive_machine(c);
        -: 3477:
        -: 3478:    /* wait for next event */
   516177: 3479:    return;
        -: 3480:}
        -: 3481:
       50: 3482:static int new_socket(struct addrinfo *ai) {
       50: 3483:    int sfd;
       50: 3484:    int flags;
        -: 3485:
       50: 3486:    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
        -: 3487:        return -1;
        -: 3488:    }
        -: 3489:
      100: 3490:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       50: 3491:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3492:        perror("setting O_NONBLOCK");
    #####: 3493:        close(sfd);
    #####: 3494:        return -1;
        -: 3495:    }
        -: 3496:    return sfd;
        -: 3497:}
        -: 3498:
        -: 3499:
        -: 3500:/*
        -: 3501: * Sets a socket's send buffer size to the maximum allowed by the system.
        -: 3502: */
       18: 3503:static void maximize_sndbuf(const int sfd) {
       18: 3504:    socklen_t intsize = sizeof(int);
       18: 3505:    int last_good = 0;
       18: 3506:    int min, max, avg;
       18: 3507:    int old_size;
        -: 3508:
        -: 3509:    /* Start with the default size. */
        -: 3510:#ifdef _WIN32
        -: 3511:    if (getsockopt((SOCKET)sfd, SOL_SOCKET, SO_SNDBUF, (char *)&old_size, &intsize) != 0) {
        -: 3512:#else
       18: 3513:    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {
        -: 3514:#endif /* #ifdef _WIN32 */
    #####: 3515:        if (settings.verbose > 0)
    #####: 3516:            perror("getsockopt(SO_SNDBUF)");
    #####: 3517:        return;
        -: 3518:    }
        -: 3519:
        -: 3520:    /* Binary-search for the real maximum. */
       18: 3521:    min = old_size;
       18: 3522:    max = MAX_SENDBUF_SIZE;
        -: 3523:
      522: 3524:    while (min <= max) {
      504: 3525:        avg = ((unsigned int)(min + max)) / 2;
      504: 3526:        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {
      504: 3527:            last_good = avg;
      504: 3528:            min = avg + 1;
        -: 3529:        } else {
    #####: 3530:            max = avg - 1;
        -: 3531:        }
        -: 3532:    }
        -: 3533:
       18: 3534:    if (settings.verbose > 1)
    #####: 3535:        fprintf(stderr, "<%d send buffer was %d, now %d\n", sfd, old_size, last_good);
        -: 3536:}
        -: 3537:
        -: 3538:/**
        -: 3539: * Create a socket and bind it to a specific port number
        -: 3540: * @param interface the interface to bind to
        -: 3541: * @param port the port number to bind to
        -: 3542: * @param transport the transport protocol (TCP / UDP)
        -: 3543: * @param portnumber_file A filepointer to write the port numbers to
        -: 3544: *        when they are successfully added to the list of ports we
        -: 3545: *        listen on.
        -: 3546: */
       32: 3547:static int server_socket(const char *interface,
        -: 3548:                         int port,
        -: 3549:                         enum network_transport transport,
        -: 3550:                         FILE *portnumber_file, bool ssl_enabled,
        -: 3551:                         uint64_t conntag,
        -: 3552:                         enum protocol bproto) {
       32: 3553:    int sfd;
       32: 3554:    struct linger ling = {0, 0};
       32: 3555:    struct addrinfo *ai;
       32: 3556:    struct addrinfo *next;
       32: 3557:    struct addrinfo hints = { .ai_flags = AI_PASSIVE,
        -: 3558:                              .ai_family = AF_UNSPEC };
       32: 3559:    char port_buf[NI_MAXSERV];
       32: 3560:    int error;
       32: 3561:    int success = 0;
       32: 3562:    int flags =1;
        -: 3563:
       32: 3564:    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;
        -: 3565:
       32: 3566:    if (port == -1) {
        9: 3567:        port = 0;
        -: 3568:    }
       32: 3569:    snprintf(port_buf, sizeof(port_buf), "%d", port);
       32: 3570:    error= getaddrinfo(interface, port_buf, &hints, &ai);
       32: 3571:    if (error != 0) {
        1: 3572:        if (error != EAI_SYSTEM)
        1: 3573:          fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(error));
        -: 3574:        else
    #####: 3575:          perror("getaddrinfo()");
        1: 3576:        return 1;
        -: 3577:    }
        -: 3578:
       81: 3579:    for (next= ai; next; next= next->ai_next) {
       50: 3580:        conn *listen_conn_add;
      50*: 3581:        if ((sfd = new_socket(next)) == -1) {
        -: 3582:            /* getaddrinfo can return "junk" addresses,
        -: 3583:             * we make sure at least one works before erroring.
        -: 3584:             */
    #####: 3585:            if (errno == EMFILE) {
        -: 3586:                /* ...unless we're out of fds */
    #####: 3587:                perror("server_socket");
    #####: 3588:                exit(EX_OSERR);
        -: 3589:            }
    #####: 3590:            continue;
        -: 3591:        }
        -: 3592:
       50: 3593:        if (settings.num_napi_ids) {
    #####: 3594:            socklen_t len = sizeof(socklen_t);
    #####: 3595:            int napi_id;
    #####: 3596:            error = getsockopt(sfd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &napi_id, &len);
    #####: 3597:            if (error != 0) {
    #####: 3598:                fprintf(stderr, "-N <num_napi_ids> option not supported\n");
    #####: 3599:                exit(EXIT_FAILURE);
        -: 3600:            }
        -: 3601:        }
        -: 3602:
        -: 3603:#ifdef IPV6_V6ONLY
       50: 3604:        if (next->ai_family == AF_INET6) {
       19: 3605:            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));
      19*: 3606:            if (error != 0) {
    #####: 3607:                perror("setsockopt");
    #####: 3608:                close(sfd);
    #####: 3609:                continue;
        -: 3610:            }
        -: 3611:        }
        -: 3612:#endif
        -: 3613:#ifdef SOCK_COOKIE_ID
       50: 3614:        if (settings.sock_cookie_id != 0) {
    #####: 3615:            error = setsockopt(sfd, SOL_SOCKET, SOCK_COOKIE_ID, (void *)&settings.sock_cookie_id, sizeof(uint32_t));
    #####: 3616:            if (error != 0)
    #####: 3617:                perror("setsockopt");
        -: 3618:        }
        -: 3619:#endif
        -: 3620:
       50: 3621:        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       50: 3622:        if (IS_UDP(transport)) {
       18: 3623:            maximize_sndbuf(sfd);
        -: 3624:        } else {
       32: 3625:            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       32: 3626:            if (error != 0)
    #####: 3627:                perror("setsockopt");
        -: 3628:
       32: 3629:            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
       32: 3630:            if (error != 0)
    #####: 3631:                perror("setsockopt");
        -: 3632:
       32: 3633:            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));
       32: 3634:            if (error != 0)
    #####: 3635:                perror("setsockopt");
        -: 3636:        }
        -: 3637:
      50*: 3638:        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {
    #####: 3639:            if (errno != EADDRINUSE) {
    #####: 3640:                perror("bind()");
    #####: 3641:                close(sfd);
    #####: 3642:                freeaddrinfo(ai);
    #####: 3643:                return 1;
        -: 3644:            }
    #####: 3645:            close(sfd);
    #####: 3646:            continue;
        -: 3647:        } else {
       50: 3648:            success++;
       50: 3649:            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {
    #####: 3650:                perror("listen()");
    #####: 3651:                close(sfd);
    #####: 3652:                freeaddrinfo(ai);
    #####: 3653:                return 1;
        -: 3654:            }
       50: 3655:            if (portnumber_file != NULL &&
       38: 3656:                (next->ai_addr->sa_family == AF_INET ||
        -: 3657:                 next->ai_addr->sa_family == AF_INET6)) {
       38: 3658:                union {
        -: 3659:                    struct sockaddr_in in;
        -: 3660:                    struct sockaddr_in6 in6;
        -: 3661:                } my_sockaddr;
       38: 3662:                socklen_t len = sizeof(my_sockaddr);
       38: 3663:                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {
       38: 3664:                    if (next->ai_addr->sa_family == AF_INET) {
       19: 3665:                        fprintf(portnumber_file, "%s INET: %u\n",
        -: 3666:                                IS_UDP(transport) ? "UDP" : "TCP",
       19: 3667:                                ntohs(my_sockaddr.in.sin_port));
        -: 3668:                    } else {
       19: 3669:                        fprintf(portnumber_file, "%s INET6: %u\n",
        -: 3670:                                IS_UDP(transport) ? "UDP" : "TCP",
       19: 3671:                                ntohs(my_sockaddr.in6.sin6_port));
        -: 3672:                    }
        -: 3673:                }
        -: 3674:            }
        -: 3675:        }
        -: 3676:
       50: 3677:        if (IS_UDP(transport)) {
        -: 3678:            int c;
        -: 3679:
       90: 3680:            for (c = 0; c < settings.num_threads_per_udp; c++) {
        -: 3681:                /* Allocate one UDP file descriptor per worker thread;
        -: 3682:                 * this allows "stats conns" to separately list multiple
        -: 3683:                 * parallel UDP requests in progress.
        -: 3684:                 *
        -: 3685:                 * The dispatch code round-robins new connection requests
        -: 3686:                 * among threads, so this is guaranteed to assign one
        -: 3687:                 * FD to each thread.
        -: 3688:                 */
       72: 3689:                int per_thread_fd;
       72: 3690:                if (c == 0) {
        -: 3691:                    per_thread_fd = sfd;
        -: 3692:                } else {
       54: 3693:                    per_thread_fd = dup(sfd);
       54: 3694:                    if (per_thread_fd < 0) {
    #####: 3695:                        perror("Failed to duplicate file descriptor");
    #####: 3696:                        exit(EXIT_FAILURE);
        -: 3697:                    }
        -: 3698:                }
       72: 3699:                dispatch_conn_new(per_thread_fd, conn_read,
        -: 3700:                                  EV_READ | EV_PERSIST,
        -: 3701:                                  UDP_READ_BUFFER_SIZE, transport, NULL, conntag, bproto);
        -: 3702:            }
        -: 3703:        } else {
       32: 3704:            if (!(listen_conn_add = conn_new(sfd, conn_listening,
        -: 3705:                                             EV_READ | EV_PERSIST, 1,
        -: 3706:                                             transport, main_base, NULL, conntag, bproto))) {
    #####: 3707:                fprintf(stderr, "failed to create listening connection\n");
    #####: 3708:                exit(EXIT_FAILURE);
        -: 3709:            }
        -: 3710:#ifdef TLS
        -: 3711:            listen_conn_add->ssl_enabled = ssl_enabled;
        -: 3712:#else
      32*: 3713:            assert(ssl_enabled == false);
        -: 3714:#endif
       32: 3715:            listen_conn_add->next = listen_conn;
       32: 3716:            listen_conn = listen_conn_add;
        -: 3717:        }
        -: 3718:    }
        -: 3719:
       31: 3720:    freeaddrinfo(ai);
        -: 3721:
        -: 3722:    /* Return zero iff we detected no errors in starting up connections */
       31: 3723:    return success == 0;
        -: 3724:}
        -: 3725:
       32: 3726:static int server_sockets(int port, enum network_transport transport,
        -: 3727:                          FILE *portnumber_file) {
       32: 3728:    bool ssl_enabled = false;
        -: 3729:
        -: 3730:#ifdef TLS
        -: 3731:    const char *notls = "notls";
        -: 3732:    ssl_enabled = settings.ssl_enabled;
        -: 3733:#endif
        -: 3734:
       32: 3735:    if (settings.inter == NULL) {
       19: 3736:        return server_socket(settings.inter, port, transport, portnumber_file, ssl_enabled, 0, settings.binding_protocol);
        -: 3737:    } else {
        -: 3738:        // tokenize them and bind to each one of them..
       13: 3739:        char *b;
       13: 3740:        int ret = 0;
       13: 3741:        char *list = strdup(settings.inter);
        -: 3742:
       13: 3743:        if (list == NULL) {
    #####: 3744:            fprintf(stderr, "Failed to allocate memory for parsing server interface string\n");
    #####: 3745:            return 1;
        -: 3746:        }
        -: 3747:        // If we encounter any failure, preserve the first errno for the caller.
       13: 3748:        int errno_save = 0;
       13: 3749:        for (char *p = strtok_r(list, ";,", &b);
       26: 3750:            p != NULL;
       13: 3751:            p = strtok_r(NULL, ";,", &b)) {
       13: 3752:            uint64_t conntag = 0;
       13: 3753:            int the_port = port;
        -: 3754:#ifdef TLS
        -: 3755:            ssl_enabled = settings.ssl_enabled;
        -: 3756:            // "notls" option is valid only when memcached is run with SSL enabled.
        -: 3757:            if (strncmp(p, notls, strlen(notls)) == 0) {
        -: 3758:                if (!settings.ssl_enabled) {
        -: 3759:                    fprintf(stderr, "'notls' option is valid only when SSL is enabled\n");
        -: 3760:                    free(list);
        -: 3761:                    return 1;
        -: 3762:                }
        -: 3763:                ssl_enabled = false;
        -: 3764:                p += strlen(notls) + 1;
        -: 3765:            }
        -: 3766:#endif
        -: 3767:
        -: 3768:            // Allow forcing the protocol of this listener.
       13: 3769:            const char *protostr = "proto";
       13: 3770:            enum protocol bproto = settings.binding_protocol;
       13: 3771:            if (strncmp(p, protostr, strlen(protostr)) == 0) {
    #####: 3772:                p += strlen(protostr);
    #####: 3773:                if (*p == '[') {
    #####: 3774:                    char *e = strchr(p, ']');
    #####: 3775:                    if (e == NULL) {
    #####: 3776:                        fprintf(stderr, "Invalid protocol spec: \"%s\"\n", p);
    #####: 3777:                        free(list);
    #####: 3778:                        return 1;
        -: 3779:                    }
    #####: 3780:                    char *st = ++p; // skip '[';
    #####: 3781:                    *e = '\0';
    #####: 3782:                    size_t len = e - st;
    #####: 3783:                    p = ++e; // skip ']'
    #####: 3784:                    p++; // skip an assumed ':'
        -: 3785:
    #####: 3786:                    if (strncmp(st, "ascii", len) == 0) {
        -: 3787:                        bproto = ascii_prot;
    #####: 3788:                    } else if (strncmp(st, "binary", len) == 0) {
        -: 3789:                        bproto = binary_prot;
    #####: 3790:                    } else if (strncmp(st, "negotiating", len) == 0) {
        -: 3791:                        bproto = negotiating_prot;
    #####: 3792:                    } else if (strncmp(st, "proxy", len) == 0) {
        -: 3793:#ifdef PROXY
        -: 3794:                        if (settings.proxy_enabled) {
        -: 3795:                            bproto = proxy_prot;
        -: 3796:                        } else {
        -: 3797:                            fprintf(stderr, "Proxy must be enabled to use: \"%s\"\n", list);
        -: 3798:                            free(list);
        -: 3799:                            return 1;
        -: 3800:                        }
        -: 3801:#else
    #####: 3802:                        fprintf(stderr, "Server not built with proxy: \"%s\"\n", list);
    #####: 3803:                        free(list);
    #####: 3804:                        return 1;
        -: 3805:#endif
        -: 3806:                    }
        -: 3807:                }
        -: 3808:            }
        -: 3809:
       13: 3810:            const char *tagstr = "tag";
       13: 3811:            if (strncmp(p, tagstr, strlen(tagstr)) == 0) {
    #####: 3812:                p += strlen(tagstr);
        -: 3813:                // NOTE: should probably retire the [] dumbassery. those're
        -: 3814:                // shell characters.
    #####: 3815:                if (*p == '[' || *p == '_') {
    #####: 3816:                    char *e = strchr(p, ']');
    #####: 3817:                    if (e == NULL) {
    #####: 3818:                        e = strchr(p+1, '_');
        -: 3819:                    }
    #####: 3820:                    if (e == NULL) {
    #####: 3821:                        fprintf(stderr, "Invalid tag in socket config: \"%s\"\n", p);
    #####: 3822:                        free(list);
    #####: 3823:                        return 1;
        -: 3824:                    }
    #####: 3825:                    char *st = ++p; // skip '['
    #####: 3826:                    *e = '\0';
    #####: 3827:                    size_t len = e - st;
    #####: 3828:                    p = ++e; // skip ']'
    #####: 3829:                    p++; // skip an assumed ':'
        -: 3830:
        -: 3831:                    // validate the tag and copy it in.
    #####: 3832:                    if (len > 8 || len < 1) {
    #####: 3833:                        fprintf(stderr, "Listener tags must be between 1 and 8 characters: \"%s\"\n", st);
    #####: 3834:                        free(list);
    #####: 3835:                        return 1;
        -: 3836:                    }
        -: 3837:
        -: 3838:                    // C programmers love turning string comparisons into
        -: 3839:                    // integer comparisons.
    #####: 3840:                    memcpy(&conntag, st, len);
        -: 3841:                }
        -: 3842:            }
        -: 3843:
       13: 3844:            char *h = NULL;
       13: 3845:            if (*p == '[') {
        -: 3846:                // expecting it to be an IPv6 address enclosed in []
        -: 3847:                // i.e. RFC3986 style recommended by RFC5952
    #####: 3848:                char *e = strchr(p, ']');
    #####: 3849:                if (e == NULL) {
    #####: 3850:                    fprintf(stderr, "Invalid IPV6 address: \"%s\"", p);
    #####: 3851:                    free(list);
    #####: 3852:                    return 1;
        -: 3853:                }
    #####: 3854:                h = ++p; // skip the opening '['
    #####: 3855:                *e = '\0';
    #####: 3856:                p = ++e; // skip the closing ']'
        -: 3857:            }
        -: 3858:
       13: 3859:            char *s = strchr(p, ':');
       13: 3860:            if (s != NULL) {
        -: 3861:                // If no more semicolons - attempt to treat as port number.
        -: 3862:                // Otherwise the only valid option is an unenclosed IPv6 without port, until
        -: 3863:                // of course there was an RFC3986 IPv6 address previously specified -
        -: 3864:                // in such a case there is no good option, will just send it to fail as port number.
    #####: 3865:                if (strchr(s + 1, ':') == NULL || h != NULL) {
    #####: 3866:                    *s = '\0';
    #####: 3867:                    ++s;
    #####: 3868:                    if (!safe_strtol(s, &the_port)) {
    #####: 3869:                        fprintf(stderr, "Invalid port number: \"%s\"\n", s);
    #####: 3870:                        free(list);
    #####: 3871:                        return 1;
        -: 3872:                    }
        -: 3873:                }
        -: 3874:            }
        -: 3875:
       13: 3876:            if (h != NULL)
       13: 3877:                p = h;
        -: 3878:
       13: 3879:            if (strcmp(p, "*") == 0) {
    #####: 3880:                p = NULL;
        -: 3881:            }
       13: 3882:            ret |= server_socket(p, the_port, transport, portnumber_file, ssl_enabled, conntag, bproto);
       13: 3883:            if (ret != 0 && errno_save == 0) errno_save = errno;
        -: 3884:        }
       13: 3885:        free(list);
       13: 3886:        errno = errno_save;
       13: 3887:        return ret;
        -: 3888:    }
        -: 3889:}
        -: 3890:
        -: 3891:#ifndef DISABLE_UNIX_SOCKET
       99: 3892:static int new_socket_unix(void) {
       99: 3893:    int sfd;
       99: 3894:    int flags;
        -: 3895:
       99: 3896:    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
    #####: 3897:        perror("socket()");
    #####: 3898:        return -1;
        -: 3899:    }
        -: 3900:
      198: 3901:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       99: 3902:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3903:        perror("setting O_NONBLOCK");
    #####: 3904:        close(sfd);
    #####: 3905:        return -1;
        -: 3906:    }
        -: 3907:    return sfd;
        -: 3908:}
        -: 3909:
       99: 3910:static int server_socket_unix(const char *path, int access_mask) {
       99: 3911:    int sfd;
       99: 3912:    struct linger ling = {0, 0};
       99: 3913:    struct sockaddr_un addr;
       99: 3914:    struct stat tstat;
       99: 3915:    int flags =1;
       99: 3916:    int old_umask;
        -: 3917:
       99: 3918:    if (!path) {
        -: 3919:        return 1;
        -: 3920:    }
        -: 3921:
       99: 3922:    if ((sfd = new_socket_unix()) == -1) {
        -: 3923:        return 1;
        -: 3924:    }
        -: 3925:
        -: 3926:    /*
        -: 3927:     * Clean up a previous socket file if we left it around
        -: 3928:     */
       99: 3929:    if (lstat(path, &tstat) == 0) {
    #####: 3930:        if (S_ISSOCK(tstat.st_mode))
    #####: 3931:            unlink(path);
        -: 3932:    }
        -: 3933:
       99: 3934:    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       99: 3935:    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       99: 3936:    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
        -: 3937:
        -: 3938:    /*
        -: 3939:     * the memset call clears nonstandard fields in some implementations
        -: 3940:     * that otherwise mess things up.
        -: 3941:     */
       99: 3942:    memset(&addr, 0, sizeof(addr));
        -: 3943:
       99: 3944:    addr.sun_family = AF_UNIX;
       99: 3945:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
      99*: 3946:    assert(strcmp(addr.sun_path, path) == 0);
       99: 3947:    old_umask = umask( ~(access_mask&0777));
       99: 3948:    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
    #####: 3949:        perror("bind()");
    #####: 3950:        close(sfd);
    #####: 3951:        umask(old_umask);
    #####: 3952:        return 1;
        -: 3953:    }
       99: 3954:    umask(old_umask);
       99: 3955:    if (listen(sfd, settings.backlog) == -1) {
    #####: 3956:        perror("listen()");
    #####: 3957:        close(sfd);
    #####: 3958:        return 1;
        -: 3959:    }
       99: 3960:    if (!(listen_conn = conn_new(sfd, conn_listening,
        -: 3961:                                 EV_READ | EV_PERSIST, 1,
        -: 3962:                                 local_transport, main_base, NULL, 0, settings.binding_protocol))) {
    #####: 3963:        fprintf(stderr, "failed to create listening connection\n");
    #####: 3964:        exit(EXIT_FAILURE);
        -: 3965:    }
        -: 3966:
        -: 3967:    return 0;
        -: 3968:}
        -: 3969:#else
        -: 3970:#define server_socket_unix(path, access_mask)   -1
        -: 3971:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 3972:
        -: 3973:/*
        -: 3974: * We keep the current time of day in a global variable that's updated by a
        -: 3975: * timer event. This saves us a bunch of time() system calls (we really only
        -: 3976: * need to get the time once a second, whereas there can be tens of thousands
        -: 3977: * of requests a second) and allows us to use server-start-relative timestamps
        -: 3978: * rather than absolute UNIX timestamps, a space savings on systems where
        -: 3979: * sizeof(time_t) > sizeof(unsigned int).
        -: 3980: */
        -: 3981:volatile rel_time_t current_time;
        -: 3982:static struct event clockevent;
        -: 3983:#ifdef MEMCACHED_DEBUG
        -: 3984:volatile bool is_paused;
        -: 3985:volatile int64_t delta;
        -: 3986:#endif
        -: 3987:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 3988:static bool monotonic = false;
        -: 3989:static int64_t monotonic_start;
        -: 3990:#endif
        -: 3991:
        -: 3992:/* libevent uses a monotonic clock when available for event scheduling. Aside
        -: 3993: * from jitter, simply ticking our internal timer here is accurate enough.
        -: 3994: * Note that users who are setting explicit dates for expiration times *must*
        -: 3995: * ensure their clocks are correct before starting memcached. */
      505: 3996:static void clock_handler(const evutil_socket_t fd, const short which, void *arg) {
      505: 3997:    struct timeval t = {.tv_sec = 1, .tv_usec = 0};
      505: 3998:    static bool initialized = false;
        -: 3999:
      505: 4000:    if (initialized) {
        -: 4001:        /* only delete the event if it's actually there. */
      385: 4002:        evtimer_del(&clockevent);
        -: 4003:    } else {
      120: 4004:        initialized = true;
        -: 4005:    }
        -: 4006:
        -: 4007:    // While we're here, check for hash table expansion.
        -: 4008:    // This function should be quick to avoid delaying the timer.
      505: 4009:    assoc_start_expand(stats_state.curr_items);
        -: 4010:    // also, if HUP'ed we need to do some maintenance.
        -: 4011:    // for now that's just the authfile reload.
      505: 4012:    if (settings.sig_hup) {
        1: 4013:        settings.sig_hup = false;
        -: 4014:
        1: 4015:        authfile_load(settings.auth_file);
        -: 4016:#ifdef PROXY
        -: 4017:        if (settings.proxy_ctx) {
        -: 4018:            proxy_start_reload(settings.proxy_ctx);
        -: 4019:        }
        -: 4020:#endif
        -: 4021:    }
        -: 4022:
      505: 4023:    evtimer_set(&clockevent, clock_handler, 0);
      505: 4024:    event_base_set(main_base, &clockevent);
      505: 4025:    evtimer_add(&clockevent, &t);
        -: 4026:
        -: 4027:#ifdef MEMCACHED_DEBUG
     1010: 4028:    if (is_paused) return;
        -: 4029:#endif
        -: 4030:
        -: 4031:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
      505: 4032:    if (monotonic) {
      505: 4033:        struct timespec ts;
      505: 4034:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)
        -: 4035:            return;
        -: 4036:#ifdef MEMCACHED_DEBUG
      505: 4037:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start + delta);
        -: 4038:#else
        -: 4039:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);
        -: 4040:#endif
      505: 4041:        return;
        -: 4042:    }
        -: 4043:#endif
        -: 4044:    {
    #####: 4045:        struct timeval tv;
    #####: 4046:        gettimeofday(&tv, NULL);
        -: 4047:#ifdef MEMCACHED_DEBUG
    #####: 4048:        current_time = (rel_time_t) (tv.tv_sec - process_started + delta);
        -: 4049:#else
        -: 4050:        current_time = (rel_time_t) (tv.tv_sec - process_started);
        -: 4051:#endif
        -: 4052:    }
        -: 4053:}
        -: 4054:
      624: 4055:static const char* flag_enabled_disabled(bool flag) {
      624: 4056:    return (flag ? "enabled" : "disabled");
        -: 4057:}
        -: 4058:
     2313: 4059:static void verify_default(const char* param, bool condition) {
     2313: 4060:    if (!condition) {
    #####: 4061:        printf("Default value of [%s] has changed."
        -: 4062:            " Modify the help text and default value check.\n", param);
    #####: 4063:        exit(EXIT_FAILURE);
        -: 4064:    }
     2313: 4065:}
        -: 4066:
      312: 4067:static void usage(void) {
      312: 4068:    printf(PACKAGE " " VERSION "\n");
      312: 4069:    printf("-p, --port=<num>          TCP port to listen on (default: %d)\n"
        -: 4070:           "-U, --udp-port=<num>      UDP port to listen on (default: %d, off)\n",
        -: 4071:           settings.port, settings.udpport);
        -: 4072:#ifndef DISABLE_UNIX_SOCKET
      312: 4073:    printf("-s, --unix-socket=<file>  UNIX socket to listen on (disables network support)\n");
      312: 4074:    printf("-a, --unix-mask=<mask>    access mask for UNIX socket, in octal (default: %o)\n",
        -: 4075:            settings.access);
        -: 4076:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      312: 4077:    printf("-A, --enable-shutdown     enable ascii \"shutdown\" command\n");
      312: 4078:    printf("-l, --listen=<addr>       interface to listen on (default: INADDR_ANY)\n");
        -: 4079:#ifdef TLS
        -: 4080:    printf("                          if TLS/SSL is enabled, 'notls' prefix can be used to\n"
        -: 4081:           "                          disable for specific listeners (-l notls:<ip>:<port>) \n");
        -: 4082:#endif
      624: 4083:    printf("-d, --daemon              run as a daemon\n"
        -: 4084:           "-r, --enable-coredumps    maximize core file limit\n"
        -: 4085:           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
        -: 4086:           "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
        -: 4087:           "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
        -: 4088:           "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
        -: 4089:           "-k, --lock-memory         lock down all paged memory\n"
        -: 4090:           "-v, --verbose             verbose (print errors/warnings while in event loop)\n"
        -: 4091:           "-vv                       very verbose (also print client commands/responses)\n"
        -: 4092:           "-vvv                      extremely verbose (internal state transitions)\n"
        -: 4093:           "-h, --help                print this help and exit\n"
        -: 4094:           "-i, --license             print memcached and libevent license\n"
        -: 4095:           "-V, --version             print version and exit\n"
        -: 4096:           "-P, --pidfile=<file>      save PID in <file>, only used with -d option\n"
        -: 4097:           "-f, --slab-growth-factor=<num> chunk size growth factor (default: %2.2f)\n"
        -: 4098:           "-n, --slab-min-size=<bytes> min space used for key+value+flags (default: %d)\n",
      312: 4099:           (unsigned long) settings.maxbytes / (1 << 20),
        -: 4100:           settings.maxconns, settings.factor, settings.chunk_size);
      312: 4101:    verify_default("udp-port",settings.udpport == 0);
      312: 4102:    printf("-L, --enable-largepages  try to use large memory pages (if available)\n");
      624: 4103:    printf("-D <char>     Use <char> as the delimiter between key prefixes and IDs.\n"
        -: 4104:           "              This is used for per-prefix stats reporting. The default is\n"
        -: 4105:           "              \"%c\" (colon). If this option is specified, stats collection\n"
        -: 4106:           "              is turned on automatically; if not, then it may be turned on\n"
        -: 4107:           "              by sending the \"stats detail on\" command to the server.\n",
      312: 4108:           settings.prefix_delimiter);
      312: 4109:    printf("-t, --threads=<num>       number of threads to use (default: %d)\n", settings.num_threads);
      312: 4110:    printf("-R, --max-reqs-per-event  maximum number of requests per event, limits the\n"
        -: 4111:           "                          requests processed per connection to prevent \n"
        -: 4112:           "                          starvation (default: %d)\n", settings.reqs_per_event);
      312: 4113:    printf("-C, --disable-cas         disable use of CAS\n");
      312: 4114:    printf("-b, --listen-backlog=<num> set the backlog queue limit (default: %d)\n", settings.backlog);
      624: 4115:    printf("-B, --protocol=<name>     protocol - one of ascii, binary, or auto (default: %s)\n",
        -: 4116:           prot_text(settings.binding_protocol));
      624: 4117:    printf("-I, --max-item-size=<num> adjusts max item size\n"
        -: 4118:           "                          (default: %dm, min: %dk, max: %dm)\n",
      312: 4119:           settings.item_size_max/ (1 << 20), ITEM_SIZE_MAX_LOWER_LIMIT / (1 << 10),  ITEM_SIZE_MAX_UPPER_LIMIT / (1 << 20));
        -: 4120:#ifdef ENABLE_SASL
        -: 4121:    printf("-S, --enable-sasl         turn on Sasl authentication\n");
        -: 4122:#endif
      312: 4123:    printf("-F, --disable-flush-all   disable flush_all command\n");
      312: 4124:    printf("-X, --disable-dumping     disable stats cachedump and lru_crawler metadump\n");
      312: 4125:    printf("-W  --disable-watch       disable watch commands (live logging)\n");
      312: 4126:    printf("-Y, --auth-file=<file>    (EXPERIMENTAL) enable ASCII protocol authentication. format:\n"
        -: 4127:           "                          user:pass\\nuser2:pass2\\n\n");
      312: 4128:    printf("-e, --memory-file=<file>  (EXPERIMENTAL) mmap a file for item memory.\n"
        -: 4129:           "                          use only in ram disks or persistent memory mounts!\n"
        -: 4130:           "                          enables restartable cache (stop with SIGUSR1)\n");
        -: 4131:#ifdef TLS
        -: 4132:    printf("-Z, --enable-ssl          enable TLS/SSL\n");
        -: 4133:#endif
      312: 4134:    printf("-o, --extended            comma separated list of extended options\n"
        -: 4135:           "                          most options have a 'no_' prefix to disable\n"
        -: 4136:           "   - maxconns_fast:       immediately close new connections after limit (default: %s)\n"
        -: 4137:           "   - hashpower:           an integer multiplier for how large the hash\n"
        -: 4138:           "                          table should be. normally grows at runtime. (default starts at: %d)\n"
        -: 4139:           "                          set based on \"STAT hash_power_level\"\n"
        -: 4140:           "   - tail_repair_time:    time in seconds for how long to wait before\n"
        -: 4141:           "                          forcefully killing LRU tail item.\n"
        -: 4142:           "                          disabled by default; very dangerous option.\n"
        -: 4143:           "   - hash_algorithm:      the hash table algorithm\n"
        -: 4144:           "                          default is murmur3 hash. options: jenkins, murmur3, xxh3\n"
        -: 4145:           "   - no_lru_crawler:      disable LRU Crawler background thread.\n"
        -: 4146:           "   - lru_crawler_sleep:   microseconds to sleep between items\n"
        -: 4147:           "                          default is %d.\n"
        -: 4148:           "   - lru_crawler_tocrawl: max items to crawl per slab per run\n"
        -: 4149:           "                          default is %u (unlimited)\n",
      312: 4150:           flag_enabled_disabled(settings.maxconns_fast), settings.hashpower_init,
        -: 4151:           settings.lru_crawler_sleep, settings.lru_crawler_tocrawl);
      312: 4152:    printf("   - read_buf_mem_limit:  limit in megabytes for connection read/response buffers.\n"
        -: 4153:           "                          do not adjust unless you have high (20k+) conn. limits.\n"
        -: 4154:           "                          0 means unlimited (default: %u)\n",
        -: 4155:           settings.read_buf_mem_limit);
      312: 4156:    verify_default("read_buf_mem_limit", settings.read_buf_mem_limit == 0);
      312: 4157:    printf("   - no_lru_maintainer:   disable new LRU system + background thread.\n"
        -: 4158:           "   - hot_lru_pct:         pct of slab memory to reserve for hot lru.\n"
        -: 4159:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4160:           "   - warm_lru_pct:        pct of slab memory to reserve for warm lru.\n"
        -: 4161:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4162:           "   - hot_max_factor:      items idle > cold lru age * drop from hot lru. (default: %.2f)\n"
        -: 4163:           "   - warm_max_factor:     items idle > cold lru age * this drop from warm. (default: %.2f)\n"
        -: 4164:           "   - temporary_ttl:       TTL's below get separate LRU, can't be evicted.\n"
        -: 4165:           "                          (requires lru_maintainer, default: %d)\n"
        -: 4166:           "   - idle_timeout:        timeout for idle connections. (default: %d, no timeout)\n",
        -: 4167:           settings.hot_lru_pct, settings.warm_lru_pct, settings.hot_max_factor, settings.warm_max_factor,
        -: 4168:           settings.temporary_ttl, settings.idle_timeout);
      624: 4169:    printf("   - slab_chunk_max:      (EXPERIMENTAL) maximum slab size in kilobytes. use extreme care. (default: %d)\n"
        -: 4170:           "   - watcher_logbuf_size: size in kilobytes of per-watcher write buffer. (default: %u)\n"
        -: 4171:           "   - worker_logbuf_size:  size in kilobytes of per-worker-thread buffer\n"
        -: 4172:           "                          read by background thread, then written to watchers. (default: %u)\n"
        -: 4173:           "   - track_sizes:         enable dynamic reports for 'stats sizes' command.\n"
        -: 4174:           "                          note that counts for each size are approximate.\n"
        -: 4175:           "   - no_hashexpand:       disables hash table expansion (dangerous)\n"
        -: 4176:           "   - modern:              enables options which will be default in future.\n"
        -: 4177:           "                          currently: nothing\n"
        -: 4178:           "   - no_modern:           uses defaults of previous major version (1.4.x)\n",
      312: 4179:           settings.slab_chunk_size_max / (1 << 10), settings.logger_watcher_buf_size / (1 << 10),
      312: 4180:           settings.logger_buf_size / (1 << 10));
      312: 4181:    verify_default("tail_repair_time", settings.tail_repair_time == TAIL_REPAIR_TIME_DEFAULT);
      312: 4182:    verify_default("lru_crawler_tocrawl", settings.lru_crawler_tocrawl == 0);
      312: 4183:    verify_default("idle_timeout", settings.idle_timeout == 0);
        -: 4184:#ifdef HAVE_DROP_PRIVILEGES
        -: 4185:    printf("   - drop_privileges:     enable dropping extra syscall privileges\n"
        -: 4186:           "   - no_drop_privileges:  disable drop_privileges in case it causes issues with\n"
        -: 4187:           "                          some customisation.\n"
        -: 4188:           "                          (default is no_drop_privileges)\n");
        -: 4189:    verify_default("drop_privileges", !settings.drop_privileges);
        -: 4190:#ifdef MEMCACHED_DEBUG
        -: 4191:    printf("   - relaxed_privileges:  running tests requires extra privileges. (default: %s)\n",
        -: 4192:           flag_enabled_disabled(settings.relaxed_privileges));
        -: 4193:#endif
        -: 4194:#endif
        -: 4195:#ifdef SOCK_COOKIE_ID
      312: 4196:    printf("   - sock_cookie_id:      attributes an ID to a socket for ip filtering/firewalls \n");
        -: 4197:#endif
        -: 4198:#ifdef EXTSTORE
      312: 4199:    printf("\n   - External storage (ext_*) related options (see: https://memcached.org/extstore)\n");
      936: 4200:    printf("   - ext_path:            file to write to for external storage.\n"
        -: 4201:           "                          ie: ext_path=/mnt/d1/extstore:1G\n"
        -: 4202:           "   - ext_page_size:       size in megabytes of storage pages. (default: %u)\n"
        -: 4203:           "   - ext_wbuf_size:       size in megabytes of page write buffers. (default: %u)\n"
        -: 4204:           "   - ext_threads:         number of IO threads to run. (default: %u)\n"
        -: 4205:           "   - ext_item_size:       store items larger than this (bytes, default %u)\n"
        -: 4206:           "   - ext_item_age:        store items idle at least this long (seconds, default: no age limit)\n"
        -: 4207:           "   - ext_low_ttl:         consider TTLs lower than this specially (default: %u)\n"
        -: 4208:           "   - ext_drop_unread:     don't re-write unread values during compaction (default: %s)\n"
        -: 4209:           "   - ext_recache_rate:    recache an item every N accesses (default: %u)\n"
        -: 4210:           "   - ext_compact_under:   compact when fewer than this many free pages\n"
        -: 4211:           "                          (default: 1 percent of the assigned storage)\n"
        -: 4212:           "   - ext_drop_under:      drop COLD items when fewer than this many free pages\n"
        -: 4213:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4214:           "   - ext_max_frag:        only defrag pages if they are less full than this pct-wise (default: %.2f)\n"
        -: 4215:           "   - ext_max_sleep:       max sleep time of background threads in us (default: %u)\n"
        -: 4216:           "   - slab_automove_freeratio: ratio of memory to hold free as buffer.\n"
        -: 4217:           "                          (see doc/storage.txt for more info, default: %.3f)\n",
      312: 4218:           settings.ext_page_size / (1 << 20), settings.ext_wbuf_size / (1 << 20), settings.ext_io_threadcount,
        -: 4219:           settings.ext_item_size, settings.ext_low_ttl,
      312: 4220:           flag_enabled_disabled(settings.ext_drop_unread), settings.ext_recache_rate,
        -: 4221:           settings.ext_max_frag, settings.ext_max_sleep, settings.slab_automove_freeratio);
      312: 4222:    verify_default("ext_item_age", settings.ext_item_age == UINT_MAX);
        -: 4223:#endif
        -: 4224:#ifdef PROXY
        -: 4225:    printf("   - proxy_config:        path to lua library file. separate with ':' for multiple files\n");
        -: 4226:    printf("   - proxy_arg:           string to pass to lua library\n");
        -: 4227:#endif
        -: 4228:#ifdef TLS
        -: 4229:    printf("   - ssl_chain_cert:      certificate chain file in PEM format\n"
        -: 4230:           "   - ssl_key:             private key, if not part of the -ssl_chain_cert\n"
        -: 4231:           "   - ssl_keyformat:       private key format (PEM, DER or ENGINE) (default: PEM)\n");
        -: 4232:    printf("   - ssl_verify_mode:     peer certificate verification mode, default is 0(None).\n"
        -: 4233:           "                          valid values are 0(None), 1(Request), 2(Require)\n"
        -: 4234:           "                          or 3(Once)\n");
        -: 4235:    printf("   - ssl_ciphers:         specify cipher list to be used\n"
        -: 4236:           "   - ssl_ca_cert:         PEM format file of acceptable client CA's\n"
        -: 4237:           "   - ssl_wbuf_size:       size in kilobytes of per-connection SSL output buffer\n"
        -: 4238:           "                          (default: %u)\n", settings.ssl_wbuf_size / (1 << 10));
        -: 4239:    printf("   - ssl_session_cache:   enable server-side SSL session cache, to support session\n"
        -: 4240:           "                          resumption\n"
        -: 4241:           "   - ssl_kernel_tls:      enable kernel TLS offload\n"
        -: 4242:           "   - ssl_min_version:     minimum protocol version to accept (default: %s)\n",
        -: 4243:           ssl_proto_text(settings.ssl_min_version));
        -: 4244:#if defined(TLS1_3_VERSION)
        -: 4245:    printf("                          valid values are 0(%s), 1(%s), 2(%s), or 3(%s).\n",
        -: 4246:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4247:           ssl_proto_text(TLS1_2_VERSION), ssl_proto_text(TLS1_3_VERSION));
        -: 4248:#else
        -: 4249:    printf("                          valid values are 0(%s), 1(%s), or 2(%s).\n",
        -: 4250:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4251:           ssl_proto_text(TLS1_2_VERSION));
        -: 4252:#endif
        -: 4253:    verify_default("ssl_keyformat", settings.ssl_keyformat == SSL_FILETYPE_PEM);
        -: 4254:    verify_default("ssl_verify_mode", settings.ssl_verify_mode == SSL_VERIFY_NONE);
        -: 4255:    verify_default("ssl_min_version", settings.ssl_min_version == TLS1_2_VERSION);
        -: 4256:#endif
      312: 4257:    printf("-N, --napi_ids            number of napi ids. see doc/napi_ids.txt for more details\n");
      312: 4258:    return;
        -: 4259:}
        -: 4260:
    #####: 4261:static void usage_license(void) {
    #####: 4262:    printf(PACKAGE " " VERSION "\n\n");
    #####: 4263:    printf(
        -: 4264:    "Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\n"
        -: 4265:    "All rights reserved.\n"
        -: 4266:    "\n"
        -: 4267:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4268:    "modification, are permitted provided that the following conditions are\n"
        -: 4269:    "met:\n"
        -: 4270:    "\n"
        -: 4271:    "    * Redistributions of source code must retain the above copyright\n"
        -: 4272:    "notice, this list of conditions and the following disclaimer.\n"
        -: 4273:    "\n"
        -: 4274:    "    * Redistributions in binary form must reproduce the above\n"
        -: 4275:    "copyright notice, this list of conditions and the following disclaimer\n"
        -: 4276:    "in the documentation and/or other materials provided with the\n"
        -: 4277:    "distribution.\n"
        -: 4278:    "\n"
        -: 4279:    "    * Neither the name of the Danga Interactive nor the names of its\n"
        -: 4280:    "contributors may be used to endorse or promote products derived from\n"
        -: 4281:    "this software without specific prior written permission.\n"
        -: 4282:    "\n"
        -: 4283:    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
        -: 4284:    "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
        -: 4285:    "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
        -: 4286:    "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
        -: 4287:    "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
        -: 4288:    "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
        -: 4289:    "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4290:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4291:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4292:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
        -: 4293:    "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4294:    );
        -: 4295:
    #####: 4296:    return;
        -: 4297:}
        -: 4298:
        1: 4299:static void save_pid(const char *pid_file) {
        1: 4300:    FILE *fp;
        1: 4301:    if (access(pid_file, F_OK) == 0) {
    #####: 4302:        if ((fp = fopen(pid_file, "r")) != NULL) {
    #####: 4303:            char buffer[1024];
    #####: 4304:            if (fgets(buffer, sizeof(buffer), fp) != NULL) {
    #####: 4305:                unsigned int pid;
    #####: 4306:                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {
    #####: 4307:                    fprintf(stderr, "WARNING: The pid file contained the following (running) pid: %u\n", pid);
        -: 4308:                }
        -: 4309:            }
    #####: 4310:            fclose(fp);
        -: 4311:        }
        -: 4312:    }
        -: 4313:
        -: 4314:    /* Create the pid file first with a temporary name, then
        -: 4315:     * atomically move the file to the real name to avoid a race with
        -: 4316:     * another process opening the file to read the pid, but finding
        -: 4317:     * it empty.
        -: 4318:     */
        1: 4319:    char tmp_pid_file[1024];
        1: 4320:    snprintf(tmp_pid_file, sizeof(tmp_pid_file), "%s.tmp", pid_file);
        -: 4321:
        1: 4322:    if ((fp = fopen(tmp_pid_file, "w")) == NULL) {
    #####: 4323:        vperror("Could not open the pid file %s for writing", tmp_pid_file);
    #####: 4324:        return;
        -: 4325:    }
        -: 4326:
        1: 4327:    fprintf(fp,"%ld\n", (long)getpid());
        1: 4328:    if (fclose(fp) == -1) {
    #####: 4329:        vperror("Could not close the pid file %s", tmp_pid_file);
        -: 4330:    }
        -: 4331:
        1: 4332:    if (rename(tmp_pid_file, pid_file) != 0) {
    #####: 4333:        vperror("Could not rename the pid file from %s to %s",
        -: 4334:                tmp_pid_file, pid_file);
        -: 4335:    }
        -: 4336:}
        -: 4337:
        1: 4338:static void remove_pidfile(const char *pid_file) {
        1: 4339:  if (pid_file == NULL)
        -: 4340:      return;
        -: 4341:
        1: 4342:  if (unlink(pid_file) != 0) {
    #####: 4343:      vperror("Could not remove the pid file %s", pid_file);
        -: 4344:  }
        -: 4345:
        -: 4346:}
        -: 4347:
      124: 4348:static void sig_handler(const int sig) {
      124: 4349:    stop_main_loop = EXIT_NORMALLY;
      124: 4350:}
        -: 4351:
        1: 4352:static void sighup_handler(const int sig) {
        1: 4353:    settings.sig_hup = true;
        1: 4354:}
        -: 4355:
        2: 4356:static void sig_usrhandler(const int sig) {
        2: 4357:    stop_main_loop = GRACE_STOP;
        2: 4358:}
        -: 4359:
        -: 4360:/*
        -: 4361: * On systems that supports multiple page sizes we may reduce the
        -: 4362: * number of TLB-misses by using the biggest available page size
        -: 4363: */
    #####: 4364:static int enable_large_pages(void) {
        -: 4365:#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)
        -: 4366:    int ret = -1;
        -: 4367:    size_t sizes[32];
        -: 4368:    int avail = getpagesizes(sizes, 32);
        -: 4369:    if (avail != -1) {
        -: 4370:        size_t max = sizes[0];
        -: 4371:        struct memcntl_mha arg = {0};
        -: 4372:        int ii;
        -: 4373:
        -: 4374:        for (ii = 1; ii < avail; ++ii) {
        -: 4375:            if (max < sizes[ii]) {
        -: 4376:                max = sizes[ii];
        -: 4377:            }
        -: 4378:        }
        -: 4379:
        -: 4380:        arg.mha_flags   = 0;
        -: 4381:        arg.mha_pagesize = max;
        -: 4382:        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;
        -: 4383:
        -: 4384:        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {
        -: 4385:            fprintf(stderr, "Failed to set large pages: %s\n",
        -: 4386:                    strerror(errno));
        -: 4387:            fprintf(stderr, "Will use default page size\n");
        -: 4388:        } else {
        -: 4389:            ret = 0;
        -: 4390:        }
        -: 4391:    } else {
        -: 4392:        fprintf(stderr, "Failed to get supported pagesizes: %s\n",
        -: 4393:                strerror(errno));
        -: 4394:        fprintf(stderr, "Will use default page size\n");
        -: 4395:    }
        -: 4396:
        -: 4397:    return ret;
        -: 4398:#elif defined(__linux__) && defined(MADV_HUGEPAGE)
        -: 4399:    /* check if transparent hugepages is compiled into the kernel */
        -: 4400:    /* RH based systems possibly uses a different path */
    #####: 4401:    static const char *mm_thp_paths[] = {
        -: 4402:        "/sys/kernel/mm/transparent_hugepage/enabled",
        -: 4403:        "/sys/kernel/mm/redhat_transparent_hugepage/enabled",
        -: 4404:        NULL
        -: 4405:    };
        -: 4406:
    #####: 4407:    char thpb[128] = {0};
    #####: 4408:    int pfd = -1;
    #####: 4409:    for (const char **p = mm_thp_paths; *p; p++) {
    #####: 4410:        if ((pfd = open(*p, O_RDONLY)) != -1)
        -: 4411:            break;
        -: 4412:    }
        -: 4413:
    #####: 4414:    if (pfd == -1) {
    #####: 4415:        fprintf(stderr, "Transparent huge pages support not detected.\n");
    #####: 4416:        fprintf(stderr, "Will use default page size.\n");
    #####: 4417:        return -1;
        -: 4418:    }
    #####: 4419:    ssize_t rd = read(pfd, thpb, sizeof(thpb));
    #####: 4420:    close(pfd);
    #####: 4421:    if (rd <= 0) {
    #####: 4422:        fprintf(stderr, "Transparent huge pages could not read the configuration.\n");
    #####: 4423:        fprintf(stderr, "Will use default page size.\n");
    #####: 4424:        return -1;
        -: 4425:    }
    #####: 4426:    thpb[rd] = 0;
    #####: 4427:    if (strstr(thpb, "[never]")) {
    #####: 4428:        fprintf(stderr, "Transparent huge pages support disabled.\n");
    #####: 4429:        fprintf(stderr, "Will use default page size.\n");
    #####: 4430:        return -1;
        -: 4431:    }
        -: 4432:    return 0;
        -: 4433:#elif defined(__FreeBSD__)
        -: 4434:    int spages;
        -: 4435:    size_t spagesl = sizeof(spages);
        -: 4436:
        -: 4437:    if (sysctlbyname("vm.pmap.pg_ps_enabled", &spages,
        -: 4438:    &spagesl, NULL, 0) != 0) {
        -: 4439:        fprintf(stderr, "Could not evaluate the presence of superpages features.");
        -: 4440:        return -1;
        -: 4441:    }
        -: 4442:    if (spages != 1) {
        -: 4443:        fprintf(stderr, "Superpages support not detected.\n");
        -: 4444:        fprintf(stderr, "Will use default page size.\n");
        -: 4445:        return -1;
        -: 4446:    }
        -: 4447:    return 0;
        -: 4448:#else
        -: 4449:    return -1;
        -: 4450:#endif
        -: 4451:}
        -: 4452:
        -: 4453:/**
        -: 4454: * Do basic sanity check of the runtime environment
        -: 4455: * @return true if no errors found, false if we can't use this env
        -: 4456: */
      441: 4457:static bool sanitycheck(void) {
        -: 4458:    /* One of our biggest problems is old and bogus libevents */
      441: 4459:    const char *ever = event_get_version();
      441: 4460:    if (ever != NULL) {
      441: 4461:        if (strncmp(ever, "1.", 2) == 0) {
    #####: 4462:            fprintf(stderr, "You are using libevent %s.\nPlease upgrade to 2.x"
        -: 4463:                        " or newer\n", event_get_version());
    #####: 4464:            return false;
        -: 4465:        }
        -: 4466:    }
        -: 4467:
        -: 4468:    return true;
        -: 4469:}
        -: 4470:
    #####: 4471:static bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {
    #####: 4472:    char *b = NULL;
    #####: 4473:    uint32_t size = 0;
    #####: 4474:    int i = 0;
    #####: 4475:    uint32_t last_size = 0;
        -: 4476:
    #####: 4477:    if (strlen(s) < 1)
        -: 4478:        return false;
        -: 4479:
    #####: 4480:    for (char *p = strtok_r(s, "-", &b);
    #####: 4481:         p != NULL;
    #####: 4482:         p = strtok_r(NULL, "-", &b)) {
    #####: 4483:        if (!safe_strtoul(p, &size) || size < settings.chunk_size
    #####: 4484:             || size > settings.slab_chunk_size_max) {
    #####: 4485:            fprintf(stderr, "slab size %u is out of valid range\n", size);
    #####: 4486:            return false;
        -: 4487:        }
    #####: 4488:        if (last_size >= size) {
    #####: 4489:            fprintf(stderr, "slab size %u cannot be lower than or equal to a previous class size\n", size);
    #####: 4490:            return false;
        -: 4491:        }
    #####: 4492:        if (size <= last_size + CHUNK_ALIGN_BYTES) {
    #####: 4493:            fprintf(stderr, "slab size %u must be at least %d bytes larger than previous class\n",
        -: 4494:                    size, CHUNK_ALIGN_BYTES);
    #####: 4495:            return false;
        -: 4496:        }
    #####: 4497:        slab_sizes[i++] = size;
    #####: 4498:        last_size = size;
    #####: 4499:        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {
    #####: 4500:            fprintf(stderr, "too many slab classes specified\n");
    #####: 4501:            return false;
        -: 4502:        }
        -: 4503:    }
        -: 4504:
    #####: 4505:    slab_sizes[i] = 0;
    #####: 4506:    return true;
        -: 4507:}
        -: 4508:
        -: 4509:struct _mc_meta_data {
        -: 4510:    void *mmap_base;
        -: 4511:    uint64_t old_base;
        -: 4512:    char *slab_config; // string containing either factor or custom slab list.
        -: 4513:    int64_t time_delta;
        -: 4514:    uint64_t process_started;
        -: 4515:    uint32_t current_time;
        -: 4516:};
        -: 4517:
        -: 4518:// We need to remember a combination of configuration settings and global
        -: 4519:// state for restart viability and resumption of internal services.
        -: 4520:// Compared to the number of tunables and state values, relatively little
        -: 4521:// does need to be remembered.
        -: 4522:// Time is the hardest; we have to assume the sys clock is correct and re-sync for
        -: 4523:// the lost time after restart.
        1: 4524:static int _mc_meta_save_cb(const char *tag, void *ctx, void *data) {
        1: 4525:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        -: 4526:
        -: 4527:    // Settings to remember.
        -: 4528:    // TODO: should get a version of version which is numeric, else
        -: 4529:    // comparisons for compat reasons are difficult.
        -: 4530:    // it may be possible to punt on this for now; since we can test for the
        -: 4531:    // absence of another key... such as the new numeric version.
        -: 4532:    //restart_set_kv(ctx, "version", "%s", VERSION);
        -: 4533:    // We hold the original factor or subopts _string_
        -: 4534:    // it can be directly compared without roundtripping through floats or
        -: 4535:    // serializing/deserializing the long options list.
        1: 4536:    restart_set_kv(ctx, "slab_config", "%s", meta->slab_config);
        1: 4537:    restart_set_kv(ctx, "maxbytes", "%llu", (unsigned long long) settings.maxbytes);
        1: 4538:    restart_set_kv(ctx, "chunk_size", "%d", settings.chunk_size);
        1: 4539:    restart_set_kv(ctx, "item_size_max", "%d", settings.item_size_max);
        1: 4540:    restart_set_kv(ctx, "slab_chunk_size_max", "%d", settings.slab_chunk_size_max);
        1: 4541:    restart_set_kv(ctx, "slab_page_size", "%d", settings.slab_page_size);
        1: 4542:    restart_set_kv(ctx, "use_cas", "%s", settings.use_cas ? "true" : "false");
        1: 4543:    restart_set_kv(ctx, "slab_reassign", "%s", settings.slab_reassign ? "true" : "false");
        -: 4544:
        -: 4545:    // Online state to remember.
        -: 4546:
        -: 4547:    // current time is tough. we need to rely on the clock being correct to
        -: 4548:    // pull the delta between stop and start times. we also need to know the
        -: 4549:    // delta between start time and now to restore monotonic clocks.
        -: 4550:    // for non-monotonic clocks (some OS?), process_started is the only
        -: 4551:    // important one.
        1: 4552:    restart_set_kv(ctx, "current_time", "%u", current_time);
        -: 4553:    // types are great until... this. some systems time_t could be big, but
        -: 4554:    // I'm assuming never negative.
        1: 4555:    restart_set_kv(ctx, "process_started", "%llu", (unsigned long long) process_started);
        -: 4556:    {
        1: 4557:        struct timeval tv;
        1: 4558:        gettimeofday(&tv, NULL);
        1: 4559:        restart_set_kv(ctx, "stop_time", "%lu", tv.tv_sec);
        -: 4560:    }
        -: 4561:
        -: 4562:    // Might as well just fetch the next CAS value to use than tightly
        -: 4563:    // coupling the internal variable into the restart system.
        1: 4564:    restart_set_kv(ctx, "current_cas", "%llu", (unsigned long long) get_cas_id());
        1: 4565:    restart_set_kv(ctx, "logger_gid", "%llu", logger_get_gid());
        1: 4566:    restart_set_kv(ctx, "hashpower", "%u", stats_state.hash_power_level);
        -: 4567:    // NOTE: oldest_live is a rel_time_t, which aliases for unsigned int.
        -: 4568:    // should future proof this with a 64bit upcast, or fetch value from a
        -: 4569:    // converter function/macro?
        1: 4570:    restart_set_kv(ctx, "oldest_live", "%u", settings.oldest_live);
        -: 4571:    // TODO: use uintptr_t etc? is it portable enough?
        1: 4572:    restart_set_kv(ctx, "mmap_oldbase", "%p", meta->mmap_base);
        -: 4573:
        1: 4574:    return 0;
        -: 4575:}
        -: 4576:
        -: 4577:// We must see at least this number of checked lines. Else empty/missing lines
        -: 4578:// could cause a false-positive.
        -: 4579:// TODO: Once crc32'ing of the metadata file is done this could be ensured better by
        -: 4580:// the restart module itself (crc32 + count of lines must match on the
        -: 4581:// backend)
        -: 4582:#define RESTART_REQUIRED_META 16
        -: 4583:
        -: 4584:// With this callback we make a decision on if the current configuration
        -: 4585:// matches up enough to allow reusing the cache.
        -: 4586:// We also re-load important runtime information.
        1: 4587:static int _mc_meta_load_cb(const char *tag, void *ctx, void *data) {
        1: 4588:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        1: 4589:    char *key;
        1: 4590:    char *val;
        1: 4591:    int reuse_mmap = 0;
        1: 4592:    meta->process_started = 0;
        1: 4593:    meta->time_delta = 0;
        1: 4594:    meta->current_time = 0;
        1: 4595:    int lines_seen = 0;
        -: 4596:
        -: 4597:    // TODO: not sure this is any better than just doing an if/else tree with
        -: 4598:    // strcmp's...
        1: 4599:    enum {
        -: 4600:        R_MMAP_OLDBASE = 0,
        -: 4601:        R_MAXBYTES,
        -: 4602:        R_CHUNK_SIZE,
        -: 4603:        R_ITEM_SIZE_MAX,
        -: 4604:        R_SLAB_CHUNK_SIZE_MAX,
        -: 4605:        R_SLAB_PAGE_SIZE,
        -: 4606:        R_SLAB_CONFIG,
        -: 4607:        R_USE_CAS,
        -: 4608:        R_SLAB_REASSIGN,
        -: 4609:        R_CURRENT_CAS,
        -: 4610:        R_OLDEST_LIVE,
        -: 4611:        R_LOGGER_GID,
        -: 4612:        R_CURRENT_TIME,
        -: 4613:        R_STOP_TIME,
        -: 4614:        R_PROCESS_STARTED,
        -: 4615:        R_HASHPOWER,
        -: 4616:    };
        -: 4617:
        1: 4618:    const char *opts[] = {
        -: 4619:        [R_MMAP_OLDBASE] = "mmap_oldbase",
        -: 4620:        [R_MAXBYTES] = "maxbytes",
        -: 4621:        [R_CHUNK_SIZE] = "chunk_size",
        -: 4622:        [R_ITEM_SIZE_MAX] = "item_size_max",
        -: 4623:        [R_SLAB_CHUNK_SIZE_MAX] = "slab_chunk_size_max",
        -: 4624:        [R_SLAB_PAGE_SIZE] = "slab_page_size",
        -: 4625:        [R_SLAB_CONFIG] = "slab_config",
        -: 4626:        [R_USE_CAS] = "use_cas",
        -: 4627:        [R_SLAB_REASSIGN] = "slab_reassign",
        -: 4628:        [R_CURRENT_CAS] = "current_cas",
        -: 4629:        [R_OLDEST_LIVE] = "oldest_live",
        -: 4630:        [R_LOGGER_GID] = "logger_gid",
        -: 4631:        [R_CURRENT_TIME] = "current_time",
        -: 4632:        [R_STOP_TIME] = "stop_time",
        -: 4633:        [R_PROCESS_STARTED] = "process_started",
        -: 4634:        [R_HASHPOWER] = "hashpower",
        -: 4635:        NULL
        -: 4636:    };
        -: 4637:
       17: 4638:    while (restart_get_kv(ctx, &key, &val) == RESTART_OK) {
       16: 4639:        int type = 0;
       16: 4640:        int32_t val_int = 0;
       16: 4641:        uint32_t val_uint = 0;
       16: 4642:        int64_t bigval_int = 0;
       16: 4643:        uint64_t bigval_uint = 0;
        -: 4644:
      136: 4645:        while (opts[type] != NULL && strcmp(key, opts[type]) != 0) {
      120: 4646:            type++;
        -: 4647:        }
      16*: 4648:        if (opts[type] == NULL) {
    #####: 4649:            fprintf(stderr, "[restart] unknown/unhandled key: %s\n", key);
    #####: 4650:            continue;
        -: 4651:        }
       16: 4652:        lines_seen++;
        -: 4653:
        -: 4654:        // helper for any boolean checkers.
       16: 4655:        bool val_bool = false;
       16: 4656:        bool is_bool = true;
       16: 4657:        if (strcmp(val, "false") == 0) {
        -: 4658:            val_bool = false;
       16: 4659:        } else if (strcmp(val, "true") == 0) {
        -: 4660:            val_bool = true;
        -: 4661:        } else {
       14: 4662:            is_bool = false;
        -: 4663:        }
        -: 4664:
       16: 4665:        switch (type) {
        1: 4666:        case R_MMAP_OLDBASE:
        1: 4667:            if (!safe_strtoull_hex(val, &meta->old_base)) {
    #####: 4668:                fprintf(stderr, "[restart] failed to parse %s: %s\n", key, val);
    #####: 4669:                reuse_mmap = -1;
        -: 4670:            }
        -: 4671:            break;
        1: 4672:        case R_MAXBYTES:
        1: 4673:            if (!safe_strtoll(val, &bigval_int) || settings.maxbytes != bigval_int) {
        -: 4674:                reuse_mmap = -1;
        -: 4675:            }
        -: 4676:            break;
        1: 4677:        case R_CHUNK_SIZE:
        1: 4678:            if (!safe_strtol(val, &val_int) || settings.chunk_size != val_int) {
        -: 4679:                reuse_mmap = -1;
        -: 4680:            }
        -: 4681:            break;
        1: 4682:        case R_ITEM_SIZE_MAX:
        1: 4683:            if (!safe_strtol(val, &val_int) || settings.item_size_max != val_int) {
        -: 4684:                reuse_mmap = -1;
        -: 4685:            }
        -: 4686:            break;
        1: 4687:        case R_SLAB_CHUNK_SIZE_MAX:
        1: 4688:            if (!safe_strtol(val, &val_int) || settings.slab_chunk_size_max != val_int) {
        -: 4689:                reuse_mmap = -1;
        -: 4690:            }
        -: 4691:            break;
        1: 4692:        case R_SLAB_PAGE_SIZE:
        1: 4693:            if (!safe_strtol(val, &val_int) || settings.slab_page_size != val_int) {
        -: 4694:                reuse_mmap = -1;
        -: 4695:            }
        -: 4696:            break;
        1: 4697:        case R_SLAB_CONFIG:
        1: 4698:            if (strcmp(val, meta->slab_config) != 0) {
        -: 4699:                reuse_mmap = -1;
        -: 4700:            }
        -: 4701:            break;
        1: 4702:        case R_USE_CAS:
        1: 4703:            if (!is_bool || settings.use_cas != val_bool) {
        -: 4704:                reuse_mmap = -1;
        -: 4705:            }
        -: 4706:            break;
        1: 4707:        case R_SLAB_REASSIGN:
        1: 4708:            if (!is_bool || settings.slab_reassign != val_bool) {
        -: 4709:                reuse_mmap = -1;
        -: 4710:            }
        -: 4711:            break;
        1: 4712:        case R_CURRENT_CAS:
        -: 4713:            // FIXME: do we need to fail if these values _aren't_ found?
        1: 4714:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4715:                reuse_mmap = -1;
        -: 4716:            } else {
        1: 4717:                set_cas_id(bigval_uint);
        -: 4718:            }
        -: 4719:            break;
        1: 4720:        case R_OLDEST_LIVE:
        1: 4721:            if (!safe_strtoul(val, &val_uint)) {
        -: 4722:                reuse_mmap = -1;
        -: 4723:            } else {
        1: 4724:                settings.oldest_live = val_uint;
        -: 4725:            }
        -: 4726:            break;
        1: 4727:        case R_LOGGER_GID:
        1: 4728:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4729:                reuse_mmap = -1;
        -: 4730:            } else {
        1: 4731:                logger_set_gid(bigval_uint);
        -: 4732:            }
        -: 4733:            break;
        1: 4734:        case R_PROCESS_STARTED:
        1: 4735:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4736:                reuse_mmap = -1;
        -: 4737:            } else {
        1: 4738:                meta->process_started = bigval_uint;
        -: 4739:            }
        -: 4740:            break;
        1: 4741:        case R_CURRENT_TIME:
        1: 4742:            if (!safe_strtoul(val, &val_uint)) {
        -: 4743:                reuse_mmap = -1;
        -: 4744:            } else {
        1: 4745:                meta->current_time = val_uint;
        -: 4746:            }
        -: 4747:            break;
        1: 4748:        case R_STOP_TIME:
        1: 4749:            if (!safe_strtoll(val, &bigval_int)) {
        -: 4750:                reuse_mmap = -1;
        -: 4751:            } else {
        1: 4752:                struct timeval t;
        1: 4753:                gettimeofday(&t, NULL);
        1: 4754:                meta->time_delta = t.tv_sec - bigval_int;
        -: 4755:                // clock has done something crazy.
        -: 4756:                // there are _lots_ of ways the clock can go wrong here, but
        -: 4757:                // this is a safe sanity check since there's nothing else we
        -: 4758:                // can realistically do.
        1: 4759:                if (meta->time_delta <= 0) {
    #####: 4760:                    reuse_mmap = -1;
        -: 4761:                }
        -: 4762:            }
        -: 4763:            break;
        1: 4764:        case R_HASHPOWER:
        1: 4765:            if (!safe_strtoul(val, &val_uint)) {
        -: 4766:                reuse_mmap = -1;
        -: 4767:            } else {
        1: 4768:                settings.hashpower_init = val_uint;
        -: 4769:            }
        -: 4770:            break;
    #####: 4771:        default:
    #####: 4772:            fprintf(stderr, "[restart] unhandled key: %s\n", key);
        -: 4773:        }
        -: 4774:
      16*: 4775:        if (reuse_mmap != 0) {
    #####: 4776:            fprintf(stderr, "[restart] restart incompatible due to setting for [%s] [old value: %s]\n", key, val);
    #####: 4777:            break;
        -: 4778:        }
        -: 4779:    }
        -: 4780:
        1: 4781:    if (lines_seen < RESTART_REQUIRED_META) {
    #####: 4782:        fprintf(stderr, "[restart] missing some metadata lines\n");
    #####: 4783:        reuse_mmap = -1;
        -: 4784:    }
        -: 4785:
        1: 4786:    return reuse_mmap;
        -: 4787:}
        -: 4788:
      441: 4789:int main (int argc, char **argv) {
      441: 4790:    int c;
      441: 4791:    bool lock_memory = false;
      441: 4792:    bool do_daemonize = false;
      441: 4793:    bool preallocate = false;
      441: 4794:    int maxcore = 0;
      441: 4795:    char *username = NULL;
      441: 4796:    char *pid_file = NULL;
      441: 4797:    struct passwd *pw;
      441: 4798:    struct rlimit rlim;
      441: 4799:    char *buf;
      441: 4800:    char unit = '\0';
      441: 4801:    int size_max = 0;
      441: 4802:    int retval = EXIT_SUCCESS;
      441: 4803:    bool protocol_specified = false;
      441: 4804:    bool tcp_specified = false;
      441: 4805:    bool udp_specified = false;
      441: 4806:    bool start_lru_maintainer = true;
      441: 4807:    bool start_lru_crawler = true;
      441: 4808:    bool start_assoc_maint = true;
      441: 4809:    enum hashfunc_type hash_type = MURMUR3_HASH;
      441: 4810:    uint32_t tocrawl;
      441: 4811:    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];
      441: 4812:    bool use_slab_sizes = false;
      441: 4813:    char *slab_sizes_unparsed = NULL;
      441: 4814:    bool slab_chunk_size_changed = false;
        -: 4815:    // struct for restart code. Initialized up here so we can curry
        -: 4816:    // important settings to save or validate.
      441: 4817:    struct _mc_meta_data *meta = malloc(sizeof(struct _mc_meta_data));
      441: 4818:    meta->slab_config = NULL;
      441: 4819:    char *subopts, *subopts_orig;
      441: 4820:    char *subopts_value;
      441: 4821:    enum {
        -: 4822:        MAXCONNS_FAST = 0,
        -: 4823:        HASHPOWER_INIT,
        -: 4824:        NO_HASHEXPAND,
        -: 4825:        SLAB_REASSIGN,
        -: 4826:        SLAB_AUTOMOVE,
        -: 4827:        SLAB_AUTOMOVE_RATIO,
        -: 4828:        SLAB_AUTOMOVE_WINDOW,
        -: 4829:        TAIL_REPAIR_TIME,
        -: 4830:        HASH_ALGORITHM,
        -: 4831:        LRU_CRAWLER,
        -: 4832:        LRU_CRAWLER_SLEEP,
        -: 4833:        LRU_CRAWLER_TOCRAWL,
        -: 4834:        LRU_MAINTAINER,
        -: 4835:        HOT_LRU_PCT,
        -: 4836:        WARM_LRU_PCT,
        -: 4837:        HOT_MAX_FACTOR,
        -: 4838:        WARM_MAX_FACTOR,
        -: 4839:        TEMPORARY_TTL,
        -: 4840:        IDLE_TIMEOUT,
        -: 4841:        WATCHER_LOGBUF_SIZE,
        -: 4842:        WORKER_LOGBUF_SIZE,
        -: 4843:        SLAB_SIZES,
        -: 4844:        SLAB_CHUNK_MAX,
        -: 4845:        TRACK_SIZES,
        -: 4846:        NO_INLINE_ASCII_RESP,
        -: 4847:        MODERN,
        -: 4848:        NO_MODERN,
        -: 4849:        NO_CHUNKED_ITEMS,
        -: 4850:        NO_SLAB_REASSIGN,
        -: 4851:        NO_SLAB_AUTOMOVE,
        -: 4852:        NO_MAXCONNS_FAST,
        -: 4853:        INLINE_ASCII_RESP,
        -: 4854:        NO_LRU_CRAWLER,
        -: 4855:        NO_LRU_MAINTAINER,
        -: 4856:        NO_DROP_PRIVILEGES,
        -: 4857:        DROP_PRIVILEGES,
        -: 4858:        RESP_OBJ_MEM_LIMIT,
        -: 4859:        READ_BUF_MEM_LIMIT,
        -: 4860:#ifdef TLS
        -: 4861:        SSL_CERT,
        -: 4862:        SSL_KEY,
        -: 4863:        SSL_VERIFY_MODE,
        -: 4864:        SSL_KEYFORM,
        -: 4865:        SSL_CIPHERS,
        -: 4866:        SSL_CA_CERT,
        -: 4867:        SSL_WBUF_SIZE,
        -: 4868:        SSL_SESSION_CACHE,
        -: 4869:        SSL_KERNEL_TLS,
        -: 4870:        SSL_MIN_VERSION,
        -: 4871:#endif
        -: 4872:#ifdef PROXY
        -: 4873:        PROXY_CONFIG,
        -: 4874:        PROXY_ARG,
        -: 4875:        PROXY_URING,
        -: 4876:        PROXY_MEMPROFILE,
        -: 4877:#endif
        -: 4878:#ifdef MEMCACHED_DEBUG
        -: 4879:        RELAXED_PRIVILEGES,
        -: 4880:#endif
        -: 4881:#ifdef SOCK_COOKIE_ID
        -: 4882:        COOKIE_ID,
        -: 4883:#endif
        -: 4884:    };
      441: 4885:    char *const subopts_tokens[] = {
        -: 4886:        [MAXCONNS_FAST] = "maxconns_fast",
        -: 4887:        [HASHPOWER_INIT] = "hashpower",
        -: 4888:        [NO_HASHEXPAND] = "no_hashexpand",
        -: 4889:        [SLAB_REASSIGN] = "slab_reassign",
        -: 4890:        [SLAB_AUTOMOVE] = "slab_automove",
        -: 4891:        [SLAB_AUTOMOVE_RATIO] = "slab_automove_ratio",
        -: 4892:        [SLAB_AUTOMOVE_WINDOW] = "slab_automove_window",
        -: 4893:        [TAIL_REPAIR_TIME] = "tail_repair_time",
        -: 4894:        [HASH_ALGORITHM] = "hash_algorithm",
        -: 4895:        [LRU_CRAWLER] = "lru_crawler",
        -: 4896:        [LRU_CRAWLER_SLEEP] = "lru_crawler_sleep",
        -: 4897:        [LRU_CRAWLER_TOCRAWL] = "lru_crawler_tocrawl",
        -: 4898:        [LRU_MAINTAINER] = "lru_maintainer",
        -: 4899:        [HOT_LRU_PCT] = "hot_lru_pct",
        -: 4900:        [WARM_LRU_PCT] = "warm_lru_pct",
        -: 4901:        [HOT_MAX_FACTOR] = "hot_max_factor",
        -: 4902:        [WARM_MAX_FACTOR] = "warm_max_factor",
        -: 4903:        [TEMPORARY_TTL] = "temporary_ttl",
        -: 4904:        [IDLE_TIMEOUT] = "idle_timeout",
        -: 4905:        [WATCHER_LOGBUF_SIZE] = "watcher_logbuf_size",
        -: 4906:        [WORKER_LOGBUF_SIZE] = "worker_logbuf_size",
        -: 4907:        [SLAB_SIZES] = "slab_sizes",
        -: 4908:        [SLAB_CHUNK_MAX] = "slab_chunk_max",
        -: 4909:        [TRACK_SIZES] = "track_sizes",
        -: 4910:        [NO_INLINE_ASCII_RESP] = "no_inline_ascii_resp",
        -: 4911:        [MODERN] = "modern",
        -: 4912:        [NO_MODERN] = "no_modern",
        -: 4913:        [NO_CHUNKED_ITEMS] = "no_chunked_items",
        -: 4914:        [NO_SLAB_REASSIGN] = "no_slab_reassign",
        -: 4915:        [NO_SLAB_AUTOMOVE] = "no_slab_automove",
        -: 4916:        [NO_MAXCONNS_FAST] = "no_maxconns_fast",
        -: 4917:        [INLINE_ASCII_RESP] = "inline_ascii_resp",
        -: 4918:        [NO_LRU_CRAWLER] = "no_lru_crawler",
        -: 4919:        [NO_LRU_MAINTAINER] = "no_lru_maintainer",
        -: 4920:        [NO_DROP_PRIVILEGES] = "no_drop_privileges",
        -: 4921:        [DROP_PRIVILEGES] = "drop_privileges",
        -: 4922:        [RESP_OBJ_MEM_LIMIT] = "resp_obj_mem_limit",
        -: 4923:        [READ_BUF_MEM_LIMIT] = "read_buf_mem_limit",
        -: 4924:#ifdef TLS
        -: 4925:        [SSL_CERT] = "ssl_chain_cert",
        -: 4926:        [SSL_KEY] = "ssl_key",
        -: 4927:        [SSL_VERIFY_MODE] = "ssl_verify_mode",
        -: 4928:        [SSL_KEYFORM] = "ssl_keyformat",
        -: 4929:        [SSL_CIPHERS] = "ssl_ciphers",
        -: 4930:        [SSL_CA_CERT] = "ssl_ca_cert",
        -: 4931:        [SSL_WBUF_SIZE] = "ssl_wbuf_size",
        -: 4932:        [SSL_SESSION_CACHE] = "ssl_session_cache",
        -: 4933:        [SSL_KERNEL_TLS] = "ssl_kernel_tls",
        -: 4934:        [SSL_MIN_VERSION] = "ssl_min_version",
        -: 4935:#endif
        -: 4936:#ifdef PROXY
        -: 4937:        [PROXY_CONFIG] = "proxy_config",
        -: 4938:        [PROXY_ARG] = "proxy_arg",
        -: 4939:        [PROXY_URING] = "proxy_uring",
        -: 4940:        [PROXY_MEMPROFILE] = "proxy_memprofile",
        -: 4941:#endif
        -: 4942:#ifdef MEMCACHED_DEBUG
        -: 4943:        [RELAXED_PRIVILEGES] = "relaxed_privileges",
        -: 4944:#endif
        -: 4945:#ifdef SOCK_COOKIE_ID
        -: 4946:        [COOKIE_ID] = "sock_cookie_id",
        -: 4947:#endif
        -: 4948:        NULL
        -: 4949:    };
        -: 4950:
      441: 4951:    if (!sanitycheck()) {
    #####: 4952:        free(meta);
    #####: 4953:        return EX_OSERR;
        -: 4954:    }
        -: 4955:
        -: 4956:    /* handle SIGINT, SIGTERM */
      441: 4957:    signal(SIGINT, sig_handler);
      441: 4958:    signal(SIGTERM, sig_handler);
      441: 4959:    signal(SIGHUP, sighup_handler);
      441: 4960:    signal(SIGUSR1, sig_usrhandler);
        -: 4961:
        -: 4962:    /* init settings */
      441: 4963:    settings_init();
      441: 4964:    verify_default("hash_algorithm", hash_type == MURMUR3_HASH);
        -: 4965:#ifdef EXTSTORE
      441: 4966:    void *storage = NULL;
      441: 4967:    void *storage_cf = storage_init_config(&settings);
      441: 4968:    bool storage_enabled = false;
      441: 4969:    if (storage_cf == NULL) {
    #####: 4970:        fprintf(stderr, "failed to allocate extstore config\n");
    #####: 4971:        return 1;
        -: 4972:    }
        -: 4973:#endif
        -: 4974:
        -: 4975:    /* set stderr non-buffering (for running under, say, daemontools) */
      441: 4976:    setbuf(stderr, NULL);
        -: 4977:
      441: 4978:    char *shortopts =
        -: 4979:          "a:"  /* access mask for unix socket */
        -: 4980:          "A"   /* enable admin shutdown command */
        -: 4981:          "Z"   /* enable SSL */
        -: 4982:          "p:"  /* TCP port number to listen on */
        -: 4983:          "s:"  /* unix socket path to listen on */
        -: 4984:          "U:"  /* UDP port number to listen on */
        -: 4985:          "m:"  /* max memory to use for items in megabytes */
        -: 4986:          "M"   /* return error on memory exhausted */
        -: 4987:          "c:"  /* max simultaneous connections */
        -: 4988:          "k"   /* lock down all paged memory */
        -: 4989:          "hiV" /* help, licence info, version */
        -: 4990:          "r"   /* maximize core file limit */
        -: 4991:          "v"   /* verbose */
        -: 4992:          "d"   /* daemon mode */
        -: 4993:          "l:"  /* interface to listen on */
        -: 4994:          "u:"  /* user identity to run as */
        -: 4995:          "P:"  /* save PID in file */
        -: 4996:          "f:"  /* factor? */
        -: 4997:          "n:"  /* minimum space allocated for key+value+flags */
        -: 4998:          "t:"  /* threads */
        -: 4999:          "D:"  /* prefix delimiter? */
        -: 5000:          "L"   /* Large memory pages */
        -: 5001:          "R:"  /* max requests per event */
        -: 5002:          "C"   /* Disable use of CAS */
        -: 5003:          "b:"  /* backlog queue limit */
        -: 5004:          "B:"  /* Binding protocol */
        -: 5005:          "I:"  /* Max item size */
        -: 5006:          "S"   /* Sasl ON */
        -: 5007:          "F"   /* Disable flush_all */
        -: 5008:          "X"   /* Disable dump commands */
        -: 5009:          "W"   /* Disable watch commands */
        -: 5010:          "Y:"   /* Enable token auth */
        -: 5011:          "e:"  /* mmap path for external item memory */
        -: 5012:          "o:"  /* Extended generic options */
        -: 5013:          "N:"  /* NAPI ID based thread selection */
        -: 5014:          ;
        -: 5015:
        -: 5016:    /* process arguments */
        -: 5017:#ifdef HAVE_GETOPT_LONG
      441: 5018:    const struct option longopts[] = {
        -: 5019:        {"unix-mask", required_argument, 0, 'a'},
        -: 5020:        {"enable-shutdown", no_argument, 0, 'A'},
        -: 5021:        {"enable-ssl", no_argument, 0, 'Z'},
        -: 5022:        {"port", required_argument, 0, 'p'},
        -: 5023:        {"unix-socket", required_argument, 0, 's'},
        -: 5024:        {"udp-port", required_argument, 0, 'U'},
        -: 5025:        {"memory-limit", required_argument, 0, 'm'},
        -: 5026:        {"disable-evictions", no_argument, 0, 'M'},
        -: 5027:        {"conn-limit", required_argument, 0, 'c'},
        -: 5028:        {"lock-memory", no_argument, 0, 'k'},
        -: 5029:        {"help", no_argument, 0, 'h'},
        -: 5030:        {"license", no_argument, 0, 'i'},
        -: 5031:        {"version", no_argument, 0, 'V'},
        -: 5032:        {"enable-coredumps", no_argument, 0, 'r'},
        -: 5033:        {"verbose", optional_argument, 0, 'v'},
        -: 5034:        {"daemon", no_argument, 0, 'd'},
        -: 5035:        {"listen", required_argument, 0, 'l'},
        -: 5036:        {"user", required_argument, 0, 'u'},
        -: 5037:        {"pidfile", required_argument, 0, 'P'},
        -: 5038:        {"slab-growth-factor", required_argument, 0, 'f'},
        -: 5039:        {"slab-min-size", required_argument, 0, 'n'},
        -: 5040:        {"threads", required_argument, 0, 't'},
        -: 5041:        {"enable-largepages", no_argument, 0, 'L'},
        -: 5042:        {"max-reqs-per-event", required_argument, 0, 'R'},
        -: 5043:        {"disable-cas", no_argument, 0, 'C'},
        -: 5044:        {"listen-backlog", required_argument, 0, 'b'},
        -: 5045:        {"protocol", required_argument, 0, 'B'},
        -: 5046:        {"max-item-size", required_argument, 0, 'I'},
        -: 5047:        {"enable-sasl", no_argument, 0, 'S'},
        -: 5048:        {"disable-flush-all", no_argument, 0, 'F'},
        -: 5049:        {"disable-dumping", no_argument, 0, 'X'},
        -: 5050:        {"disable-watch", no_argument, 0, 'W'},
        -: 5051:        {"auth-file", required_argument, 0, 'Y'},
        -: 5052:        {"memory-file", required_argument, 0, 'e'},
        -: 5053:        {"extended", required_argument, 0, 'o'},
        -: 5054:        {"napi-ids", required_argument, 0, 'N'},
        -: 5055:        {0, 0, 0, 0}
        -: 5056:    };
      441: 5057:    int optindex;
      829: 5058:    while (-1 != (c = getopt_long(argc, argv, shortopts,
        -: 5059:                    longopts, &optindex))) {
        -: 5060:#else
        -: 5061:    while (-1 != (c = getopt(argc, argv, shortopts))) {
        -: 5062:#endif
      707: 5063:        switch (c) {
        5: 5064:        case 'A':
        -: 5065:            /* enables "shutdown" command */
        5: 5066:            settings.shutdown_command = true;
        5: 5067:            break;
    #####: 5068:        case 'Z':
        -: 5069:            /* enable secure communication*/
        -: 5070:#ifdef TLS
        -: 5071:            settings.ssl_enabled = true;
        -: 5072:#else
    #####: 5073:            fprintf(stderr, "This server is not built with TLS support.\n");
    #####: 5074:            exit(EX_USAGE);
        -: 5075:#endif
    #####: 5076:            break;
    #####: 5077:        case 'a':
        -: 5078:#ifndef DISABLE_UNIX_SOCKET
        -: 5079:            /* access for unix domain socket, as octal mask (like chmod)*/
    #####: 5080:            settings.access= strtol(optarg,NULL,8);
        -: 5081:#else
        -: 5082:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5083:            exit(EX_USAGE);
        -: 5084:#endif /* #ifndef DISABLE_UNIX_SOCKET */
    #####: 5085:            break;
       29: 5086:        case 'U':
       29: 5087:            settings.udpport = atoi(optarg);
       29: 5088:            udp_specified = true;
       29: 5089:            break;
       17: 5090:        case 'p':
       17: 5091:            settings.port = atoi(optarg);
       17: 5092:            tcp_specified = true;
       17: 5093:            break;
      102: 5094:        case 's':
        -: 5095:#ifndef DISABLE_UNIX_SOCKET
      102: 5096:            settings.socketpath = optarg;
        -: 5097:#else
        -: 5098:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5099:            exit(EX_USAGE);
        -: 5100:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      102: 5101:            break;
       35: 5102:        case 'm':
       35: 5103:            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;
       35: 5104:            break;
        2: 5105:        case 'M':
        2: 5106:            settings.evict_to_free = 0;
        2: 5107:            break;
        2: 5108:        case 'c':
        2: 5109:            settings.maxconns = atoi(optarg);
        2: 5110:            if (settings.maxconns <= 0) {
        2: 5111:                fprintf(stderr, "Maximum connections must be greater than 0\n");
        2: 5112:                return 1;
        -: 5113:            }
        -: 5114:            break;
      312: 5115:        case 'h':
      312: 5116:            usage();
      312: 5117:            exit(EXIT_SUCCESS);
    #####: 5118:        case 'i':
    #####: 5119:            usage_license();
    #####: 5120:            exit(EXIT_SUCCESS);
        -: 5121:        case 'V':
    #####: 5122:            printf(PACKAGE " " VERSION "\n");
    #####: 5123:            exit(EXIT_SUCCESS);
        -: 5124:        case 'k':
        -: 5125:            lock_memory = true;
        -: 5126:            break;
        6: 5127:        case 'v':
        6: 5128:            settings.verbose++;
        6: 5129:            break;
        7: 5130:        case 'l':
        7: 5131:            if (settings.inter != NULL) {
    #####: 5132:                if (strstr(settings.inter, optarg) != NULL) {
        -: 5133:                    break;
        -: 5134:                }
    #####: 5135:                size_t len = strlen(settings.inter) + strlen(optarg) + 2;
    #####: 5136:                char *p = malloc(len);
    #####: 5137:                if (p == NULL) {
    #####: 5138:                    fprintf(stderr, "Failed to allocate memory\n");
    #####: 5139:                    return 1;
        -: 5140:                }
    #####: 5141:                snprintf(p, len, "%s,%s", settings.inter, optarg);
    #####: 5142:                free(settings.inter);
    #####: 5143:                settings.inter = p;
        -: 5144:            } else {
        7: 5145:                settings.inter= strdup(optarg);
        -: 5146:            }
        -: 5147:            break;
    #####: 5148:        case 'd':
    #####: 5149:            do_daemonize = true;
    #####: 5150:            break;
    #####: 5151:        case 'r':
    #####: 5152:            maxcore = 1;
    #####: 5153:            break;
        2: 5154:        case 'R':
        2: 5155:            settings.reqs_per_event = atoi(optarg);
        2: 5156:            if (settings.reqs_per_event <= 0) {
    #####: 5157:                fprintf(stderr, "Number of requests per event must be greater than 0\n");
    #####: 5158:                return 1;
        -: 5159:            }
        -: 5160:            break;
    #####: 5161:        case 'u':
    #####: 5162:            username = optarg;
    #####: 5163:            break;
    #####: 5164:        case 'P':
    #####: 5165:            pid_file = optarg;
    #####: 5166:            break;
        2: 5167:        case 'e':
        2: 5168:            settings.memory_file = optarg;
        2: 5169:            break;
    #####: 5170:        case 'f':
    #####: 5171:            settings.factor = atof(optarg);
    #####: 5172:            if (settings.factor <= 1.0) {
    #####: 5173:                fprintf(stderr, "Factor must be greater than 1\n");
    #####: 5174:                return 1;
        -: 5175:            }
    #####: 5176:            meta->slab_config = strdup(optarg);
    #####: 5177:            break;
    #####: 5178:        case 'n':
    #####: 5179:            settings.chunk_size = atoi(optarg);
    #####: 5180:            if (settings.chunk_size <= 0) {
    #####: 5181:                fprintf(stderr, "Chunk size must be greater than 0\n");
    #####: 5182:                return 1;
        -: 5183:            }
        -: 5184:            break;
        2: 5185:        case 't':
        2: 5186:            settings.num_threads = atoi(optarg);
        2: 5187:            if (settings.num_threads <= 0) {
        1: 5188:                fprintf(stderr, "Number of threads must be greater than 0\n");
        1: 5189:                return 1;
        -: 5190:            }
        -: 5191:            /* There're other problems when you get above 64 threads.
        -: 5192:             * In the future we should portably detect # of cores for the
        -: 5193:             * default.
        -: 5194:             */
        1: 5195:            if (settings.num_threads > 64) {
    #####: 5196:                fprintf(stderr, "WARNING: Setting a high number of worker"
        -: 5197:                                "threads is not recommended.\n"
        -: 5198:                                " Set this value to the number of cores in"
        -: 5199:                                " your machine or less.\n");
        -: 5200:            }
        -: 5201:            break;
    #####: 5202:        case 'D':
    #####: 5203:            if (! optarg || ! optarg[0]) {
    #####: 5204:                fprintf(stderr, "No delimiter specified\n");
    #####: 5205:                return 1;
        -: 5206:            }
    #####: 5207:            settings.prefix_delimiter = optarg[0];
    #####: 5208:            settings.detail_enabled = 1;
    #####: 5209:            break;
    #####: 5210:        case 'L' :
    #####: 5211:            if (enable_large_pages() == 0) {
        -: 5212:                preallocate = true;
        -: 5213:            } else {
    #####: 5214:                fprintf(stderr, "Cannot enable large pages on this system\n"
        -: 5215:                    "(There is no support as of this version)\n");
    #####: 5216:                return 1;
        -: 5217:            }
        -: 5218:            break;
        1: 5219:        case 'C' :
        1: 5220:            settings.use_cas = false;
        1: 5221:            break;
        1: 5222:        case 'b' :
        1: 5223:            settings.backlog = atoi(optarg);
        1: 5224:            break;
        8: 5225:        case 'B':
        8: 5226:            protocol_specified = true;
        8: 5227:            if (strcmp(optarg, "auto") == 0) {
        2: 5228:                settings.binding_protocol = negotiating_prot;
        6: 5229:            } else if (strcmp(optarg, "binary") == 0) {
        3: 5230:                settings.binding_protocol = binary_prot;
        3: 5231:            } else if (strcmp(optarg, "ascii") == 0) {
        2: 5232:                settings.binding_protocol = ascii_prot;
        -: 5233:            } else {
        1: 5234:                fprintf(stderr, "Invalid value for binding protocol: %s\n"
        -: 5235:                        " -- should be one of auto, binary, or ascii\n", optarg);
        1: 5236:                exit(EX_USAGE);
        -: 5237:            }
        -: 5238:            break;
       10: 5239:        case 'I':
       10: 5240:            buf = strdup(optarg);
       10: 5241:            unit = buf[strlen(buf)-1];
       10: 5242:            if (unit == 'k' || unit == 'm' ||
        -: 5243:                unit == 'K' || unit == 'M') {
        6: 5244:                buf[strlen(buf)-1] = '\0';
        6: 5245:                size_max = atoi(buf);
        6: 5246:                if (unit == 'k' || unit == 'K')
        1: 5247:                    size_max *= 1024;
        6: 5248:                if (unit == 'm' || unit == 'M')
        5: 5249:                    size_max *= 1024 * 1024;
        6: 5250:                settings.item_size_max = size_max;
        -: 5251:            } else {
        4: 5252:                settings.item_size_max = atoi(buf);
        -: 5253:            }
       10: 5254:            free(buf);
       10: 5255:            break;
        1: 5256:        case 'S': /* set Sasl authentication to true. Default is false */
        -: 5257:#ifndef ENABLE_SASL
        1: 5258:            fprintf(stderr, "This server is not built with SASL support.\n");
        1: 5259:            exit(EX_USAGE);
        -: 5260:#endif
        -: 5261:            settings.sasl = true;
        -: 5262:            break;
        1: 5263:       case 'F' :
        1: 5264:            settings.flush_enabled = false;
        1: 5265:            break;
    #####: 5266:       case 'X' :
    #####: 5267:            settings.dump_enabled = false;
    #####: 5268:            break;
        1: 5269:       case 'W' :
        1: 5270:            settings.watch_enabled = false;
        1: 5271:            break;
        1: 5272:       case 'Y' :
        -: 5273:            // dupe the file path now just in case the options get mangled.
        1: 5274:            settings.auth_file = strdup(optarg);
        1: 5275:            break;
    #####: 5276:       case 'N':
    #####: 5277:            settings.num_napi_ids = atoi(optarg);
    #####: 5278:            if (settings.num_napi_ids <= 0) {
    #####: 5279:                fprintf(stderr, "Maximum number of NAPI IDs must be greater than 0\n");
    #####: 5280:                return 1;
        -: 5281:            }
        -: 5282:            break;
      160: 5283:        case 'o': /* It's sub-opts time! */
      160: 5284:            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */
        -: 5285:
      455: 5286:            while (*subopts != '\0') {
        -: 5287:            // BSD getsubopt (at least) has undefined behavior on -1, so
        -: 5288:            // if we want to retry the getsubopt call in submodules we
        -: 5289:            // need an extra layer of string copies.
      297: 5290:            char *subopts_temp_o = NULL;
      297: 5291:            char *subopts_temp = subopts_temp_o = strdup(subopts);
        -: 5292:
      297: 5293:            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {
    #####: 5294:            case MAXCONNS_FAST:
    #####: 5295:                settings.maxconns_fast = true;
    #####: 5296:                break;
    #####: 5297:            case HASHPOWER_INIT:
    #####: 5298:                if (subopts_value == NULL) {
    #####: 5299:                    fprintf(stderr, "Missing numeric argument for hashpower\n");
       2*: 5300:                    return 1;
        -: 5301:                }
    #####: 5302:                settings.hashpower_init = atoi(subopts_value);
    #####: 5303:                if (settings.hashpower_init < 12) {
    #####: 5304:                    fprintf(stderr, "Initial hashtable multiplier of %d is too low\n",
        -: 5305:                        settings.hashpower_init);
    #####: 5306:                    return 1;
    #####: 5307:                } else if (settings.hashpower_init > 32) {
    #####: 5308:                    fprintf(stderr, "Initial hashtable multiplier of %d is too high\n"
        -: 5309:                        "Choose a value based on \"STAT hash_power_level\" from a running instance\n",
        -: 5310:                        settings.hashpower_init);
    #####: 5311:                    return 1;
        -: 5312:                }
        -: 5313:                break;
        -: 5314:            case NO_HASHEXPAND:
      295: 5315:                start_assoc_maint = false;
        -: 5316:                break;
        4: 5317:            case SLAB_REASSIGN:
        4: 5318:                settings.slab_reassign = true;
        4: 5319:                break;
       13: 5320:            case SLAB_AUTOMOVE:
       13: 5321:                if (subopts_value == NULL) {
        2: 5322:                    settings.slab_automove = 1;
        2: 5323:                    break;
        -: 5324:                }
       11: 5325:                settings.slab_automove = atoi(subopts_value);
       11: 5326:                if (settings.slab_automove < 0 || settings.slab_automove > 2) {
    #####: 5327:                    fprintf(stderr, "slab_automove must be between 0 and 2\n");
    #####: 5328:                    return 1;
        -: 5329:                }
        -: 5330:                break;
    #####: 5331:            case SLAB_AUTOMOVE_RATIO:
    #####: 5332:                if (subopts_value == NULL) {
    #####: 5333:                    fprintf(stderr, "Missing slab_automove_ratio argument\n");
    #####: 5334:                    return 1;
        -: 5335:                }
    #####: 5336:                settings.slab_automove_ratio = atof(subopts_value);
    #####: 5337:                if (settings.slab_automove_ratio <= 0 || settings.slab_automove_ratio > 1) {
    #####: 5338:                    fprintf(stderr, "slab_automove_ratio must be > 0 and < 1\n");
    #####: 5339:                    return 1;
        -: 5340:                }
        -: 5341:                break;
        2: 5342:            case SLAB_AUTOMOVE_WINDOW:
        2: 5343:                if (subopts_value == NULL) {
    #####: 5344:                    fprintf(stderr, "Missing slab_automove_window argument\n");
    #####: 5345:                    return 1;
        -: 5346:                }
        2: 5347:                settings.slab_automove_window = atoi(subopts_value);
        2: 5348:                if (settings.slab_automove_window < 3) {
    #####: 5349:                    fprintf(stderr, "slab_automove_window must be > 2\n");
    #####: 5350:                    return 1;
        -: 5351:                }
        -: 5352:                break;
    #####: 5353:            case TAIL_REPAIR_TIME:
    #####: 5354:                if (subopts_value == NULL) {
    #####: 5355:                    fprintf(stderr, "Missing numeric argument for tail_repair_time\n");
    #####: 5356:                    return 1;
        -: 5357:                }
    #####: 5358:                settings.tail_repair_time = atoi(subopts_value);
    #####: 5359:                if (settings.tail_repair_time < 10) {
    #####: 5360:                    fprintf(stderr, "Cannot set tail_repair_time to less than 10 seconds\n");
    #####: 5361:                    return 1;
        -: 5362:                }
        -: 5363:                break;
    #####: 5364:            case HASH_ALGORITHM:
    #####: 5365:                if (subopts_value == NULL) {
    #####: 5366:                    fprintf(stderr, "Missing hash_algorithm argument\n");
    #####: 5367:                    return 1;
    #####: 5368:                };
    #####: 5369:                if (strcmp(subopts_value, "jenkins") == 0) {
        -: 5370:                    hash_type = JENKINS_HASH;
    #####: 5371:                } else if (strcmp(subopts_value, "murmur3") == 0) {
        -: 5372:                    hash_type = MURMUR3_HASH;
    #####: 5373:                } else if (strcmp(subopts_value, "xxh3") == 0) {
        -: 5374:                    hash_type = XXH3_HASH;
        -: 5375:                } else {
    #####: 5376:                    fprintf(stderr, "Unknown hash_algorithm option (jenkins, murmur3, xxh3)\n");
    #####: 5377:                    return 1;
        -: 5378:                }
        -: 5379:                break;
        6: 5380:            case LRU_CRAWLER:
        6: 5381:                start_lru_crawler = true;
        6: 5382:                break;
    #####: 5383:            case LRU_CRAWLER_SLEEP:
    #####: 5384:                if (subopts_value == NULL) {
    #####: 5385:                    fprintf(stderr, "Missing lru_crawler_sleep value\n");
    #####: 5386:                    return 1;
        -: 5387:                }
    #####: 5388:                settings.lru_crawler_sleep = atoi(subopts_value);
    #####: 5389:                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {
    #####: 5390:                    fprintf(stderr, "LRU crawler sleep must be between 0 and 1 second\n");
    #####: 5391:                    return 1;
        -: 5392:                }
        -: 5393:                break;
    #####: 5394:            case LRU_CRAWLER_TOCRAWL:
    #####: 5395:                if (subopts_value == NULL) {
    #####: 5396:                    fprintf(stderr, "Missing lru_crawler_tocrawl value\n");
    #####: 5397:                    return 1;
        -: 5398:                }
    #####: 5399:                if (!safe_strtoul(subopts_value, &tocrawl)) {
    #####: 5400:                    fprintf(stderr, "lru_crawler_tocrawl takes a numeric 32bit value\n");
    #####: 5401:                    return 1;
        -: 5402:                }
    #####: 5403:                settings.lru_crawler_tocrawl = tocrawl;
    #####: 5404:                break;
        5: 5405:            case LRU_MAINTAINER:
        5: 5406:                start_lru_maintainer = true;
        5: 5407:                settings.lru_segmented = true;
        5: 5408:                break;
    #####: 5409:            case HOT_LRU_PCT:
    #####: 5410:                if (subopts_value == NULL) {
    #####: 5411:                    fprintf(stderr, "Missing hot_lru_pct argument\n");
    #####: 5412:                    return 1;
        -: 5413:                }
    #####: 5414:                settings.hot_lru_pct = atoi(subopts_value);
    #####: 5415:                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {
    #####: 5416:                    fprintf(stderr, "hot_lru_pct must be > 1 and < 80\n");
    #####: 5417:                    return 1;
        -: 5418:                }
        -: 5419:                break;
    #####: 5420:            case WARM_LRU_PCT:
    #####: 5421:                if (subopts_value == NULL) {
    #####: 5422:                    fprintf(stderr, "Missing warm_lru_pct argument\n");
    #####: 5423:                    return 1;
        -: 5424:                }
    #####: 5425:                settings.warm_lru_pct = atoi(subopts_value);
    #####: 5426:                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {
    #####: 5427:                    fprintf(stderr, "warm_lru_pct must be > 1 and < 80\n");
    #####: 5428:                    return 1;
        -: 5429:                }
        -: 5430:                break;
    #####: 5431:            case HOT_MAX_FACTOR:
    #####: 5432:                if (subopts_value == NULL) {
    #####: 5433:                    fprintf(stderr, "Missing hot_max_factor argument\n");
    #####: 5434:                    return 1;
        -: 5435:                }
    #####: 5436:                settings.hot_max_factor = atof(subopts_value);
    #####: 5437:                if (settings.hot_max_factor <= 0) {
    #####: 5438:                    fprintf(stderr, "hot_max_factor must be > 0\n");
    #####: 5439:                    return 1;
        -: 5440:                }
        -: 5441:                break;
    #####: 5442:            case WARM_MAX_FACTOR:
    #####: 5443:                if (subopts_value == NULL) {
    #####: 5444:                    fprintf(stderr, "Missing warm_max_factor argument\n");
    #####: 5445:                    return 1;
        -: 5446:                }
    #####: 5447:                settings.warm_max_factor = atof(subopts_value);
    #####: 5448:                if (settings.warm_max_factor <= 0) {
    #####: 5449:                    fprintf(stderr, "warm_max_factor must be > 0\n");
    #####: 5450:                    return 1;
        -: 5451:                }
        -: 5452:                break;
        1: 5453:            case TEMPORARY_TTL:
        1: 5454:                if (subopts_value == NULL) {
    #####: 5455:                    fprintf(stderr, "Missing temporary_ttl argument\n");
    #####: 5456:                    return 1;
        -: 5457:                }
        1: 5458:                settings.temp_lru = true;
        1: 5459:                settings.temporary_ttl = atoi(subopts_value);
        1: 5460:                break;
        1: 5461:            case IDLE_TIMEOUT:
        1: 5462:                if (subopts_value == NULL) {
    #####: 5463:                    fprintf(stderr, "Missing numeric argument for idle_timeout\n");
    #####: 5464:                    return 1;
        -: 5465:                }
        1: 5466:                settings.idle_timeout = atoi(subopts_value);
        1: 5467:                break;
        4: 5468:            case WATCHER_LOGBUF_SIZE:
        4: 5469:                if (subopts_value == NULL) {
    #####: 5470:                    fprintf(stderr, "Missing watcher_logbuf_size argument\n");
    #####: 5471:                    return 1;
        -: 5472:                }
        4: 5473:                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {
    #####: 5474:                    fprintf(stderr, "could not parse argument to watcher_logbuf_size\n");
    #####: 5475:                    return 1;
        -: 5476:                }
        4: 5477:                settings.logger_watcher_buf_size *= 1024; /* kilobytes */
        4: 5478:                break;
    #####: 5479:            case WORKER_LOGBUF_SIZE:
    #####: 5480:                if (subopts_value == NULL) {
    #####: 5481:                    fprintf(stderr, "Missing worker_logbuf_size argument\n");
    #####: 5482:                    return 1;
        -: 5483:                }
    #####: 5484:                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {
    #####: 5485:                    fprintf(stderr, "could not parse argument to worker_logbuf_size\n");
    #####: 5486:                    return 1;
        -: 5487:                }
    #####: 5488:                settings.logger_buf_size *= 1024; /* kilobytes */
    #####: 5489:            case SLAB_SIZES:
    #####: 5490:                slab_sizes_unparsed = strdup(subopts_value);
    #####: 5491:                break;
        7: 5492:            case SLAB_CHUNK_MAX:
        7: 5493:                if (subopts_value == NULL) {
    #####: 5494:                    fprintf(stderr, "Missing slab_chunk_max argument\n");
    #####: 5495:                    return 1;
        -: 5496:                }
        7: 5497:                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {
    #####: 5498:                    fprintf(stderr, "could not parse argument to slab_chunk_max\n");
    #####: 5499:                    return 1;
        -: 5500:                }
        7: 5501:                if (settings.slab_chunk_size_max <= 0) {
    #####: 5502:                    fprintf(stderr, "slab_chunk_max must be >= 0\n");
    #####: 5503:                    return 1;
        -: 5504:                }
        7: 5505:                if (settings.slab_chunk_size_max > (1 << 10)) {
    #####: 5506:                    fprintf(stderr, "slab_chunk_max must be specified in kilobytes.\n");
    #####: 5507:                    return 1;
        -: 5508:                }
        7: 5509:                settings.slab_chunk_size_max *= (1 << 10);
        7: 5510:                slab_chunk_size_changed = true;
        7: 5511:                break;
    #####: 5512:            case TRACK_SIZES:
    #####: 5513:                item_stats_sizes_init();
    #####: 5514:                break;
        -: 5515:            case NO_INLINE_ASCII_RESP:
        -: 5516:                break;
        -: 5517:            case INLINE_ASCII_RESP:
        -: 5518:                break;
    #####: 5519:            case NO_CHUNKED_ITEMS:
    #####: 5520:                settings.slab_chunk_size_max = settings.slab_page_size;
    #####: 5521:                break;
    #####: 5522:            case NO_SLAB_REASSIGN:
    #####: 5523:                settings.slab_reassign = false;
    #####: 5524:                break;
        1: 5525:            case NO_SLAB_AUTOMOVE:
        1: 5526:                settings.slab_automove = 0;
        1: 5527:                break;
    #####: 5528:            case NO_MAXCONNS_FAST:
    #####: 5529:                settings.maxconns_fast = false;
    #####: 5530:                break;
        3: 5531:            case NO_LRU_CRAWLER:
        3: 5532:                settings.lru_crawler = false;
        3: 5533:                start_lru_crawler = false;
        3: 5534:                break;
        1: 5535:            case NO_LRU_MAINTAINER:
        1: 5536:                start_lru_maintainer = false;
        1: 5537:                settings.lru_segmented = false;
        1: 5538:                break;
        -: 5539:#ifdef TLS
        -: 5540:            case SSL_CERT:
        -: 5541:                if (subopts_value == NULL) {
        -: 5542:                    fprintf(stderr, "Missing ssl_chain_cert argument\n");
        -: 5543:                    return 1;
        -: 5544:                }
        -: 5545:                settings.ssl_chain_cert = strdup(subopts_value);
        -: 5546:                break;
        -: 5547:            case SSL_KEY:
        -: 5548:                if (subopts_value == NULL) {
        -: 5549:                    fprintf(stderr, "Missing ssl_key argument\n");
        -: 5550:                    return 1;
        -: 5551:                }
        -: 5552:                settings.ssl_key = strdup(subopts_value);
        -: 5553:                break;
        -: 5554:            case SSL_VERIFY_MODE:
        -: 5555:            {
        -: 5556:                if (subopts_value == NULL) {
        -: 5557:                    fprintf(stderr, "Missing ssl_verify_mode argument\n");
        -: 5558:                    return 1;
        -: 5559:                }
        -: 5560:                int verify  = 0;
        -: 5561:                if (!safe_strtol(subopts_value, &verify)) {
        -: 5562:                    fprintf(stderr, "could not parse argument to ssl_verify_mode\n");
        -: 5563:                    return 1;
        -: 5564:                }
        -: 5565:                switch(verify) {
        -: 5566:                    case 0:
        -: 5567:                        settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -: 5568:                        break;
        -: 5569:                    case 1:
        -: 5570:                        settings.ssl_verify_mode = SSL_VERIFY_PEER;
        -: 5571:                        break;
        -: 5572:                    case 2:
        -: 5573:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5574:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
        -: 5575:                        break;
        -: 5576:                    case 3:
        -: 5577:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5578:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT |
        -: 5579:                                                    SSL_VERIFY_CLIENT_ONCE;
        -: 5580:                        break;
        -: 5581:                    default:
        -: 5582:                        fprintf(stderr, "Invalid ssl_verify_mode. Use help to see valid options.\n");
        -: 5583:                        return 1;
        -: 5584:                }
        -: 5585:                break;
        -: 5586:            }
        -: 5587:            case SSL_KEYFORM:
        -: 5588:                if (subopts_value == NULL) {
        -: 5589:                    fprintf(stderr, "Missing ssl_keyformat argument\n");
        -: 5590:                    return 1;
        -: 5591:                }
        -: 5592:                if (!safe_strtol(subopts_value, &settings.ssl_keyformat)) {
        -: 5593:                    fprintf(stderr, "could not parse argument to ssl_keyformat\n");
        -: 5594:                    return 1;
        -: 5595:                }
        -: 5596:                break;
        -: 5597:            case SSL_CIPHERS:
        -: 5598:                if (subopts_value == NULL) {
        -: 5599:                    fprintf(stderr, "Missing ssl_ciphers argument\n");
        -: 5600:                    return 1;
        -: 5601:                }
        -: 5602:                settings.ssl_ciphers = strdup(subopts_value);
        -: 5603:                break;
        -: 5604:            case SSL_CA_CERT:
        -: 5605:                if (subopts_value == NULL) {
        -: 5606:                    fprintf(stderr, "Missing ssl_ca_cert argument\n");
        -: 5607:                    return 1;
        -: 5608:                }
        -: 5609:                settings.ssl_ca_cert = strdup(subopts_value);
        -: 5610:                break;
        -: 5611:            case SSL_WBUF_SIZE:
        -: 5612:                if (subopts_value == NULL) {
        -: 5613:                    fprintf(stderr, "Missing ssl_wbuf_size argument\n");
        -: 5614:                    return 1;
        -: 5615:                }
        -: 5616:                if (!safe_strtoul(subopts_value, &settings.ssl_wbuf_size)) {
        -: 5617:                    fprintf(stderr, "could not parse argument to ssl_wbuf_size\n");
        -: 5618:                    return 1;
        -: 5619:                }
        -: 5620:                settings.ssl_wbuf_size *= 1024; /* kilobytes */
        -: 5621:                break;
        -: 5622:            case SSL_SESSION_CACHE:
        -: 5623:                settings.ssl_session_cache = true;
        -: 5624:                break;
        -: 5625:            case SSL_KERNEL_TLS:
        -: 5626:                settings.ssl_kernel_tls = true;
        -: 5627:                break;
        -: 5628:            case SSL_MIN_VERSION: {
        -: 5629:                int min_version;
        -: 5630:                if (subopts_value == NULL) {
        -: 5631:                    fprintf(stderr, "Missing ssl_min_version argument\n");
        -: 5632:                    return 1;
        -: 5633:                }
        -: 5634:                if (!safe_strtol(subopts_value, &min_version)) {
        -: 5635:                    fprintf(stderr, "could not parse argument to ssl_min_version\n");
        -: 5636:                    return 1;
        -: 5637:                }
        -: 5638:                switch (min_version) {
        -: 5639:                    case 0:
        -: 5640:                        settings.ssl_min_version = TLS1_VERSION;
        -: 5641:                        break;
        -: 5642:                    case 1:
        -: 5643:                        settings.ssl_min_version = TLS1_1_VERSION;
        -: 5644:                        break;
        -: 5645:                    case 2:
        -: 5646:                        settings.ssl_min_version = TLS1_2_VERSION;
        -: 5647:                        break;
        -: 5648:#if defined(TLS1_3_VERSION)
        -: 5649:                    case 3:
        -: 5650:                        settings.ssl_min_version = TLS1_3_VERSION;
        -: 5651:                        break;
        -: 5652:#endif
        -: 5653:                    default:
        -: 5654:                        fprintf(stderr, "Invalid ssl_min_version. Use help to see valid options.\n");
        -: 5655:                        return 1;
        -: 5656:                }
        -: 5657:                break;
        -: 5658:            }
        -: 5659:#endif
        -: 5660:            case MODERN:
        -: 5661:                /* currently no new defaults */
        -: 5662:                break;
        7: 5663:            case NO_MODERN:
        7: 5664:                if (!slab_chunk_size_changed) {
        7: 5665:                    settings.slab_chunk_size_max = settings.slab_page_size;
        -: 5666:                }
        7: 5667:                settings.slab_reassign = false;
        7: 5668:                settings.slab_automove = 0;
        7: 5669:                settings.maxconns_fast = false;
        7: 5670:                settings.lru_segmented = false;
        7: 5671:                hash_type = JENKINS_HASH;
        7: 5672:                start_lru_crawler = false;
        7: 5673:                start_lru_maintainer = false;
        7: 5674:                break;
    #####: 5675:            case NO_DROP_PRIVILEGES:
    #####: 5676:                settings.drop_privileges = false;
    #####: 5677:                break;
    #####: 5678:            case DROP_PRIVILEGES:
    #####: 5679:                settings.drop_privileges = true;
    #####: 5680:                break;
    #####: 5681:            case RESP_OBJ_MEM_LIMIT:
        -: 5682:                // TODO: Remove at some point in the future.
    #####: 5683:                fprintf(stderr, "DEPRECATED: resp_obj_mem_limit no longer used. See read_buf_mem_limit,\n");
    #####: 5684:                break;
        1: 5685:            case READ_BUF_MEM_LIMIT:
        1: 5686:                if (subopts_value == NULL) {
    #####: 5687:                    fprintf(stderr, "Missing read_buf_mem_limit argument\n");
    #####: 5688:                    return 1;
        -: 5689:                }
        1: 5690:                if (!safe_strtoul(subopts_value, &settings.read_buf_mem_limit)) {
    #####: 5691:                    fprintf(stderr, "could not parse argument to read_buf_mem_limit\n");
    #####: 5692:                    return 1;
        -: 5693:                }
        1: 5694:                settings.read_buf_mem_limit *= 1024 * 1024; /* megabytes */
        1: 5695:                break;
        -: 5696:#ifdef PROXY
        -: 5697:            case PROXY_CONFIG:
        -: 5698:                if (subopts_value == NULL) {
        -: 5699:                    fprintf(stderr, "Missing proxy_config file argument\n");
        -: 5700:                    return 1;
        -: 5701:                }
        -: 5702:                if (protocol_specified) {
        -: 5703:                    fprintf(stderr, "Cannot specify a protocol with proxy mode enabled\n");
        -: 5704:                    return 1;
        -: 5705:                }
        -: 5706:                settings.proxy_startfile = strdup(subopts_value);
        -: 5707:                settings.proxy_enabled = true;
        -: 5708:                settings.binding_protocol = proxy_prot;
        -: 5709:                protocol_specified = true;
        -: 5710:                break;
        -: 5711:            case PROXY_ARG:
        -: 5712:                settings.proxy_startarg = strdup(subopts_value);
        -: 5713:                break;
        -: 5714:            case PROXY_URING:
        -: 5715:                settings.proxy_uring = true;
        -: 5716:                break;
        -: 5717:            case PROXY_MEMPROFILE:
        -: 5718:                settings.proxy_memprofile = true;
        -: 5719:                break;
        -: 5720:#endif
        -: 5721:#ifdef MEMCACHED_DEBUG
      120: 5722:            case RELAXED_PRIVILEGES:
      120: 5723:                settings.relaxed_privileges = true;
      120: 5724:                break;
        -: 5725:#endif
        -: 5726:#ifdef SOCK_COOKIE_ID
    #####: 5727:            case COOKIE_ID:
    #####: 5728:                (void)safe_strtoul(subopts_value, &settings.sock_cookie_id);
    #####: 5729:                break;
        -: 5730:#endif
      120: 5731:            default:
        -: 5732:#ifdef EXTSTORE
        -: 5733:                // TODO: differentiating response code.
      120: 5734:                if (storage_read_config(storage_cf, &subopts_temp)) {
        -: 5735:                    return 1;
        -: 5736:                }
        -: 5737:#else
        -: 5738:                printf("Illegal suboption \"%s\"\n", subopts_temp);
        -: 5739:                return 1;
        -: 5740:#endif
        -: 5741:            } // switch
      295: 5742:            if (subopts_temp_o) {
      295: 5743:                free(subopts_temp_o);
        -: 5744:            }
        -: 5745:
        -: 5746:            } // while
      158: 5747:            free(subopts_orig);
      158: 5748:            break;
    #####: 5749:        default:
    #####: 5750:            fprintf(stderr, "Illegal argument \"%c\"\n", c);
    #####: 5751:            return 1;
        -: 5752:        }
        -: 5753:    }
        -: 5754:
      122: 5755:    if (settings.num_napi_ids > settings.num_threads) {
    #####: 5756:        fprintf(stderr, "Number of napi_ids(%d) cannot be greater than number of threads(%d)\n",
        -: 5757:                settings.num_napi_ids, settings.num_threads);
    #####: 5758:        exit(EX_USAGE);
        -: 5759:    }
        -: 5760:
      122: 5761:    if (settings.item_size_max < ITEM_SIZE_MAX_LOWER_LIMIT) {
        1: 5762:        fprintf(stderr, "Item max size cannot be less than 1024 bytes.\n");
        1: 5763:        exit(EX_USAGE);
        -: 5764:    }
      121: 5765:    if (settings.item_size_max > (settings.maxbytes / 2)) {
        1: 5766:        fprintf(stderr, "Cannot set item size limit higher than 1/2 of memory max.\n");
        1: 5767:        exit(EX_USAGE);
        -: 5768:    }
      120: 5769:    if (settings.item_size_max > (ITEM_SIZE_MAX_UPPER_LIMIT)) {
    #####: 5770:        fprintf(stderr, "Cannot set item size limit higher than a gigabyte.\n");
    #####: 5771:        exit(EX_USAGE);
        -: 5772:    }
      120: 5773:    if (settings.item_size_max > 1024 * 1024) {
        5: 5774:        if (!slab_chunk_size_changed) {
        -: 5775:            // Ideal new default is 16k, but needs stitching.
        5: 5776:            settings.slab_chunk_size_max = settings.slab_page_size / 2;
        -: 5777:        }
        -: 5778:    }
        -: 5779:
      120: 5780:    if (settings.slab_chunk_size_max > settings.item_size_max) {
    #####: 5781:        fprintf(stderr, "slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\n",
        -: 5782:                settings.slab_chunk_size_max, settings.item_size_max);
    #####: 5783:        exit(EX_USAGE);
        -: 5784:    }
        -: 5785:
      120: 5786:    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {
    #####: 5787:        fprintf(stderr, "-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\n",
        -: 5788:                settings.item_size_max, settings.slab_chunk_size_max);
    #####: 5789:        exit(EX_USAGE);
        -: 5790:    }
        -: 5791:
      120: 5792:    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {
    #####: 5793:        fprintf(stderr, "slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\n",
        -: 5794:                settings.slab_chunk_size_max, settings.slab_page_size);
    #####: 5795:        exit(EX_USAGE);
        -: 5796:    }
        -: 5797:#ifdef EXTSTORE
      120: 5798:    switch (storage_check_config(storage_cf)) {
       13: 5799:        case 0:
       13: 5800:            storage_enabled = true;
       13: 5801:            break;
    #####: 5802:        case 1:
    #####: 5803:            exit(EX_USAGE);
      120: 5804:            break;
        -: 5805:    }
        -: 5806:#endif
        -: 5807:    // Reserve this for the new default. If factor size hasn't changed, use
        -: 5808:    // new default.
        -: 5809:    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {
        -: 5810:        settings.factor = 1.08;
        -: 5811:    }*/
        -: 5812:
      120: 5813:    if (slab_sizes_unparsed != NULL) {
        -: 5814:        // want the unedited string for restart code.
    #####: 5815:        char *temp = strdup(slab_sizes_unparsed);
    #####: 5816:        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {
    #####: 5817:            use_slab_sizes = true;
    #####: 5818:            if (meta->slab_config) {
    #####: 5819:                free(meta->slab_config);
        -: 5820:            }
    #####: 5821:            meta->slab_config = temp;
        -: 5822:        } else {
    #####: 5823:            exit(EX_USAGE);
        -: 5824:        }
      120: 5825:    } else if (!meta->slab_config) {
        -: 5826:        // using the default factor.
      120: 5827:        meta->slab_config = "1.25";
        -: 5828:    }
        -: 5829:
      120: 5830:    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {
    #####: 5831:        fprintf(stderr, "hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\n");
    #####: 5832:        exit(EX_USAGE);
        -: 5833:    }
        -: 5834:
      120: 5835:    if (settings.temp_lru && !start_lru_maintainer) {
    #####: 5836:        fprintf(stderr, "temporary_ttl requires lru_maintainer to be enabled\n");
    #####: 5837:        exit(EX_USAGE);
        -: 5838:    }
        -: 5839:
      120: 5840:    if (hash_init(hash_type) != 0) {
    #####: 5841:        fprintf(stderr, "Failed to initialize hash_algorithm!\n");
    #####: 5842:        exit(EX_USAGE);
        -: 5843:    }
        -: 5844:
        -: 5845:    /*
        -: 5846:     * Use one workerthread to serve each UDP port if the user specified
        -: 5847:     * multiple ports
        -: 5848:     */
      120: 5849:    if (settings.inter != NULL && strchr(settings.inter, ',')) {
    #####: 5850:        settings.num_threads_per_udp = 1;
        -: 5851:    } else {
      120: 5852:        settings.num_threads_per_udp = settings.num_threads;
        -: 5853:    }
        -: 5854:
      120: 5855:    if (settings.sasl) {
    #####: 5856:        if (!protocol_specified) {
    #####: 5857:            settings.binding_protocol = binary_prot;
        -: 5858:        } else {
    #####: 5859:            if (settings.binding_protocol != binary_prot) {
    #####: 5860:                fprintf(stderr, "ERROR: You cannot allow the ASCII protocol while using SASL.\n");
    #####: 5861:                exit(EX_USAGE);
        -: 5862:            }
        -: 5863:        }
        -: 5864:
    #####: 5865:        if (settings.udpport) {
    #####: 5866:            fprintf(stderr, "ERROR: Cannot enable UDP while using binary SASL authentication.\n");
    #####: 5867:            exit(EX_USAGE);
        -: 5868:        }
        -: 5869:    }
        -: 5870:
      120: 5871:    if (settings.auth_file) {
        1: 5872:        if (!protocol_specified) {
        1: 5873:            settings.binding_protocol = ascii_prot;
        -: 5874:        } else {
    #####: 5875:            if (settings.binding_protocol != ascii_prot) {
    #####: 5876:                fprintf(stderr, "ERROR: You cannot allow the BINARY protocol while using ascii authentication tokens.\n");
    #####: 5877:                exit(EX_USAGE);
        -: 5878:            }
        -: 5879:        }
        -: 5880:    }
        -: 5881:
      120: 5882:    if (udp_specified && settings.udpport != 0 && !tcp_specified) {
        2: 5883:        settings.port = settings.udpport;
        -: 5884:    }
        -: 5885:
      120: 5886:    if (settings.port > 65535) {
    #####: 5887:        fprintf(stderr, "ERROR: Invalid port number %d.\n", settings.port);
    #####: 5888:        exit(EX_USAGE);
        -: 5889:    }
        -: 5890:
        -: 5891:
        -: 5892:#ifdef TLS
        -: 5893:    /*
        -: 5894:     * Setup SSL if enabled
        -: 5895:     */
        -: 5896:    if (settings.ssl_enabled) {
        -: 5897:        if (!settings.port) {
        -: 5898:            fprintf(stderr, "ERROR: You cannot enable SSL without a TCP port.\n");
        -: 5899:            exit(EX_USAGE);
        -: 5900:        }
        -: 5901:        // openssl init methods.
        -: 5902:        SSL_load_error_strings();
        -: 5903:        SSLeay_add_ssl_algorithms();
        -: 5904:        // Initiate the SSL context.
        -: 5905:        ssl_init();
        -: 5906:    }
        -: 5907:#endif
        -: 5908:
      120: 5909:    if (maxcore != 0) {
    #####: 5910:        struct rlimit rlim_new;
        -: 5911:        /*
        -: 5912:         * First try raising to infinity; if that fails, try bringing
        -: 5913:         * the soft limit to the hard.
        -: 5914:         */
    #####: 5915:        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
    #####: 5916:            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;
    #####: 5917:            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {
        -: 5918:                /* failed. try raising just to the old max */
    #####: 5919:                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;
    #####: 5920:                (void)setrlimit(RLIMIT_CORE, &rlim_new);
        -: 5921:            }
        -: 5922:        }
        -: 5923:        /*
        -: 5924:         * getrlimit again to see what we ended up with. Only fail if
        -: 5925:         * the soft limit ends up 0, because then no core files will be
        -: 5926:         * created at all.
        -: 5927:         */
        -: 5928:
    #####: 5929:        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {
    #####: 5930:            fprintf(stderr, "failed to ensure corefile creation\n");
    #####: 5931:            exit(EX_OSERR);
        -: 5932:        }
        -: 5933:    }
        -: 5934:
        -: 5935:    /*
        -: 5936:     * If needed, increase rlimits to allow as many connections
        -: 5937:     * as needed.
        -: 5938:     */
        -: 5939:
      120: 5940:    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {
    #####: 5941:        fprintf(stderr, "failed to getrlimit number of files\n");
    #####: 5942:        exit(EX_OSERR);
        -: 5943:    } else {
      120: 5944:        rlim.rlim_cur = settings.maxconns;
      120: 5945:        rlim.rlim_max = settings.maxconns;
      120: 5946:        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {
        -: 5947:#ifndef MEMCACHED_DEBUG
        -: 5948:            fprintf(stderr, "failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\n");
        -: 5949:            exit(EX_OSERR);
        -: 5950:#endif
      120: 5951:        }
        -: 5952:    }
        -: 5953:
        -: 5954:    /* lose root privileges if we have them */
      120: 5955:    if (getuid() == 0 || geteuid() == 0) {
    #####: 5956:        if (username == 0 || *username == '\0') {
    #####: 5957:            fprintf(stderr, "can't run as root without the -u switch\n");
    #####: 5958:            exit(EX_USAGE);
        -: 5959:        }
    #####: 5960:        if ((pw = getpwnam(username)) == 0) {
    #####: 5961:            fprintf(stderr, "can't find the user %s to switch to\n", username);
    #####: 5962:            exit(EX_NOUSER);
        -: 5963:        }
    #####: 5964:        if (setgroups(0, NULL) < 0) {
        -: 5965:            /* setgroups may fail with EPERM, indicating we are already in a
        -: 5966:             * minimally-privileged state. In that case we continue. For all
        -: 5967:             * other failure codes we exit.
        -: 5968:             *
        -: 5969:             * Note that errno is stored here because fprintf may change it.
        -: 5970:             */
    #####: 5971:            bool should_exit = errno != EPERM;
    #####: 5972:            fprintf(stderr, "failed to drop supplementary groups: %s\n",
        -: 5973:                    strerror(errno));
    #####: 5974:            if (should_exit) {
    #####: 5975:                exit(EX_OSERR);
        -: 5976:            }
        -: 5977:        }
    #####: 5978:        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
    #####: 5979:            fprintf(stderr, "failed to assume identity of user %s\n", username);
    #####: 5980:            exit(EX_OSERR);
        -: 5981:        }
        -: 5982:    }
        -: 5983:
        -: 5984:    /* Initialize Sasl if -S was specified */
      120: 5985:    if (settings.sasl) {
      120: 5986:        init_sasl();
        -: 5987:    }
        -: 5988:
        -: 5989:    /* daemonize if requested */
        -: 5990:    /* if we want to ensure our ability to dump core, don't chdir to / */
      120: 5991:    if (do_daemonize) {
    #####: 5992:        if (daemonize(maxcore, settings.verbose) == -1) {
    #####: 5993:            fprintf(stderr, "failed to daemon() in order to daemonize\n");
    #####: 5994:            exit(EXIT_FAILURE);
        -: 5995:        }
        -: 5996:    }
        -: 5997:
        -: 5998:    /* lock paged memory if needed */
      121: 5999:    if (lock_memory) {
        -: 6000:#ifdef HAVE_MLOCKALL
    #####: 6001:        int res = mlockall(MCL_CURRENT | MCL_FUTURE);
    #####: 6002:        if (res != 0) {
    #####: 6003:            fprintf(stderr, "warning: -k invalid, mlockall() failed: %s\n",
    #####: 6004:                    strerror(errno));
        -: 6005:        }
        -: 6006:#else
        -: 6007:        fprintf(stderr, "warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\n");
        -: 6008:#endif
        -: 6009:    }
        -: 6010:
        -: 6011:    /* initialize main thread libevent instance */
        -: 6012:#if defined(LIBEVENT_VERSION_NUMBER) && LIBEVENT_VERSION_NUMBER >= 0x02000101
        -: 6013:    /* If libevent version is larger/equal to 2.0.2-alpha, use newer version */
      121: 6014:    struct event_config *ev_config;
      121: 6015:    ev_config = event_config_new();
      121: 6016:    event_config_set_flag(ev_config, EVENT_BASE_FLAG_NOLOCK);
      121: 6017:    main_base = event_base_new_with_config(ev_config);
      121: 6018:    event_config_free(ev_config);
        -: 6019:#else
        -: 6020:    /* Otherwise, use older API */
        -: 6021:    main_base = event_init();
        -: 6022:#endif
        -: 6023:
        -: 6024:    /* Load initial auth file if required */
      121: 6025:    if (settings.auth_file) {
        1: 6026:        if (settings.udpport) {
    #####: 6027:            fprintf(stderr, "Cannot use UDP with ascii authentication enabled (-U 0 to disable)\n");
    #####: 6028:            exit(EX_USAGE);
        -: 6029:        }
        -: 6030:
        1: 6031:        switch (authfile_load(settings.auth_file)) {
    #####: 6032:            case AUTHFILE_STATFAIL:
    #####: 6033:                vperror("Could not stat authfile [%s], error %s", settings.auth_file
    #####: 6034:                                                            , strerror(errno));
    #####: 6035:                exit(EXIT_FAILURE);
    #####: 6036:                break;
    #####: 6037:            case AUTHFILE_OPENFAIL:
    #####: 6038:                vperror("Could not open authfile [%s] for reading, error %s", settings.auth_file
    #####: 6039:                                                                           , strerror(errno));
    #####: 6040:                exit(EXIT_FAILURE);
    #####: 6041:                break;
    #####: 6042:            case AUTHFILE_OOM:
    #####: 6043:                fprintf(stderr, "Out of memory reading password file: %s", settings.auth_file);
    #####: 6044:                exit(EXIT_FAILURE);
    #####: 6045:                break;
    #####: 6046:            case AUTHFILE_MALFORMED:
    #####: 6047:                fprintf(stderr, "Authfile [%s] has a malformed entry. Should be 'user:password'", settings.auth_file);
    #####: 6048:                exit(EXIT_FAILURE);
        -: 6049:                break;
        -: 6050:            case AUTHFILE_OK:
        -: 6051:                break;
        -: 6052:        }
        -: 6053:    }
        -: 6054:
        -: 6055:    /* initialize other stuff */
      121: 6056:    stats_init();
      121: 6057:    logger_init();
      121: 6058:    conn_init();
      121: 6059:    bool reuse_mem = false;
      121: 6060:    void *mem_base = NULL;
      121: 6061:    bool prefill = false;
      121: 6062:    if (settings.memory_file != NULL) {
        2: 6063:        preallocate = true;
        -: 6064:        // Easier to manage memory if we prefill the global pool when reusing.
        2: 6065:        prefill = true;
        2: 6066:        restart_register("main", _mc_meta_load_cb, _mc_meta_save_cb, meta);
        4: 6067:        reuse_mem = restart_mmap_open(settings.maxbytes,
        2: 6068:                        settings.memory_file,
        -: 6069:                        &mem_base);
        -: 6070:        // The "save" callback gets called when we're closing out the mmap,
        -: 6071:        // but we don't know what the mmap_base is until after we call open.
        -: 6072:        // So we pass the struct above but have to fill it in here so the
        -: 6073:        // data's available during the save routine.
        2: 6074:        meta->mmap_base = mem_base;
        -: 6075:        // Also, the callbacks for load() run before _open returns, so we
        -: 6076:        // should have the old base in 'meta' as of here.
        -: 6077:    }
        -: 6078:    // Initialize the hash table _after_ checking restart metadata.
        -: 6079:    // We override the hash table start argument with what was live
        -: 6080:    // previously, to avoid filling a huge set of items into a tiny hash
        -: 6081:    // table.
      121: 6082:    assoc_init(settings.hashpower_init);
        -: 6083:#ifdef EXTSTORE
      121: 6084:    if (storage_enabled && reuse_mem) {
    #####: 6085:        fprintf(stderr, "[restart] memory restart with extstore not presently supported.\n");
    #####: 6086:        reuse_mem = false;
        -: 6087:    }
        -: 6088:#endif
      242: 6089:    slabs_init(settings.maxbytes, settings.factor, preallocate,
        -: 6090:            use_slab_sizes ? slab_sizes : NULL, mem_base, reuse_mem);
        -: 6091:#ifdef EXTSTORE
      121: 6092:    if (storage_enabled) {
       13: 6093:        storage = storage_init(storage_cf);
       13: 6094:        if (storage == NULL) {
        1: 6095:            exit(EXIT_FAILURE);
        -: 6096:        }
       12: 6097:        ext_storage = storage;
        -: 6098:        /* page mover algorithm for extstore needs memory prefilled */
       12: 6099:        prefill = true;
        -: 6100:    }
        -: 6101:#endif
        -: 6102:
      120: 6103:    if (settings.drop_privileges) {
      120: 6104:        setup_privilege_violations_handler();
        -: 6105:    }
        -: 6106:
      120: 6107:    if (prefill)
       14: 6108:        slabs_prefill_global();
        -: 6109:    /* In restartable mode and we've decided to issue a fixup on memory */
      120: 6110:    if (settings.memory_file != NULL && reuse_mem) {
        1: 6111:        mc_ptr_t old_base = meta->old_base;
        1: 6112:        assert(old_base == meta->old_base);
        -: 6113:
        -: 6114:        // should've pulled in process_started from meta file.
        1: 6115:        process_started = meta->process_started;
        -: 6116:        // TODO: must be a more canonical way of serializing/deserializing
        -: 6117:        // pointers? passing through uint64_t should work, and we're not
        -: 6118:        // annotating the pointer with anything, but it's still slightly
        -: 6119:        // insane.
        1: 6120:        restart_fixup((void *)old_base);
        -: 6121:    }
        -: 6122:    /*
        -: 6123:     * ignore SIGPIPE signals; we can use errno == EPIPE if we
        -: 6124:     * need that information
        -: 6125:     */
      120: 6126:    if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
    #####: 6127:        perror("failed to ignore SIGPIPE; sigaction");
    #####: 6128:        exit(EX_OSERR);
        -: 6129:    }
        -: 6130:    /* start up worker threads if MT mode */
        -: 6131:#ifdef PROXY
        -: 6132:    if (settings.proxy_enabled) {
        -: 6133:        settings.proxy_ctx = proxy_init(settings.proxy_uring, settings.proxy_memprofile);
        -: 6134:    }
        -: 6135:#endif
        -: 6136:#ifdef EXTSTORE
      120: 6137:    slabs_set_storage(storage);
      120: 6138:    memcached_thread_init(settings.num_threads, storage);
      120: 6139:    init_lru_crawler(storage);
        -: 6140:#else
        -: 6141:    memcached_thread_init(settings.num_threads, NULL);
        -: 6142:    init_lru_crawler(NULL);
        -: 6143:#endif
        -: 6144:
        -: 6145:#ifdef PROXY
        -: 6146:    if (settings.proxy_enabled) {
        -: 6147:        if (proxy_first_confload(settings.proxy_ctx) != 0) {
        -: 6148:            exit(EXIT_FAILURE);
        -: 6149:        }
        -: 6150:    }
        -: 6151:#endif
        -: 6152:
      120: 6153:    if (start_assoc_maint && start_assoc_maintenance_thread() == -1) {
    #####: 6154:        exit(EXIT_FAILURE);
        -: 6155:    }
      120: 6156:    if (start_lru_crawler && start_item_crawler_thread() != 0) {
    #####: 6157:        fprintf(stderr, "Failed to enable LRU crawler thread\n");
    #####: 6158:        exit(EXIT_FAILURE);
        -: 6159:    }
        -: 6160:#ifdef EXTSTORE
      120: 6161:    if (storage && start_storage_compact_thread(storage) != 0) {
    #####: 6162:        fprintf(stderr, "Failed to start storage compaction thread\n");
    #####: 6163:        exit(EXIT_FAILURE);
        -: 6164:    }
       12: 6165:    if (storage && start_storage_write_thread(storage) != 0) {
    #####: 6166:        fprintf(stderr, "Failed to start storage writer thread\n");
    #####: 6167:        exit(EXIT_FAILURE);
        -: 6168:    }
        -: 6169:
      120: 6170:    if (start_lru_maintainer && start_lru_maintainer_thread(storage) != 0) {
        -: 6171:#else
        -: 6172:    if (start_lru_maintainer && start_lru_maintainer_thread(NULL) != 0) {
        -: 6173:#endif
    #####: 6174:        fprintf(stderr, "Failed to enable LRU maintainer thread\n");
    #####: 6175:        free(meta);
    #####: 6176:        return 1;
        -: 6177:    }
        -: 6178:
      233: 6179:    if (settings.slab_reassign &&
      113: 6180:        start_slab_maintenance_thread() == -1) {
    #####: 6181:        exit(EXIT_FAILURE);
        -: 6182:    }
        -: 6183:
      120: 6184:    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {
    #####: 6185:        exit(EXIT_FAILURE);
        -: 6186:    }
        -: 6187:
        -: 6188:    /* initialise clock event */
        -: 6189:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 6190:    {
      120: 6191:        struct timespec ts;
      120: 6192:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
      120: 6193:            monotonic = true;
      120: 6194:            monotonic_start = ts.tv_sec;
        -: 6195:            // Monotonic clock needs special handling for restarts.
        -: 6196:            // We get a start time at an arbitrary place, so we need to
        -: 6197:            // restore the original time delta, which is always "now" - _start
      120: 6198:            if (reuse_mem) {
        -: 6199:                // the running timespan at stop time + the time we think we
        -: 6200:                // were stopped.
        1: 6201:                monotonic_start -= meta->current_time + meta->time_delta;
        -: 6202:            } else {
      119: 6203:                monotonic_start -= ITEM_UPDATE_INTERVAL + 2;
        -: 6204:            }
        -: 6205:        }
        -: 6206:    }
        -: 6207:#endif
      120: 6208:    clock_handler(0, 0, 0);
        -: 6209:
        -: 6210:    /* create unix mode sockets after dropping privileges */
      120: 6211:    if (settings.socketpath != NULL) {
       99: 6212:        errno = 0;
       99: 6213:        if (server_socket_unix(settings.socketpath,settings.access)) {
    #####: 6214:            vperror("failed to listen on UNIX socket: %s", settings.socketpath);
    #####: 6215:            exit(EX_OSERR);
        -: 6216:        }
        -: 6217:    }
        -: 6218:
        -: 6219:    /* create the listening socket, bind it, and init */
      120: 6220:    if (settings.socketpath == NULL) {
       21: 6221:        const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
       21: 6222:        char *temp_portnumber_filename = NULL;
       21: 6223:        size_t len;
       21: 6224:        FILE *portnumber_file = NULL;
        -: 6225:
       21: 6226:        if (portnumber_filename != NULL) {
       14: 6227:            len = strlen(portnumber_filename)+4+1;
       14: 6228:            temp_portnumber_filename = malloc(len);
       14: 6229:            if (temp_portnumber_filename == NULL) {
    #####: 6230:                vperror("Failed to allocate memory for portnumber file");
    #####: 6231:                exit(EX_OSERR);
        -: 6232:            }
       14: 6233:            snprintf(temp_portnumber_filename,
        -: 6234:                     len,
        -: 6235:                     "%s.lck", portnumber_filename);
        -: 6236:
       14: 6237:            portnumber_file = fopen(temp_portnumber_filename, "a");
       14: 6238:            if (portnumber_file == NULL) {
    #####: 6239:                fprintf(stderr, "Failed to open \"%s\": %s\n",
    #####: 6240:                        temp_portnumber_filename, strerror(errno));
        -: 6241:            }
        -: 6242:        }
        -: 6243:
       21: 6244:        errno = 0;
       21: 6245:        if (settings.port && server_sockets(settings.port, tcp_transport,
        -: 6246:                                           portnumber_file)) {
        1: 6247:            if (settings.inter == NULL) {
    #####: 6248:                vperror("failed to listen on TCP port %d", settings.port);
        -: 6249:            } else {
        1: 6250:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6251:            }
        1: 6252:            exit(EX_OSERR);
        -: 6253:        }
        -: 6254:
        -: 6255:        /*
        -: 6256:         * initialization order: first create the listening sockets
        -: 6257:         * (may need root on low ports), then drop root if needed,
        -: 6258:         * then daemonize if needed, then init libevent (in some cases
        -: 6259:         * descriptors created by libevent wouldn't survive forking).
        -: 6260:         */
        -: 6261:
        -: 6262:        /* create the UDP listening socket and bind it */
       20: 6263:        errno = 0;
       20: 6264:        if (settings.udpport && server_sockets(settings.udpport, udp_transport,
        -: 6265:                                              portnumber_file)) {
    #####: 6266:            if (settings.inter == NULL) {
    #####: 6267:                vperror("failed to listen on UDP port %d", settings.udpport);
        -: 6268:            } else {
    #####: 6269:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6270:            }
    #####: 6271:            exit(EX_OSERR);
        -: 6272:        }
        -: 6273:
       20: 6274:        if (portnumber_file) {
       14: 6275:            fclose(portnumber_file);
       14: 6276:            rename(temp_portnumber_filename, portnumber_filename);
        -: 6277:        }
       20: 6278:        if (temp_portnumber_filename)
       14: 6279:            free(temp_portnumber_filename);
        -: 6280:    }
        -: 6281:
        -: 6282:    /* Give the sockets a moment to open. I know this is dumb, but the error
        -: 6283:     * is only an advisory.
        -: 6284:     */
      119: 6285:    usleep(1000);
      119: 6286:    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {
    #####: 6287:        fprintf(stderr, "Maxconns setting is too low, use -c to increase.\n");
    #####: 6288:        exit(EXIT_FAILURE);
        -: 6289:    }
        -: 6290:
      119: 6291:    if (pid_file != NULL) {
        1: 6292:        save_pid(pid_file);
        -: 6293:    }
        -: 6294:
        -: 6295:    /* Drop privileges no longer needed */
      119: 6296:    if (settings.drop_privileges) {
      119: 6297:        drop_privileges();
        -: 6298:    }
        -: 6299:
        -: 6300:    /* Initialize the uriencode lookup table. */
      119: 6301:    uriencode_init();
        -: 6302:
        -: 6303:    /* enter the event loop */
     2681: 6304:    while (!stop_main_loop) {
     2562: 6305:        if (event_base_loop(main_base, EVLOOP_ONCE) != 0) {
        -: 6306:            retval = EXIT_FAILURE;
        -: 6307:            break;
        -: 6308:        }
        -: 6309:    }
        -: 6310:
      119: 6311:    switch (stop_main_loop) {
        2: 6312:        case GRACE_STOP:
        2: 6313:            fprintf(stderr, "Gracefully stopping\n");
        2: 6314:        break;
      117: 6315:        case EXIT_NORMALLY:
        -: 6316:            // Don't need to print anything to STDERR for a normal shutdown except
        -: 6317:            // if we want to.
        -: 6318:
      117: 6319:            if (settings.verbose) {
        3: 6320:                fprintf(stderr, "Exiting normally\n");
        -: 6321:            }
        -: 6322:
        -: 6323:        break;
    #####: 6324:        default:
    #####: 6325:            fprintf(stderr, "Exiting on error\n");
    #####: 6326:        break;
        -: 6327:    }
        -: 6328:
      119: 6329:    if (stop_main_loop == GRACE_STOP) {
        2: 6330:        stop_threads();
        2: 6331:        if (settings.memory_file != NULL) {
        1: 6332:            restart_mmap_close();
        -: 6333:        }
        -: 6334:    }
        -: 6335:
        -: 6336:    /* remove the PID file if we're a daemon */
      119: 6337:    if (do_daemonize)
        1: 6338:        remove_pidfile(pid_file);
        -: 6339:    /* Clean up strdup() call for bind() address */
      119: 6340:    if (settings.inter)
        6: 6341:      free(settings.inter);
        -: 6342:
        -: 6343:    /* cleanup base */
      119: 6344:    event_base_free(main_base);
        -: 6345:
      119: 6346:    free(meta);
        -: 6347:
      119: 6348:    return retval;
        -: 6349:}
